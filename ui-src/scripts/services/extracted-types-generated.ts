// Auto-generated type definitions extracted from node_modules
// This file is generated during the webpack build process

export interface ExtractedTypes {
  figma: string;
  d3: string;
}

export const EXTRACTED_TYPES: ExtractedTypes = {
  figma: "declare global {\n  // Global variable with Figma's plugin API.\n  const figma: PluginAPI\n  const __html__: string\n  const __uiFiles__: {\n    [key: string]: string\n  }\n  const console: Console\n\n  // The plugin environment exposes the browser console API,\n  // so expected calls like console.log() still work.\n  interface Console {\n    log(message?: any, ...optionalParams: any[]): void\n    error(message?: any, ...optionalParams: any[]): void\n    assert(condition?: boolean, message?: string, ...data: any[]): void\n    info(message?: any, ...optionalParams: any[]): void\n    warn(message?: any, ...optionalParams: any[]): void\n    clear(): void\n  }\n  function setTimeout(callback: Function, timeout: number): number\n  function clearTimeout(handle: number): void\n  function setInterval(callback: Function, timeout: number): number\n  function clearInterval(handle: number): void\n\n  const fetch: (url: string, init?: FetchOptions) => Promise<FetchResponse>\n\n  interface FetchOptions {\n    method?: string\n    headers?: { [name: string]: string }\n    /**\n     * @deprecated use headers instead\n     */\n    headersObject?: { [name: string]: string }\n    body?: Uint8Array | string\n    credentials?: string\n    cache?: string\n    redirect?: string\n    referrer?: string\n    integrity?: string\n  }\n\n  interface FetchResponse {\n    headersObject: { [name: string]: string }\n    ok: boolean\n    redirected: boolean\n    status: number\n    statusText: string\n    type: string\n    url: string\n    arrayBuffer(): Promise<ArrayBuffer>\n    text(): Promise<string>\n    json(): Promise<any>\n  }\n} // declare global\n\nexport {}\n\n/* plugin-typings are auto-generated. Do not update them directly. See plugin-docs/ for instructions. */\n/**\n * @see https://www.figma.com/plugin-docs/api/properties/figma-on\n */\ndeclare type ArgFreeEventType =\n  | 'selectionchange'\n  | 'currentpagechange'\n  | 'close'\n  | 'timerstart'\n  | 'timerstop'\n  | 'timerpause'\n  | 'timerresume'\n  | 'timeradjust'\n  | 'timerdone'\n/**\n * @see https://www.figma.com/plugin-docs/api/figma\n */\ninterface PluginAPI {\n  /**\n   * The version of the Figma API this plugin is running on, as defined in your `manifest.json` in the `\"api\"` field.\n   */\n  readonly apiVersion: '1.0.0'\n  /**\n   * The currently executing command from the `manifest.json` file. It is the command string in the `ManifestMenuItem` (more details in the [manifest guide](https://www.figma.com/plugin-docs/manifest)). If the plugin does not have any menu item, this property is undefined.\n   */\n  readonly command: string\n  /**\n   * The current editor type this plugin is running in. See also [Setting editor type](https://www.figma.com/plugin-docs/setting-editor-type/).\n   */\n  readonly editorType: 'figma' | 'figjam' | 'dev' | 'slides'\n  /**\n   * Return the context the plugin is current running in.\n   *\n   * - `default` - The plugin is running as a normal plugin.\n   * - `textreview` - The plugin is running to provide text review functionality.\n   * - `inspect` - The plugin is running in the Inspect panel in Dev Mode.\n   * - `codegen` - The plugin is running in the Code section of the Inspect panel in Dev Mode.\n   * - `linkpreview` - The plugin is generating a link preview for a [Dev resource](https://help.figma.com/hc/en-us/articles/15023124644247#Add_external_links_and_resources_for_developers) in Dev Mode.\n   * - `auth` - The plugin is running to authenticate a user in Dev Mode.\n   *\n   * Caution: The `linkpreview` and `auth` modes are only available to partner and Figma-owned plugins.\n   *\n   * @remarks\n   * Here’s a simplified example where you can create an if statement in a plugin that has one set of functionality when it is run in `Dev Mode`, and another set of functionality when run in Figma design:\n   * ```ts title=\"Code sample to determine editorType and mode\"\n   * if (figma.editorType === \"dev\") {\n   *   // Read the document and listen to API events\n   *   if (figma.mode === \"inspect\") {\n   *     // Running in inspect panel mode\n   *   } else if (figma.mode === \"codegen\") {\n   *     // Running in codegen mode\n   *   }\n   * } else if (figma.editorType === \"figma\") {\n   *   // If the plugin is run in Figma design, edit the document\n   *   if (figma.mode === 'textreview') {\n   *     // Running in text review mode\n   *   }\n   * } else if (figma.editorType === \"figjam\") {\n   *   // Do FigJam only operations\n   *   if (figma.mode === 'textreview') {\n   *     // Running in text review mode\n   *   }\n   * }\n   * ```\n   */\n  readonly mode: 'default' | 'textreview' | 'inspect' | 'codegen' | 'linkpreview' | 'auth'\n  /**\n   * The value specified in the `manifest.json` \"id\" field. This only exists for Plugins.\n   */\n  readonly pluginId?: string\n  /**\n   * Similar to `figma.pluginId` but for widgets. The value specified in the `manifest.json` \"id\" field. This only exists for Widgets.\n   */\n  readonly widgetId?: string\n  /**\n   * The file key of the current file this plugin is running on.\n   * **Only [private plugins](https://help.figma.com/hc/en-us/articles/4404228629655-Create-private-organization-plugins) and Figma-owned resources (such as the Jira and Asana widgets) have access to this.**\n   * To enable this behavior, you need to specify `enablePrivatePluginApi` in your `manifest.json`.\n   */\n  readonly fileKey: string | undefined\n  /**\n   * When enabled, causes all node properties and methods to skip over invisible nodes (and their descendants) inside {@link InstanceNode | instances}.\n   * This makes operations like document traversal much faster.\n   *\n   * Note: Defaults to true in Figma Dev Mode and false in Figma and FigJam\n   *\n   * @remarks\n   *\n   * Accessing and modifying invisible nodes and their descendants inside instances can be slow with the plugin API.\n   * This is especially true in large documents with tens of thousands of nodes where a call to {@link ChildrenMixin.findAll} might come across many of these invisible instance children.\n   *\n   * If your plugin does not need access to these nodes, we recommend setting `figma.skipInvisibleInstanceChildren = true` as that often makes document traversal significantly faster.\n   *\n   * When this flag is enabled, it will not be possible to access invisible nodes (and their descendants) inside instances. This has the following effects:\n   *\n   * - {@link ChildrenMixin.children} and methods such as {@link ChildrenMixin.findAll} will exclude these nodes.\n   * - {@link PluginAPI.getNodeByIdAsync} will return a promise containing null.\n   * - {@link PluginAPI.getNodeById} will return null.\n   * - Accessing a property on an existing node object for an invisible node will throw an error.\n   *\n   * For example, suppose that a portion of the document tree looks like this:\n   *\n   * Frame (visible) → Instance (visible) → Frame (invisible) → Text (visible)\n   *\n   * The last two frame and text nodes cannot be accessed after setting `figma.skipInvisibleInstanceChildren = true`.\n   *\n   * The benefit of enabling this flag is that document traversal methods, {@link ChildrenMixin.findAll} and {@link ChildrenMixin.findOne}, can be up to several times faster in large documents that have invisible instance children.\n   * {@link ChildrenMixin.findAllWithCriteria} can be up to hundreds of times faster in large documents.\n   */\n  skipInvisibleInstanceChildren: boolean\n  /**\n   * Note: This API is only available in FigJam\n   *\n   * This property contains methods used to read, set, and modify the built in FigJam timer.\n   *\n   * Read more in the [timer section](https://www.figma.com/plugin-docs/api/figma-timer).\n   */\n  readonly timer?: TimerAPI\n  /**\n   * This property contains methods used to read and set the viewport, the user-visible area of the current page.\n   *\n   * Read more in the [viewport section](https://www.figma.com/plugin-docs/api/figma-viewport).\n   */\n  readonly viewport: ViewportAPI\n  /**\n   * Note: `currentuser` must be specified in the permissions array in `manifest.json` to access this property.\n   *\n   * This property contains details about the current user.\n   */\n  readonly currentUser: User | null\n  /**\n   * Note: This API is only available in FigJam.\n   *\n   * `activeusers` must be specified in the permissions array in `manifest.json` to access this property.\n   *\n   * This property contains details about the active users in the file. `figma.activeUsers[0]` will match `figma.currentUser` for the `id`, `name`, `photoUrl`, `color`, and `sessionId` properties.\n   */\n  readonly activeUsers: ActiveUser[]\n  /**\n   * Note: `textreview` must be specified in the capabilities array in `manifest.json` to access this property.\n   *\n   * This property contains methods that enable text review features in your plugin.\n   */\n  readonly textreview?: TextReviewAPI\n  /**\n   * This property contains methods used to integrate with the Dev Mode codegen functionality.\n   *\n   * Read more in the [codegen section](https://www.figma.com/plugin-docs/api/figma-codegen).\n   */\n  readonly codegen: CodegenAPI\n  /**\n   * This property contains methods used to integrate with the Figma for VS Code extension. If `undefined`, the plugin is not running in VS Code.\n   *\n   * Read more in [Dev Mode plugins in Visual Studio Code](https://www.figma.com/plugin-docs/working-in-dev-mode/#dev-mode-plugins-in-visual-studio-code)\n   */\n  readonly vscode?: VSCodeAPI\n  /**\n   * Caution: This is a private API only available to [Figma partners](https://www.figma.com/partners/)\n   */\n  readonly devResources?: DevResourcesAPI\n  /**\n   * Note: `payments` must be specified in the permissions array in `manifest.json` to access this property.\n   *\n   * This property contains methods for plugins that require payment.\n   */\n  readonly payments?: PaymentsAPI\n  /**\n   * Closes the plugin. You should always call this function once your plugin is done running. When called, any UI that's open will be closed and any `setTimeout` or `setInterval` timers will be cancelled.\n   *\n   * @param message - Optional -- display a visual bell toast with the message after the plugin closes.\n   *\n   * @remarks\n   *\n   * Calling `figma.closePlugin()` disables callbacks and Figma APIs. It does not, however, abort the plugin. Any lines of Javascript after this call will also run. For example, consider the following plugin that expects the user to have one layer selected:\n   *\n   * ```ts title=\"Simple closePlugin\"\n   * if (figma.currentPage.selection.length !== 1) {\n   *   figma.closePlugin()\n   * }\n   * figma.currentPage.selection[0].opacity = 0.5\n   * ```\n   *\n   * This will not work. The last line will still run, but will throw an exception because access to `figma.currentPage` has been disabled. As such, it is not recommended to run any code after calling `figma.closePlugin()`.\n   *\n   * A simple way to easily exit your plugin is to wrap your plugin in a function, instead of running code at the top-level, and always follow `figma.closePlugin()` with a `return` statement:\n   *\n   * ```ts title=\"Early return\"\n   * function main() {\n   *   if (figma.currentPage.selection.length !== 1) {\n   *     figma.closePlugin()\n   *     return\n   *   }\n   *   figma.currentPage.selection[0].opacity = 0.5\n   * }\n   * main()\n   * ```\n   *\n   * It's good practice to have all input validation done at the start of the plugin. However, there may be cases where the plugin may need to close after a chain of multiple function calls. If you expect to have to close the plugin deep within your code, but don't want to necessarily want the user to see an error, the example above will not be sufficient.\n   *\n   * One alternative is to use a top-level try-catch statement. However, you will need to be responsible for making sure that there are no usages of try-catch between the top-level try-catch and the call to `figma.closePlugin()`, or to pass along the close command if necessary. Example:\n   *\n   * ```ts title=\"Top-level try-catch\"\n   * const CLOSE_PLUGIN_MSG = \"_CLOSE_PLUGIN_\"\n   * function someNestedFunctionCallThatClosesThePlugin() {\n   *   throw CLOSE_PLUGIN_MSG\n   * }\n   *\n   * function main() {\n   *   someNestedFunctionCallThatClosesThePlugin()\n   * }\n   *\n   * try {\n   *   main()\n   * } catch (e) {\n   *   if (e === CLOSE_PLUGIN_MSG) {\n   *     figma.closePlugin()\n   *   } else {\n   *     // >> DO NOT LEAVE THIS OUT <<\n   *     // If we caught any other kind of exception,\n   *     // it's a real error and should be passed along.\n   *     throw e\n   *   }\n   * }\n   * ```\n   */\n  closePlugin(message?: string): void\n  /**\n   * Shows a notification on the bottom of the screen.\n   *\n   * @param message - The message to show. It is limited to 100 characters. Longer messages will be truncated.\n   * @param options - An optional argument with the following optional parameters:\n   *\n   * ```ts\n   * interface NotificationOptions {\n   *   timeout?: number;\n   *   error?: boolean;\n   *   onDequeue?: (reason: NotifyDequeueReason) => void\n   *   button?: {\n   *     text: string\n   *     action: () => boolean | void\n   *   }\n   * }\n   * ```\n   *\n   * - `timeout`: How long the notification stays up in milliseconds before closing. Defaults to 3 seconds when not specified. Set the timeout to `Infinity` to make the notification show indefinitely until the plugin is closed.\n   * - `error`: If true, display the notification as an error message, with a different color.\n   * - `onDequeue`: A function that will run when the notification is dequeued. This can happen due to the timeout being reached, the notification being dismissed by the user or Figma, or the user clicking the notification's `button`.\n   *   - The function is passed a `NotifyDequeueReason`, which is defined as the following:\n   * ```ts\n   *  type NotifyDequeueReason = 'timeout' | 'dismiss' | 'action_button_click'\n   *  ```\n   * - `button`: An object representing an action button that will be added to the notification.\n   *    - `text`: The message to display on the action button.\n   *    - `action`: The function to execute when the user clicks the button. If this function returns `false`, the message will remain when the button is clicked. Otherwise, clicking the action button dismisses the notify message.\n   *\n   * @remarks\n   *\n   * The `notify` API is a convenient way to show a message to the user. These messages can be queued.\n   *\n   * If the message includes a custom action button, it will be closed automatically when the plugin closes.\n   *\n   * Calling `figma.notify` returns a `NotificationHandler` object. This object contains a single `handler.cancel()` method that can be used to remove the notification before it times out by itself. This is useful if the notification becomes no longer relevant.\n   *\n   * ```ts\n   * interface NotificationHandler {\n   *   cancel: () => void\n   * }\n   * ```\n   *\n   * An alternative way to show a message to the user is to pass a message to the {@link PluginAPI.closePlugin} function.\n   */\n  notify(message: string, options?: NotificationOptions): NotificationHandler\n  /**\n   * Commits actions to undo history. This does not trigger an undo.\n   *\n   * @remarks\n   *\n   * By default, plugin actions are not committed to undo history. Call `figma.commitUndo()` so that triggered\n   * undos can revert a subset of plugin actions.\n   *\n   * For example, after running the following plugin code, the first triggered undo will undo both the rectangle and the ellipse:\n   * ```ts\n   * figma.createRectangle();\n   * figma.createEllipse();\n   * figma.closePlugin();\n   * ```\n   * Whereas if we call `commitUndo()` in our plugin, the first triggered undo will only undo the ellipse:\n   * ```ts\n   * figma.createRectangle();\n   * figma.commitUndo();\n   * figma.createEllipse();\n   * figma.closePlugin();\n   * ```\n   */\n  commitUndo(): void\n  /**\n   * Triggers an undo action. Reverts to the last `commitUndo()` state.\n   */\n  triggerUndo(): void\n  /**\n   * Saves a new version of the file and adds it to the version history of the file. Returns the new version id.\n   * @param title - The title of the version. This must be a non-empty string.\n   * @param description - An optional argument to describe the version.\n   *\n   * Calling `saveVersionHistoryAsync` returns a promise that resolves to `null` or an instance of `VersionHistoryResult`:\n   *\n   * ```ts\n   * interface VersionHistoryResult {\n   *   id: string\n   * }\n   * ```\n   *\n   * - `id`: The version id of this newly saved version.\n   *\n   * @remarks\n   *\n   * It is not guaranteed that all changes made before this method is used will be saved to version history.\n   * For example,\n   *  ```ts title=\"Changes may not all be saved\"\n   *  async function example() {\n   *    await figma.createRectangle();\n   *    await figma.saveVersionHistoryAsync('v1');\n   *    figma.closePlugin();\n   *  }\n   *  example().catch((e) => figma.closePluginWithFailure(e))\n   *  ```\n   * The newly created rectangle may not be included in the v1 version. As a work around, you can wait before calling `saveVersionHistoryAsync()`. For example,\n   *  ```ts title=\"Wait to save\"\n   *  async function example() {\n   *    await figma.createRectangle();\n   *    await new Promise(r => setTimeout(r, 1000)); // wait for 1 second\n   *    await figma.saveVersionHistoryAsync('v1');\n   *    figma.closePlugin();\n   *  }\n   * ```\n   * Typically, manual changes that precede the execution of `saveVersionHistoryAsync()` will be included. If you want to use `saveVersionHistoryAsync()` before the plugin makes\n   * additional changes, make sure to use the method with an async/await or a Promise.\n   */\n  saveVersionHistoryAsync(title: string, description?: string): Promise<VersionHistoryResult>\n  /**\n   * Open a url in a new tab.\n   *\n   * @remarks\n   *\n   * In the VS Code Extension, this API is required to open a url in the browser. Read more in [Dev Mode plugins in Visual Studio Code](https://www.figma.com/plugin-docs/working-in-dev-mode/#dev-mode-plugins-in-visual-studio-code).\n   */\n  openExternal(url: string): void\n  /**\n   * Enables you to render UI to interact with the user, or simply to access browser APIs. This function creates a modal dialog with an `<iframe>` containing the HTML markup in the `html` argument.\n   *\n   * @param html - The HTML to insert into the iframe. You can pass in the HTML code as a string here, but this will often be the global value [`__html__`](https://www.figma.com/plugin-docs/api/global-objects#html).\n   * @param options - An object that may contain the following optional parameters:\n   * - `visible`: Whether the UI starts out displayed to the user. Defaults to `true`. You can use `figma.ui.show()` and `figma.ui.hide()` to change the visibility later.\n   * - `width`: The width of the UI. Defaults to 300. Minimum is 70. Can be changed later using `figma.ui.resize(width, height)`\n   * - `height`: The height of the UI. Defaults to 200. Minimum is 0. Can be changed later using `figma.ui.resize(width, height)`\n   * - `title`: The title of the UI window. Defaults to the plugin name.\n   * - `position`: The position of the UI window. Defaults to the last position of the iframe or the center of the viewport. If specified, expects an X/Y coordinate in the canvas space (i.e matches x/y values returned by `<PluginNode>.x` and `<PluginNode>.y`)\n   * - `themeColors`: Defaults to `false`. When enabled, CSS variables will be added to the plugin iframe to allow [support for light and dark themes](https://www.figma.com/plugin-docs/css-variables).\n   *\n   * Note: If the position specified is outside of the user's viewport, the iframe will be moved so that it remains in the user's viewport.\n   *\n   * @remarks\n   *\n   * The easiest way to use this API is to load the HTML file defined in the manifest. This enables writing a separate HTML file which can be accessed through the [`__html__`](https://www.figma.com/plugin-docs/api/global-objects#html) global variable.\n   *\n   * If the `<iframe>` UI is already showing when this function is called, the previous UI will be closed before the new one is displayed.\n   *\n   * ## Usage Examples\n   *\n   * ```js title=\"Example usage\"\n   * figma.showUI(\n   *   \"<b>Hello from Figma</b>\",\n   *   { width: 400, height: 200, title: \"My title\" }\n   * )\n   *\n   * figma.showUI(\n   *   \"<b>Hello from Figma</b>\",\n   *   { width: 400, height: 200, title: \"My title\", position: { x: 100, y: 100 } }\n   * )\n   *\n   * figma.showUI(__html__)\n   * ```\n   */\n  showUI(html: string, options?: ShowUIOptions): void\n  /**\n   * This property contains methods used to modify and communicate with the UI created via `figma.showUI(...)`.\n   *\n   * Read more in the [UI section](https://www.figma.com/plugin-docs/api/figma-ui).\n   */\n  readonly ui: UIAPI\n  /**\n   * This property contains convenience functions for common operations.\n   *\n   * Read more in the [util section](https://www.figma.com/plugin-docs/api/figma-util).\n   */\n  readonly util: UtilAPI\n  /**\n   * This property contains constants that can be accessed by the plugin API.\n   *\n   * Read more in the [constants section](https://www.figma.com/plugin-docs/api/figma-constants).\n   */\n  readonly constants: ConstantsAPI\n  /**\n   * This property contains methods to store persistent data on the user's local machine.\n   *\n   * Read more in the [client storage section](https://www.figma.com/plugin-docs/api/figma-clientStorage).\n   */\n  readonly clientStorage: ClientStorageAPI\n  /**\n   * This property contains methods to handle user inputs when a plugin is launched in query mode. See [Accepting Parameters as Input](https://www.figma.com/plugin-docs/plugin-parameters) for more details.\n   */\n  readonly parameters: ParametersAPI\n  /**\n   * Finds a node by its id in the current document. Every node has an `id` property, which is unique within the document. If the id is invalid, or the node cannot be found (e.g. removed), returns a promise containing null.\n   */\n  getNodeByIdAsync(id: string): Promise<BaseNode | null>\n  /**\n   * @deprecated Use {@link PluginAPI.getNodeByIdAsync} instead. This function will throw an exception if the plugin manifest contains `\"documentAccess\": \"dynamic-page\"`.\n   *\n   * Finds a node by its id in the current document. Every node has an `id` property, which is unique within the document. If the id is invalid, or the node cannot be found (e.g. removed), returns null.\n   */\n  getNodeById(id: string): BaseNode | null\n  /**\n   * Finds a style by its id in the current document. If not found, returns a promise containing null.\n   */\n  getStyleByIdAsync(id: string): Promise<BaseStyle | null>\n  /**\n   * @deprecated Use {@link PluginAPI.getStyleByIdAsync} instead. This function will throw an exception if the plugin manifest contains `\"documentAccess\": \"dynamic-page\"`.\n   *\n   * Finds a style by its id in the current document. If not found, returns null.\n   */\n  getStyleById(id: string): BaseStyle | null\n  /**\n   * This property contains methods to work with Variables and Variable Collections within Figma.\n   *\n   * */\n  readonly variables: VariablesAPI\n  /** This property contains methods to work with assets residing in a team library. */\n  readonly teamLibrary: TeamLibraryAPI\n  /**\n   * This property contains methods to work with annotations.\n   *\n   */\n  readonly annotations: AnnotationsAPI\n  /**\n   * The root of the entire Figma document. This node is used to access other pages. Each child is a {@link PageNode}.\n   */\n  readonly root: DocumentNode\n  /**\n   * The page that the user currently viewing. You can set this value to a {@link PageNode} to switch pages.\n   *\n   * * If the manifest contains`\"documentAccess\": \"dynamic-page\"`, this property is read-only. Use {@link PluginAPI.setCurrentPageAsync} to update the value.\n   */\n  currentPage: PageNode\n  /**\n   * Switch the active page to the specified {@link PageNode}.\n   */\n  setCurrentPageAsync(page: PageNode): Promise<void>\n  /**\n   * Registers an callback that will be called when an event happens in the editor. Current supported events are:\n   * - The selection on the current page changed.\n   * - The current page changed.\n   * - The document has changed.\n   * - An object from outside Figma is dropped onto the canvas\n   * - The plugin has started running.\n   * - The plugin closed.\n   * - The plugin has started running.\n   * - The timer has started running.\n   * - The timer has paused.\n   * - The timer has stopped.\n   * - The timer is done.\n   * - The timer has resumed.\n   *\n   *\n   * @param type - A string identifying the type of event that the callback will be called on.\n   *\n   * This is either an `ArgFreeEventType`, `run`, `drop`, or `documentchange`. The `run` event callback will be passed a `RunEvent`. The `drop` event callback will be passed a `DropEvent`. The `documentchange` event callback will be passed a `DocumentChangeEvent`.\n   *\n   * ```ts\n   * type ArgFreeEventType =\n   *   \"selectionchange\" |\n   *   \"currentpagechange\" |\n   *   \"close\" |\n   *   \"timerstart\" |\n   *   \"timerstop\" |\n   *   \"timerpause\" |\n   *   \"timerresume\" |\n   *   \"timeradjust\" |\n   *   \"timerdone\"\n   * ```\n   *\n   * @param callback - A function that will be called when the event happens.\n   * If `type` is 'run', then this function will be passed a `RunEvent`.\n   * If `type` is 'drop', then this function will be passed a `DropEvent`.\n   * If `type` is 'documentchange', then this function will be passed a `DocumentChangeEvent`.\n   *\n   * Otherwise nothing will be passed in.\n   *\n   * @remarks\n   *\n   * This API tries to match Node.js conventions around similar `.on` APIs.\n   *\n   * It's \n   *       break;\n   *\n   *     case \"DELETE\":\n   *       console.log(\n   *         `Node ${change.id} deleted by a ${change.origin.toLowerCase()} user`\n   *       );\n   *       break;\n   *\n   *     case \"PROPERTY_CHANGE\":\n   *       for (const prop of change.properties) {\n   *         console.log(\n   *           `Node ${\n   *             change.id\n   *           } had ${prop} changed by a ${change.origin.toLowerCase()} user`\n   *         );\n   *       }\n   *       break;\n   *\n   *     case \"STYLE_CREATE\":\n   *       console.log(\n   *         `Style ${change.id} created by a ${change.origin.toLowerCase()} user`\n   *       );\n   *       break;\n   *\n   *     case \"STYLE_DELETE\":\n   *       console.log(\n   *         `Style ${change.id} deleted by a ${change.origin.toLowerCase()} user`\n   *       );\n   *       break;\n   *\n   *      case \"STYLE_PROPERTY_CHANGE\":\n   *        for (const prop of change.properties) {\n   *          console.log(\n   *             `Style ${\n   *               change.id\n   *             } had ${prop} changed by a ${change.origin.toLowerCase()} user`\n   *           );\n   *        }\n   *        break;\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * For a more involved example see our [plugin samples on GitHub](https://github.com/figma/plugin-samples/tree/master/document-change).\n   *\n   * ### `\"textreview\"`\n   *\n   * Note: This event is only available to plugins that have the `\"textreview\"` capability in their `manifest.json` and the plugin is running in text review mode.\n   *\n   * `\"textreview\"` events allow plugins to review text in a document and act as either a replacement or a supplement to native spell check.\n   *\n   * This event is triggered periodically when the user is typing in a text node. The callback will be passed with a TextReviewEvent with the below interface:\n   * ```ts\n   * interface TextReviewEvent {\n   *   text: string\n   * }\n   * ```\n   *\n   * The `text` property is the text that the user has currently typed into the node.\n   *\n   * A `\"textreview\"` event listener should return a promise that resolves to an array of `TextReviewRange` objects. Each `TextReviewRange` object represents a single range of text that should be marked as either an error or a suggestion. The `TextReviewRange` interface is defined as:\n   * ```ts\n   * type TextReviewRange = {\n   *   start: number\n   *   end: number\n   *   suggestions: string[]\n   *   color?: 'RED' | 'GREEN' | 'BLUE'\n   * }\n   * ```\n   *\n   * The `start` property is the index of the first character in the range. The `end` property is the index of the last character in the range. The `suggestions` property is an array of strings that represent the suggestions for the range. The `color` property is optional and can be used to change the color of the underline that is drawn under the range. If no color is specified the underline will be red.\n   *\n   * For more information read our in depth guide on [text review plugins](https://www.figma.com/plugin-docs/textreview-plugins).\n   *\n   * ### `\"drop\"`\n   *\n   * This event will trigger when objects outside Figma (such as elements from other browser windows, or files from the local filesystem) are dropped onto the canvas.\n   *\n   * It can also be triggered by a special `pluginDrop` message sent from the UI. See the [Triggering drop events from the UI](https://www.figma.com/plugin-docs/creating-ui#triggering-drop-events-from-the-ui) section for more details.\n   *\n   * The callback will be passed a `DropEvent` with the below interface. It should return `false` if it wants to handle the particular drop and stop Figma from performing the default drop behavior.\n   * ```ts\n   * interface DropEvent {\n   *   node: BaseNode | SceneNode\n   *   x: number\n   *   y: number\n   *   absoluteX: number\n   *   absoluteY: number\n   *   items: DropItem[]\n   *   files: DropFile[]\n   *   dropMetadata?: any\n   * }\n   * ```\n   *\n   * - The `node` property contains the node where the drop landed. This will sometimes be the page node if the drop didn't land on anything in the canvas, or if target node is locked or cannot be a parent of another node.\n   * - The `x` and `y` properties are coordinates relative to the node drop target\n   * - The `absoluteX` and `absoluteY` properties are absolute canvas coordinates\n   * - The `items` property is an array of `DropItem` objects. You will see multiple objects if a drop contains multiple, non-file data types. If there are no data items, this array will be empty.\n   * - The `files` property is an array of dropped files represented as `DropFile` objects. If no files are present, this array will be empty.\n   * - The `dropMetadata` property comes from drop events [explicitly triggered by the UI](https://www.figma.com/plugin-docs/creating-ui#triggering-drop-events-from-the-ui).\n   *\n   * Items and files will conform to the below interfaces:\n   *\n   * ```ts\n   * interface DropItem {\n   *   type: string // e.g. \"text/html\", \"text/uri-list\", etc...\n   *   data: string\n   * }\n   *\n   * interface DropFile {\n   *   name: string // file name\n   *   type: string // e.g. \"image/png\"\n   *   getBytesAsync(): Promise<Uint8Array> // get raw file bytes\n   *   getTextAsync(): Promise<string> // get text assuming file is UTF8-encoded\n   * }\n   * ```\n   *\n   * See the Icon Drag-and-Drop and PNG Crop examples in the [figma/plugin-samples](https://github.com/figma/plugin-samples) repository for plugins that implement this API.\n   *\n   * #### UI Recommendations\n   *\n   * When the plugin registers a drop callback, it should give the user instructions with either text in the plugin UI or [`figma.notify()`](https://www.figma.com/plugin-docs/api/properties/figma-notify) (if the plugin does not show a UI) telling them what to do.\n   *\n   * [`figma.notify()`](https://www.figma.com/plugin-docs/api/properties/figma-notify) can be called with the `timeout` option set to `Infinity` to make the notification show for as long as the plugin is open.\n   *\n   * ### `\"close\"`\n   *\n   * This event will trigger when the plugin is about to close, either from a call to `figma.closePlugin()` or the user closing the plugin via the UI.\n   *\n   * This is a good place to run cleanup actions. For example, some plugins add UI elements in the canvas by creating nodes. These UI elements should be deleted when the plugin is closed. Note that you don't need to call `figma.closePlugin()` again in this function.\n   *\n   * **You should use this API only if strictly necessary, and run as little code as possible in the callback when doing so**. When a user closes a plugin, they expect it to be closed immediately. Having long-running actions in the closing callback prevents the plugin for closing promptly.\n   *\n   * This is also not the place to run any asynchronous actions (e.g. register callbacks, using `await`, etc). The plugin execution environment will be destroyed immediately when all the callbacks have returned, and further callbacks will not be called.\n   *\n   * ### `\"run\"`\n   *\n   * This event is triggered when a plugin is run. For plugins with parameters, this happens after all parameters have been enter by the user in the quick action UI. For all other plugins this happens immediately after launch.\n   *\n   * The callback will be passed a `RunEvent` that looks like:\n   * ```ts\n   * interface RunEvent {\n   *   parameters?: ParameterValues\n   *   command: string\n   * }\n   * ```\n   *\n   * - The `parameters` property is of type [`ParameterValues`](https://www.figma.com/plugin-docs/api/figma-parameters#parametervalues), and contains the value entered for each parameter.\n   * - The `command` argument is the same as [`figma.command`](https://www.figma.com/plugin-docs/api/figma#command), but provided here again for convenience.\n   *\n   * Handling the `run` event is only required for plugins with parameters. For all plugins it can still be a convenient spot to put your top level code, since it is called\n   * on every plugin run.\n   *\n   * ### `\"stylechange\"`\n   *\n   * Triggered when any styles in the document change.\n   *\n   * The callback will receive a StyleChangeEvent with the below interface:\n   *\n   * ```ts\n   * interface StyleChangeEvent {\n   *   styleChanges: StyleChange[]\n   * }\n   * ```\n   *\n   * There are 3 different {@link StyleChange} types. Each of these changes has a `type` property to distinguish them:\n   *\n   * | Change | `type` property | Description |\n   * | --- | --- | --- |\n   * | [`StyleCreateChange`](https://www.figma.com/plugin-docs/api/StyleChange#stylecreatechange) | `'STYLE_CREATE'` | A style has been added to the document. |\n   * | [`StyleDeleteChange`](https://www.figma.com/plugin-docs/api/StyleChange#styledeletechange) | `'STYLE_DELETE'` | A style has been removed from the document. |\n   * | [`StylePropertyChange`](https://www.figma.com/plugin-docs/api/StyleChange#stylepropertychange) | `'STYLE_PROPERTY_CHANGE'` | A style has had a property changed. |\n   *\n   * ### `\"timerstart\"`\n   *\n   * This event will trigger when somebody starts a timer in the document. This can happen either by a user (either the current user or a multiplayer user) starting the timer from the UI, or triggered by plugin code. To inspect the current state of the timer when this event fires, use the `figma.timer` interface. For example:\n   * ```ts\n   * figma.on(\"timerstart\", () => console.log(figma.timer.remaining))\n   * figma.timer.start(300)\n   *\n   * // Output:\n   * // 300\n   * ```\n   *\n   * ### `\"timerpause\"`\n   *\n   * Triggered when a timer that is running is paused.\n   *\n   * ### `\"timerstop\"`\n   *\n   * Triggered when the timer is stopped.\n   *\n   * ### `\"timerdone\"`\n   *\n   * Triggered when the timer is running and reaches 0 time remaining.\n   *\n   * ### `\"timerresume\"`\n   *\n   * Triggered when a timer that is paused is resumed.\n   *\n   * ### `\"timeradjust\"`\n   *\n   * Triggered when the total time on the timer changes. From the UI, it is only possible to add time to the timer. However, plugin code can both add and remove time from a running timer.\n   */\n  on(type: ArgFreeEventType, callback: () => void): void\n  on(type: 'run', callback: (event: RunEvent) => void): void\n  on(type: 'drop', callback: (event: DropEvent) => boolean): void\n  on(type: 'documentchange', callback: (event: DocumentChangeEvent) => void): void\n  on(type: 'slidesviewchange', callback: (event: SlidesViewChangeEvent) => void): void\n  on(\n    type: 'textreview',\n    callback: (event: TextReviewEvent) => Promise<TextReviewRange[]> | TextReviewRange[],\n  ): void\n  on(type: 'stylechange', callback: (event: StyleChangeEvent) => void): void\n  /**\n   * Same as `figma.on`, but the callback will only be called once, the first time the specified event happens.\n   */\n  once(type: ArgFreeEventType, callback: () => void): void\n  once(type: 'run', callback: (event: RunEvent) => void): void\n  once(type: 'drop', callback: (event: DropEvent) => boolean): void\n  once(type: 'documentchange', callback: (event: DocumentChangeEvent) => void): void\n  once(type: 'slidesviewchange', callback: (event: SlidesViewChangeEvent) => void): void\n  once(\n    type: 'textreview',\n    callback: (event: TextReviewEvent) => Promise<TextReviewRange[]> | TextReviewRange[],\n  ): void\n  once(type: 'stylechange', callback: (event: StyleChangeEvent) => void): void\n  /**\n   * Removes a callback added with `figma.on` or `figma.once`.\n   *\n   * @remarks\n   *\n   * The callback needs to be the same object that was originally added. For example, you can do this:\n   *\n   * ```ts title=\"Correct way to remove a callback\"\n   * let fn = () => { console.log(\"selectionchanged\") }\n   * figma.on(\"selectionchange\", fn)\n   * figma.off(\"selectionchange\", fn)\n   * ```\n   *\n   * whereas the following won't work, because the function objects are different:\n   *\n   * ```ts title=\"Incorrect way to remove a callback\"\n   * figma.on(\"selectionchange\", () => { console.log(\"selectionchanged\") })\n   * figma.off(\"selectionchange\", () => { console.log(\"selectionchanged\") })\n   * ```\n   */\n  off(type: ArgFreeEventType, callback: () => void): void\n  off(type: 'run', callback: (event: RunEvent) => void): void\n  off(type: 'drop', callback: (event: DropEvent) => boolean): void\n  off(type: 'documentchange', callback: (event: DocumentChangeEvent) => void): void\n  off(type: 'slidesviewchange', callback: (event: SlidesViewChangeEvent) => void): void\n  off(\n    type: 'textreview',\n    callback: (event: TextReviewEvent) => Promise<TextReviewRange[]> | TextReviewRange[],\n  ): void\n  off(type: 'stylechange', callback: (event: StyleChangeEvent) => void): void\n  /**\n   * This a constant value that some node properties return when they are a mix of multiple values. An example might be font size: a single text node can use multiple different font sizes for different character ranges. For those properties, you should always compare against `figma.mixed`.\n   *\n   * @remarks\n   *\n   * Example:\n   *\n   * ```ts title=\"Check if property is a mix of multiple values\"\n   * if (node.type === 'RECTANGLE') {\n   *   if (node.cornerRadius !== figma.mixed) {\n   *     console.log(`Single corner radius: ${node.cornerRadius}`)\n   *   } else {\n   *     console.log(`Mixed corner radius: ${node.topLeftRadius}, ${node.topRightRadius}, ${node.bottomLeftRadius}, ${node.bottomRightRadius}`)\n   *   }\n   * }\n   * ```\n   *\n   * Note: Your plugin never needs to know what the actual value of `figma.mixed` is, only that it is a unique, constant value that can be compared against. That being said, this value returns an object of type `symbol` which is a more advanced feature of Javascript. [Read more about symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol). It works in TypeScript via the `unique symbol` [subtype](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol).\n   */\n  readonly mixed: unique symbol\n  /**\n   * Creates a new rectangle. The behavior is similar to using the `R` shortcut followed by a click.\n   *\n   * @remarks\n   *\n   * By default, the new node has a default fill, width and height both at 100, and is parented under `figma.currentPage`.\n   *\n   * ```ts title=\"Create a rectangle and set basic styles\"\n   * const rect = figma.createRectangle()\n   *\n   * // Move to (50, 50)\n   * rect.x = 50\n   * rect.y = 50\n   *\n   * // Set size to 200 x 100\n   * rect.resize(200, 100)\n   *\n   * // Set solid red fill\n   * rect.fills = [{ type: 'SOLID', color: { r: 1, g: 0, b: 0 } }]\n   * ```\n   */\n  createRectangle(): RectangleNode\n  /**\n   * Creates a new line.\n   *\n   * @remarks\n   *\n   * By default, the new node is 100 in width, has a black stroke, with weight 1, and is parented under `figma.currentPage`.\n   *\n   * ```ts title=\"Create a line and set basic styles\"\n   * const line = figma.createLine()\n   *\n   * // Move to (50, 50)\n   * line.x = 50\n   * line.y = 50\n   *\n   * // Make line 200px long\n   * line.resize(200, 0)\n   *\n   * // 4px thick red line with arrows at each end\n   * line.strokeWeight = 4\n   * line.strokes = [{ type: 'SOLID', color: { r: 1, g: 0, b: 0 } }]\n   * line.strokeCap = 'ARROW_LINES'\n   * ```\n   */\n  createLine(): LineNode\n  /**\n   * Creates a new ellipse. The behavior is similar to using the `O` shortcut followed by a click.\n   *\n   * @remarks\n   *\n   * By default, the new node has a default fill, width and height both at 100, and is parented under `figma.currentPage`.\n   *\n   * ```ts title=\"Create a red, U-shaped half donut\"\n   * const ellipse = figma.createEllipse()\n   *\n   * // Move to (50, 50)\n   * ellipse.x = 50\n   * ellipse.y = 50\n   *\n   * // Set size to 200 x 100\n   * ellipse.resize(200, 100)\n   *\n   * // Set solid red fill\n   * ellipse.fills = [{ type: 'SOLID', color: { r: 1, g: 0, b: 0 } }]\n   *\n   * // Arc from 0° to 180° clockwise\n   * ellipse.arcData = {startingAngle: 0, endingAngle: Math.PI, innerRadius: 0.5}\n   * ```\n   */\n  createEllipse(): EllipseNode\n  /**\n   * Creates a new polygon (defaults to a triangle).\n   *\n   * @remarks\n   *\n   * By default, the new node has three edges (i.e. a triangle), a default fill, width and height both at 100, and is parented under `figma.currentPage`.\n   *\n   * ```ts title=\"Create a red octagon\"\n   * const polygon = figma.createPolygon()\n   *\n   * // Move to (50, 50)\n   * polygon.x = 50\n   * polygon.y = 50\n   *\n   * // Set size to 200 x 200\n   * polygon.resize(200, 200)\n   *\n   * // Make the polygon 8-sided\n   * polygon.pointCount = 8\n   *\n   * // Set solid red fill\n   * polygon.fills = [{ type: 'SOLID', color: { r: 1, g: 0, b: 0 } }]\n   * ```\n   */\n  createPolygon(): PolygonNode\n  /**\n   * Creates a new star.\n   *\n   * @remarks\n   *\n   * By default, the new node has five points edges (i.e. a canonical star), a default fill, width and height both at 100, and is parented under `figma.currentPage`.\n   *\n   * ```ts title=\"Create a red, 7-pointed star\"\n   * const star = figma.createStar()\n   *\n   * // Move to (50, 50)\n   * star.x = 50\n   * star.y = 50\n   *\n   * // Set size to 200 x 200\n   * star.resize(200, 200)\n   *\n   * // Make the star 7-pointed\n   * star.pointCount = 7\n   *\n   * // Set solid red fill\n   * star.fills = [{ type: 'SOLID', color: { r: 1, g: 0, b: 0 } }]\n   *\n   * // Make the angles of each point less acute\n   * star.innerRadius = 0.6\n   * ```\n   */\n  createStar(): StarNode\n  /**\n   * Creates a new, empty vector network with no vertices.\n   *\n   * @remarks\n   *\n   * By default, parented under `figma.currentPage`. Without setting additional properties, the vector has a bounding box but doesn’t have any vertices. There are two ways to assign vertices to a vector node - [`vectorPaths`](https://www.figma.com/plugin-docs/api/VectorNode#vectorpaths) and [`setVectorNetworkAsync`](https://www.figma.com/plugin-docs/api/VectorNode#setvectornetworkasync). Please refer to the documentation of those properties for more details.\n   */\n  createVector(): VectorNode\n  /**\n   * Creates a new, empty text node.\n   *\n   * @remarks\n   *\n   * By default, parented under `figma.currentPage`. Without setting additional properties, the text has no characters. You can assign a string, to the [`characters`](https://www.figma.com/plugin-docs/api/properties/TextNode-characters) property of the returned node to provide it with text.\n   *\n   * ```ts title=\"Create a styled 'Hello world!' text node\"\n   * (async () => {\n   *   const text = figma.createText()\n   *\n   *   // Move to (50, 50)\n   *   text.x = 50\n   *   text.y = 50\n   *\n   *   // Load the font in the text node before setting the characters\n   *   await figma.loadFontAsync(text.fontName)\n   *   text.characters = 'Hello world!'\n   *\n   *   // Set bigger font size and red color\n   *   text.fontSize = 18\n   *   text.fills = [{ type: 'SOLID', color: { r: 1, g: 0, b: 0 } }]\n   * })()\n   * ```\n   */\n  createText(): TextNode\n  /**\n   * Creates a new frame. The behavior is similar to using the `F` shortcut followed by a click.\n   *\n   * @remarks\n   *\n   * By default, the new node has a white background, width and height both at 100, and is parented under `figma.currentPage`.\n   *\n   * ```ts title=\"Create a frame\"\n   * const frame = figma.createFrame()\n   *\n   * // Move to (50, 50)\n   * frame.x = 50\n   * frame.y = 50\n   *\n   * // Set size to 1280 x 720\n   * frame.resize(1280, 720)\n   * ```\n   */\n  createFrame(): FrameNode\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Creates a new, empty component.\n   *\n   * @remarks\n   *\n   * By default, the new node has width and height both at 100, and is parented under `figma.currentPage`.\n   *\n   * This function creates a brand new component. To create a component from an existing node, use {@link PluginAPI.createComponentFromNode}.\n   *\n   * ```ts title=\"Create a component\"\n   * const component = figma.createComponent()\n   * ```\n   */\n  createComponent(): ComponentNode\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Creates a component from an existing node, preserving all of its properties and children. The behavior is similar to using the **Create component** button in the toolbar.\n   *\n   * @remarks\n   *\n   * To create a brand new component instead, use {@link PluginAPI.createComponent}.\n   *\n   * There are many restrictions on what nodes can be turned into components. For example, the node cannot be a component or component set and cannot be inside a component, component set, or instance.\n   *\n   * If you try to create a component from a node that cannot be turned into a component, then the function will throw a `Cannot create component from node` error.\n   *\n   * ```ts title=\"Create a component from a node\"\n   * const frame = figma.createFrame()\n   * const component = figma.createComponentFromNode(frame)\n   */\n  createComponentFromNode(node: SceneNode): ComponentNode\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Creates a new page, appended to the document's list of children.\n   *\n   * @remarks\n   *\n   * A page node can be the parent of all types of nodes except for the document node and other page nodes.\n   *\n   * Files in a Starter team are limited to three pages. When a plugin tries to create more than three pages in a Starter team file, it triggers the following error:\n   *\n   * ```text title=\"Page limit error\"\n   * The Starter plan only comes with 3 pages. Upgrade to\n   * Professional for unlimited pages.\n   * ```\n   */\n  createPage(): PageNode\n  /**\n   * Creates a new page divider, appended to the document's list of children. A page divider is a {@link PageNode} with `isPageDivider` true.\n   *\n   * @remarks\n   *\n   * A page divider is always the child of the document node and cannot have any children.\n   *\n   * @param dividerName - An optional argument to specify the name of the page divider node. It won't change how the page divider appears in the UI, but it specifies the name of the underlying node. The dividerName must be a page divider name (all asterisks, all en dashes, all em dashes, or all spaces). If no dividerName is specified, the default name for the created page divider node is \"---\".\n   */\n  createPageDivider(dividerName?: string): PageNode\n  /**\n     * Creates a new slice object.\n     *\n     * @remarks\n     *\n     * By default, the new node is parented under `figma.currentPage`.\n     *\n     * ```ts title=\"Create a slice and export as PNG\"\n     * (async () => {\n     *   const slice = figma.createSlice()\n     *\n     *   // Move to (50, 50)\n     *   slice.x = 50\n     *   slice.y = 50\n     *\n     *   // Set size to 500 x 500\n     *   slice.resize(500, 500)\n     *\n     *   // Export a PNG of this region of the canvas\n     *   const bytes = await slice.exportAsync()\n     *\n     *   // Add the image onto the canvas as an image fill in a frame\n     *   const image = figma.createImage(bytes)\n     *   const frame = figma.createFrame()\n     *   frame.resize(500, 500)\n     *   frame.fills = [{\n     *     imageHash: image.hash,\n     *     scaleMode: \"FILL\",\n     *     scalingFactor: 1,\n     *     type: \"IMAGE\",\n     *   }]\n  })()\n     * ```\n     */\n  createSlice(): SliceNode\n  /**\n   * Note: This API is only available in Figma Slides\n   *\n   * @remarks\n   *\n   * By default, the slide gets appended to the end of the presentation (the last child in the last Slide Row).\n   *\n   * ```ts title=\"Create a slide\"\n   * const slide = figma.createSlide()\n   * ```\n   *\n   * To specify a position in the Slide Grid, pass a row and column index to the function.\n   *\n   * ```ts title=\"Create a slide at index 0, 0\"\n   * const slide = figma.createSlide(0, 0)\n   * ```\n   */\n  createSlide(row?: number, col?: number): SlideNode\n  /**\n   * Note: This API is only available in Figma Slides\n   *\n   * Creates a new Slide Row, which automatically gets appended to the Slide Grid.\n   *\n   * @remarks\n   *\n   * By default, the row gets appended to the end of the Slide Grid.\n   *\n   * ```ts title=\"Create a slide row\"\n   * const slideRow = figma.createSlideRow()\n   * ```\n   *\n   * To specify a position in the Slide Grid, pass a row index to the function.\n   *\n   * ```ts title=\"Create a slide row at index 0\"\n   * const slideRow = figma.createSlideRow(0)\n   * ```\n   */\n  createSlideRow(row?: number): SlideRowNode\n  /**\n   * Note: This API is only available in FigJam\n   *\n   * Creates a new sticky. The behavior is similar to using the `S` shortcut followed by a click.\n   *\n   * @remarks\n   *\n   * By default, the new node has constant width and height both at 240, and is parented under `figma.currentPage`.\n   *\n   * ```ts title=\"Create a sticky with text\"\n   * (async () => {\n   *   const sticky = figma.createSticky()\n   *\n   *   // Load the font before setting characters\n   *   await figma.loadFontAsync(sticky.text.fontName)\n   *   sticky.text.characters = 'Hello world!'\n   * })()\n   * ```\n   */\n  createSticky(): StickyNode\n  /**\n   * Note: This API is only available in FigJam\n   *\n   * Creates a new connector. The behavior is similar to using the `Shift-C` shortcut followed by a click.\n   *\n   * @remarks\n   *\n   * By default, the new node has a width of 200, and is parented under `figma.currentPage`.\n   *\n   * ```ts title=\"Add a connector between two stickies\"\n   * // Create two stickies\n   * const stickyLeft = figma.createSticky()\n   * stickyLeft.x = -200\n   *\n   * const stickyRight = figma.createSticky()\n   * stickyRight.x = 200\n   *\n   * // Connect the two stickies\n   * const connector = figma.createConnector()\n   * connector.connectorStart = {\n   *   endpointNodeId: stickyLeft.id,\n   *   magnet: 'AUTO'\n   * }\n   *\n   * connector.connectorEnd = {\n   *   endpointNodeId: stickyRight.id,\n   *   magnet: 'AUTO'\n   * }\n   * ```\n   */\n  createConnector(): ConnectorNode\n  /**\n   * Note: This API is only available in FigJam\n   *\n   * Creates a new shape with text.\n   *\n   * @remarks\n   *\n   * By default, the new node has a width and height of 208, and is parented under `figma.currentPage`.\n   *\n   * ```ts title=\"Create a rounded rectangle shape with text\"\n   * (async () => {\n   *   const shape = figma.createShapeWithText()\n   *   shape.shapeType = 'ROUNDED_RECTANGLE'\n   *\n   *   // Load the font before setting characters\n   *   await figma.loadFontAsync(shape.text.fontName)\n   *   shape.text.characters = 'Hello world!'\n   * })()\n   * ```\n   */\n  createShapeWithText(): ShapeWithTextNode\n  /**\n   * Note: This API is only available in FigJam\n   *\n   * Creates a new code block.\n   */\n  createCodeBlock(): CodeBlockNode\n  /**\n   *\n   * Creates a new section\n   */\n  createSection(): SectionNode\n  /**\n   * Note: This API is only available in FigJam\n   *\n   * Creates a new table.\n   *\n   * @remarks\n   *\n   * By default, a table has two rows and two columns, and is parented under `figma.currentPage`.\n   *\n   * ```ts title=\"Create a table and add text to cells inside\"\n   * (async () => {\n   *   // Create a table with 2 rows and 3 columns\n   *   const table = figma.createTable(2, 3)\n   *\n   *   // Load the font before setting characters\n   *   await figma.loadFontAsync(table.cellAt(0, 0).text.fontName)\n   *\n   *   // Sets characters for the table cells:\n   *   // A B C\n   *   // 1 2 3\n   *   table.cellAt(0, 0).text.characters = 'A'\n   *   table.cellAt(0, 1).text.characters = 'B'\n   *   table.cellAt(0, 2).text.characters = 'C'\n   *   table.cellAt(1, 0).text.characters = '1'\n   *   table.cellAt(1, 1).text.characters = '2'\n   *   table.cellAt(1, 2).text.characters = '3'\n   * })()\n   * ```\n   */\n  createTable(numRows?: number, numColumns?: number): TableNode\n  /**\n   * This API creates a new node using the JSX API used by widgets.\n   *\n   * @remarks\n   *\n   * This API is a convenient and ergonomic way to bulk create nodes:\n   *\n   * ```tsx\n   * const {Image, AutoLayout} = figma.widget;\n   *\n   * const node = await figma.createNodeFromJSXAsync(\n   *  <AutoLayout fill=\"#F00\" padding={20}>\n   *    <Image src=\"https://picsum.photos/200\" width={200} height={200}/>\n   *  </AutoLayout>\n   * )\n   * ```\n   *\n   * Note: The JSX API does not support all features that exist on the equivalent SceneNode.\n   * For example we don't support setting style ids or rendering instances via JSX.\n   * You can always use `createNodeFromJSXAsync` to create a node and then set the properties you need on the created nodes.\n   *\n   * Note that to use this API you must configure your build system to compile tsx.\n   *\n   * There are 3 steps that you need to do to use this API in your plugin.\n   *\n   * 1. Install the `@figma/widget-typings` package.\n   * 2. Add the appropriate compiler options to your `tsconfig.json` file\n   * 3. Make sure that the file name for you code ends with the `.tsx` extension\n   *\n   * Note: If you are building a widget these should already be done for you.\n   *\n   * ### Install the widget typings\n   *\n   * In the directory of your plugin run the following command to install the widget typings:\n   *\n   * ```bash\n   * npm i --save-dev @figma/widget-typings\n   * ```\n   *\n   * ### Add compiler options to your `tsconfig.json` file\n   *\n   * You need to make sure that you add the following properties to your `tsconfig.json` file.\n   * This configures typescript to transpile any jsx that you use into a way that our plugin runtime understands.\n   *\n   * ```json\n   * \"jsx\": \"react\",\n   * \"jsxFactory\": \"figma.widget.h\",\n   * \"jsxFragmentFactory\": \"figma.widget.Fragment\",\n   * ```\n   *\n   * Here is an example completed `tsconfig.json` file with the appropriate properties\n   * added.\n   *\n   * ```json\n   * {\n   *   \"compilerOptions\": {\n   *     \"jsx\": \"react\",\n   *     \"jsxFactory\": \"figma.widget.h\",\n   *     \"jsxFragmentFactory\": \"figma.widget.Fragment\",\n   *     \"target\": \"es6\",\n   *     \"lib\": [\n   *       \"es6\"\n   *     ],\n   *     \"strict\": true,\n   *     \"typeRoots\": [\n   *       \"./node_modules/@types\",\n   *       \"./node_modules/@figma\"\n   *     ]\n   *   }\n   * }\n   *\n   * ```\n   * Note: If you are using a build system (ex babel, vite, esbuild). You might have to configure the jsx options for your build system.\n   *\n   * ### Change file extension\n   *\n   * For plugins our default template puts your code in a `code.ts` file. You should rename this to `code.tsx` so that you can use jsx in your plugin.\n   */\n  createNodeFromJSXAsync(jsx: any): Promise<SceneNode>\n  /**\n   * @remarks\n   *\n   * Using this function is not recommended because empty boolean operation nodes can have surprising, unpredictable behavior. It will eventually be remove. Use one of the functions listed above instead.\n   *\n   * Creates a new, empty boolean operation node. The particular kind of operation is set via `.booleanOperation`. By default, the value is `\"UNION\"`.\n   *\n   * This snippet, for example, creates a boolean operation node that is a union of a rectangle and an ellipse.\n   *\n   * ```ts title=\"Create a boolean operation node\"\n   * const node = figma.createBooleanOperation()\n   * node.appendChild(figma.createRectangle())\n   * node.appendChild(figma.createEllipse())\n   * ```\n   *\n   * @deprecated Use {@link PluginAPI.union}, {@link PluginAPI.subtract}, {@link PluginAPI.intersect}, {@link PluginAPI.exclude} instead.\n   */\n  createBooleanOperation(): BooleanOperationNode\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Creates a new Paint style. This might be referred to as a Color style, or Fill style more colloquially. However, since this type of style may contain images, and may be used for backgrounds, strokes, and fills, it is called a Paint.\n   */\n  createPaintStyle(): PaintStyle\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Creates a new Text style. By default, the text style has the Figma default text properties (font family Inter Regular, font size 12).\n   */\n  createTextStyle(): TextStyle\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Creates a new Effect style.\n   */\n  createEffectStyle(): EffectStyle\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Creates a new Grid style.\n   */\n  createGridStyle(): GridStyle\n  /**\n   * Returns the list of local paint styles.\n   */\n  getLocalPaintStylesAsync(): Promise<PaintStyle[]>\n  /**\n   * @deprecated Use {@link PluginAPI.getLocalPaintStylesAsync} instead. This function will throw an exception if the plugin manifest contains `\"documentAccess\": \"dynamic-page\"`.\n   *\n   * Returns the list of local paint styles.\n   */\n  getLocalPaintStyles(): PaintStyle[]\n  /**\n   * Returns the list of local text styles.\n   */\n  getLocalTextStylesAsync(): Promise<TextStyle[]>\n  /**\n   * @deprecated Use {@link PluginAPI.getLocalTextStylesAsync} instead. This function will throw an exception if the plugin manifest contains `\"documentAccess\": \"dynamic-page\"`.\n   *\n   * Returns the list of local text styles.\n   */\n  getLocalTextStyles(): TextStyle[]\n  /**\n   * Returns the list of local effect styles.\n   */\n  getLocalEffectStylesAsync(): Promise<EffectStyle[]>\n  /**\n   * @deprecated Use {@link PluginAPI.getLocalEffectStylesAsync} instead. This function will throw an exception if the plugin manifest contains `\"documentAccess\": \"dynamic-page\"`.\n   *\n   * Returns the list of local effect styles.\n   */\n  getLocalEffectStyles(): EffectStyle[]\n  /**\n   * Returns the list of local grid styles.\n   */\n  getLocalGridStylesAsync(): Promise<GridStyle[]>\n  /**\n   * Returns the list of local grid styles.\n   *\n   * @deprecated Use {@link PluginAPI.getLocalGridStylesAsync} instead. This function will throw an exception if the plugin manifest contains `\"documentAccess\": \"dynamic-page\"`.\n   */\n  getLocalGridStyles(): GridStyle[]\n  /**\n   * Returns all of the colors in a user’s current selection. This\n   * returns the same values that are shown in Figma's native selection\n   * colors feature. This can be useful for getting a list of colors and\n   * styles in the current selection and converting them into a different\n   * code format (like CSS variables for a user’s codebase).\n   *\n   * If there are colors in a selection it will return an object with a\n   * `paints` property, which is an array of `Paint[]`, and a `styles`\n   * property, which is an array of `PaintStyle[]`.\n   *\n   * Note: `getSelectionColors()` returns `null` if there is no selection, or\n   * if there are too many colors in the selection (>1000).\n   */\n  getSelectionColors(): null | {\n    paints: Paint[]\n    styles: PaintStyle[]\n  }\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Reorders a target node after the specified reference node (if provided) or to be first if reference is null. The target and reference nodes must live in the same folder. The target and reference nodes must be local paint styles.\n   */\n  moveLocalPaintStyleAfter(targetNode: PaintStyle, reference: PaintStyle | null): void\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Reorders a target node after the specified reference node (if provided) or to be first if reference is null. The target and reference nodes must live in the same folder. The target and reference nodes must be local text styles.\n   */\n  moveLocalTextStyleAfter(targetNode: TextStyle, reference: TextStyle | null): void\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Reorders a target node after the specified reference node (if provided) or to be first if reference is null. The target and reference nodes must live in the same folder. The target and reference nodes must be local effect styles.\n   */\n  moveLocalEffectStyleAfter(targetNode: EffectStyle, reference: EffectStyle | null): void\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Reorders a target node after the specified reference node (if provided) or to be first if reference is null. The target and reference nodes must live in the same folder. The target and reference nodes must be local grid styles.\n   */\n  moveLocalGridStyleAfter(targetNode: GridStyle, reference: GridStyle | null): void\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Reorders a target folder after the specified reference folder (if provided) or to be first in the parent folder if reference is null. The target and reference folders must have the same parent folder. The target and reference folders must contain paint styles. When referring to nested folders, the full delimited folder name must be used. See the {@link BaseStyle } section for more info.\n   */\n  moveLocalPaintFolderAfter(targetFolder: string, reference: string | null): void\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Reorders a target folder after the specified reference folder (if provided) or to be first in the parent folder if reference is null. The target and reference folders must have the same parent folder. The target and reference folders must contain text styles. When referring to nested folders, the full delimited folder name must be used. See the {@link BaseStyle } section for more info.\n   */\n  moveLocalTextFolderAfter(targetFolder: string, reference: string | null): void\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Reorders a target folder after the specified reference folder (if provided) or to be first in the parent folder if reference is null. The target and reference folders must have the same parent folder. The target and reference folders must contain effect styles. When referring to nested folders, the full delimited folder name must be used. See the {@link BaseStyle } section for more info.\n   */\n  moveLocalEffectFolderAfter(targetFolder: string, reference: string | null): void\n  /**\n   * Note: This API is only available in Figma Design\n   *\n   * Reorders a target folder after the specified reference folder (if provided) or to be first in the parent folder if reference is null. The target and reference folders must have the same parent folder. The target and reference folders must contain grid styles. When referring to nested folders, the full delimited folder name must be used. See the {@link BaseStyle } section for more info.\n   */\n  moveLocalGridFolderAfter(targetFolder: string, reference: string | null): void\n  /**\n   * Loads a component node from the team library. Promise is rejected if there is no published component with that key or if the request fails.\n   */\n   passing a collection ID is deprecated.\n   * @param resolvedType - the resolved type of this variable\n   */\n  createVariable(\n    name: string,\n    collection: VariableCollection,\n    resolvedType: VariableResolvedDataType,\n  ): Variable\n  /**\n   * Creates a new variable collection with the given name.\n   * @param name - the name of the newly created variable collection.\n   */\n  createVariableCollection(name: string): VariableCollection\n  /**\n   * Helper function to create a variable alias.\n   *\n   * This should be used with functions such as `node.setProperties()` to\n   * assign component properties to variables.\n   */\n  createVariableAlias(variable: Variable): VariableAlias\n  /**\n   * Helper function to create a variable alias.\n   *\n   * This should be used with functions such as `node.setProperties()` to\n   * assign component properties to variables.\n   */\n  createVariableAliasByIdAsync(variableId: string): Promise<VariableAlias>\n  /**\n   * Helper function to bind a variable to a {@link SolidPaint}.\n   *\n   * If `null` is provided as the `variable`, the given `field` will be unbound from any variables.\n   *\n   * @returns a copy of the paint which is now bound to the provided variable.\n   */\n  setBoundVariableForPaint(\n    paint: SolidPaint,\n    field: VariableBindablePaintField,\n    variable: Variable | null,\n  ): SolidPaint\n  /**\n   * Helper function to bind a variable to an {@link Effect}.\n   *\n   * If `null` is provided as the `variable`, the given `field` will be unbound from any variables.\n   *\n   * @returns a copy of the effect which is now bound to the provided variable.\n   */\n  setBoundVariableForEffect(\n    effect: Effect,\n    field: VariableBindableEffectField,\n    variable: Variable | null,\n  ): Effect\n  /**\n   * Helper function to bind a variable to a {@link LayoutGrid}.\n   *\n   * If `null` is provided as the `variable`, the given `field` will be unbound from any variables.\n   *\n   * @returns a copy of the layout grid which is now bound to the provided variable.\n   */\n  setBoundVariableForLayoutGrid(\n    layoutGrid: LayoutGrid,\n    field: VariableBindableLayoutGridField,\n    variable: Variable | null,\n  ): LayoutGrid\n  /**\n   * Loads a variable from the team library. Promise is rejected if there is\n   * no published variable with that key or if the request fails.\n   *\n   * @param key the key of the variable to \n   *\n   * interface OnMessageProperties {\n   *   origin: string,\n   * }\n   * ```\n   *\n   * @remarks\n   *\n   * The `pluginMessage` argument contains the message passed by the call to `postMessage` on the UI side.\n   *\n   * The `props` argument contains a `origin` property contains the origin of the document that sent the message. It is an advanced feature, mainly used for implementing OAuth.\n   */\n  onmessage: MessageEventHandler | undefined\n  /**\n   * Register a handler for incoming messages from the UI's `<iframe>` window.\n   *\n   * @remarks\n   *\n   * The `pluginMessage` argument contains the message passed by the call to `postMessage` on the UI side.\n   *\n   * The `props` argument contains a `origin` property contains the origin of the document that sent the message. It is an advanced feature, mainly used for implementing OAuth.\n   */\n  on(type: 'message', callback: MessageEventHandler): void\n  /**\n   * Register a handler for incoming messages from the UI's `<iframe>` window. Same as `figma.ui.on(\"message\")`, but only gets called the first time.\n   */\n  once(type: 'message', callback: MessageEventHandler): void\n  /**\n   * Removes a handler added via `figma.ui.on`.\n   */\n  off(type: 'message', callback: MessageEventHandler): void\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/figma-util\n */\ninterface UtilAPI {\n  /**\n   * Creates an `RGB` color object from a variety of common color encodings.\n   *\n   * **Note**: since `RGB` colors are primarily used for creating `SolidPaint` objects, you might want to use {@link UtilAPI.solidPaint} instead.\n   *\n   * Accepted color formats include CSS color strings with hex, `rgb()`, `hsl()`, or `lab()` encodings, as well as `RGB` and `RGBA` objects. Alpha values in the input will be ignored. If a string encoding cannot be parsed, an error will be thrown.\n   *\n   * Examples:\n   *\n   * ```ts\n   * const color1 = figma.util.rgb('#FF00FF')\n   * const color2 = figma.util.rgb('hsl(25% 50% 75%)')\n   * ```\n   *\n   * You can alias this function for more concise code:\n   *\n   * ```ts\n   * const rgb = figma.util.rgb\n   * const color = rgb('#FF00FF')\n   * ```\n   *\n   * @param color - A CSS color string, `RGB` object, or `RGBA` object. The input color's alpha value, if any, will be ignored.\n   */\n  rgb(color: string | RGB | RGBA): RGB\n  /**\n   * Creates an `RGBA` color object from a variety of common color encodings.\n   *\n   * Accepted color formats include CSS color strings with hex, `rgb()`, `hsl()`, or `lab()` encodings, as well as `RGB` and `RGBA` objects. Alpha defaults to 1 (opaque) if not provided in the input. If a string encoding cannot be parsed, an error will be thrown.\n   *\n   * Examples:\n   *\n   * ```ts\n   * const layoutGrid = {\n   *   pattern: 'GRID',\n   *   sectionSize: 1,\n   *   color: figma.util.rgba('rgb(25% 25% 25% / 0.5)')\n   * }\n   * ```\n   *\n   * You can alias this function for more concise code:\n   *\n   * ```ts\n   * const rgba = figma.util.rgba\n   * const color = rgba('rgb(25% 25% 25% / 0.5)')\n   * ```\n   *\n   * @param color - A CSS color string, `RGB` object, or `RGBA` object.\n   */\n  rgba(color: string | RGB | RGBA): RGBA\n  /**\n   * Creates a `SolidPaint` object, assigning color and opacity from a variety of common color encodings.\n   *\n   * Accepted color formats include CSS color strings with hex, `rgb()`, `hsl()`, or `lab()` encodings, as well as `RGB` and `RGBA` objects. The resulting alpha value will be applied to the `SolidPaint`'s `opacity` property, which defaults to 1 (opaque) if not specified. If a string encoding cannot be parsed, an error will be thrown.\n   *\n   * Optionally, you can provide a set of overrides for any of the non-color properties of the `SolidPaint` object. This is useful for modifying the color of an existing `SolidPaint` while preserving its other properties.\n   *\n   * Examples:\n   *\n   * ```ts\n   * // Set the current page background to red\n   * figma.currentPage.backgrounds = [figma.util.solidPaint(\"#FF0000\")]\n   *\n   * // Modify an existing SolidPaint with new color and opacity\n   * if (node.fills[0].type === 'SOLID') {\n   *   const updated = figma.util.solidPaint('#FF00FF88', node.fills[0])\n   * }\n   * ```\n   *\n   * You can alias this function for more concise code:\n   *\n   * ```ts\n   * const solidPaint = figma.util.solidPaint\n   *\n   * // Set the current page background to red\n   * figma.currentPage.backgrounds = [solidPaint(\"#FF0000\")]\n   *\n   * // Modify an existing SolidPaint with new color and opacity\n   * if (node.fills[0].type === 'SOLID') {\n   *   const updated = solidPaint('#FF00FF88', node.fills[0])\n   * }\n   * ```\n   *\n   * @param color - A CSS color string, `RGB` object, or `RGBA` object.\n   * @param overrides - An optional object that allows you to specify additional `SolidPaint` properties, aside from color. This is useful for modifying the color of a pre-existing `SolidPaint` object.\n   */\n  solidPaint(color: string | RGB | RGBA, overrides?: Partial<SolidPaint>): SolidPaint\n  /**\n   *\n   * Normalizes the markdown string to verify what markdown will render with Figma's rich-text editors.\n   *\n   * Examples:\n   *\n   * ```ts\n   * const md = \"# Hello, world!\\n\\nThis is a **bold** text.\"\n   * const normalizedMd = figma.util.normalizeMarkdown(md);\n   *\n   * // Set an component description with descriptionMarkdown\n   * component.descriptionMarkdown = normalizedMd;\n   * ```\n   *\n   * @param markdown - A markdown string to normalize.\n   */\n  normalizeMarkdown(markdown: string): string\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/ColorPalette\n */\ninterface ColorPalette {\n  [key: string]: string\n}\ninterface ColorPalettes {\n  figJamBase: ColorPalette\n  figJamBaseLight: ColorPalette\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/figma-constants\n */\ninterface ConstantsAPI {\n  /**\n   * Holds color palettes, which maps color names to hex codes.\n   *\n   * ```js title=\"Example usage\"\n   * const colorMapBase = figma.constants.colors.figJamBase\n   * const colorMapBaseLight = figma.constants.colors.figJamBaseLight\n   * ```\n   *\n   * @remarks\n   *\n   */\n  colors: ColorPalettes\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/CodegenEvent\n */\ndeclare type CodegenEvent = {\n  node: SceneNode\n  language: string\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/CodegenPreference\n */\ndeclare type CodegenPreferences = {\n  readonly unit: 'PIXEL' | 'SCALED'\n  readonly scaleFactor?: number\n  readonly customSettings: Record<string, string>\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/CodegenPreferencesEvent\n */\ndeclare type CodegenPreferencesEvent = {\n  propertyName: string\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/CodegenResult\n */\ndeclare type CodegenResult = {\n  title: string\n  code: string\n  language:\n    | 'TYPESCRIPT'\n    | 'CPP'\n    | 'RUBY'\n    | 'CSS'\n    | 'JAVASCRIPT'\n    | 'HTML'\n    | 'JSON'\n    | 'GRAPHQL'\n    | 'PYTHON'\n    | 'GO'\n    | 'SQL'\n    | 'SWIFT'\n    | 'KOTLIN'\n    | 'RUST'\n    | 'BASH'\n    | 'PLAINTEXT'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/figma-codegen\n */\ninterface CodegenAPI {\n  /**\n   * A plugin for code generation needs to call `figma.codegen.on('generate')` to register a callback\n   * that will be called when a user's selection changes in Dev Mode. This callback\n   * should return an array of JSON objects that represent the sections in the\n   * Inspect panel. The callback has a 15 second timeout and returns an error if it times out. For more\n   * information, see the remarks.\n   *\n   * @remarks\n   *\n   * This callback can be async if your plugin needs to do some data fetching or other async\n   * operation to generate code.\n   *\n   * Note: `figma.showUI` is not allowed within the generate callback. Instead, if [`figma.showUI`](https://www.figma.com/plugin-docs/api/properties/figma-showui/) is required in the generate callback, the `showUI` call should be moved outside of the callback and [`figma.ui.postMessage`](https://www.figma.com/plugin-docs/api/properties/figma-ui-postmessage) should be used within the callback instead. This ensures that the plugin is able to handle concurrent \"generate\" events.\n   *\n   * A plugin can also register a callback to handle events when codegen preferences are modified.\n   * This is useful for codegenPreferences that need to open an iframe to get more user input.\n   *\n   * Note: Only preferences with `itemType: \"action\"` will trigger the `\"preferenceschange\"`` callback.\n   *\n   * The callback has a 15 second timeout. If the callback registered by `figma.codegen.on('generate')`\n   * doesn't return a value within 15 seconds (for example, if the array of JSON objects takes too long to\n   * construct), the operation ends and an error message is sent to the console:\n   *\n   * ```text title=\"Callback timeout error\"\n   * code generation timed out after 15 seconds\n   * ```\n   *\n   * Additionally, a notification appears in the Code section of the Inspect panel to alert the\n   * plugin's user of the error:\n   *\n   * ```text title=\"Inspect panel timeout error\"\n   * <Plugin name> ran into an issue\n   *\n   * This plugin is created by a third party and not\n   * maintained by Figma, so to give feedback please\n   * reach out to the developer.\n   * ```\n   *\n   * The error in the Inspect panel includes a link to your plugin's community page.\n   *\n   * @param type - The type of event to add the callback for: 'generate' or 'preferenceschange'.\n   * @param callback - The callback that is called when the event is triggered.\n   */\n  on(\n    type: 'generate',\n    callback: (event: CodegenEvent) => Promise<CodegenResult[]> | CodegenResult[],\n  ): void\n  on(type: 'preferenceschange', callback: (event: CodegenPreferencesEvent) => Promise<void>): void\n  /**\n   *  Same as {@link CodegenAPI.on | `figma.codegen.on`}, but the callback only gets called the first time.\n   */\n  once(\n    type: 'generate',\n    callback: (event: CodegenEvent) => Promise<CodegenResult[]> | CodegenResult[],\n  ): void\n  once(type: 'preferenceschange', callback: (event: CodegenPreferencesEvent) => Promise<void>): void\n  /**\n   * Removes a callback added by {@link CodegenAPI.on | `figma.codegen.on`} or {@link CodegenAPI.once | `figma.codegen.once`}.\n   */\n  off(\n    type: 'generate',\n    callback: (event: CodegenEvent) => Promise<CodegenResult[]> | CodegenResult[],\n  ): void\n  off(type: 'preferenceschange', callback: (event: CodegenPreferencesEvent) => Promise<void>): void\n  /**\n   * Read the current preferences as specified by the user.\n   *\n   * ```ts\n   * type CodegenPreferences = {\n   *   readonly unit: 'PIXEL' | 'SCALED'\n   *   readonly scaleFactor?: number\n   *   // An object for every \"select\" item and their currently\n   *   // selected values. The format of this is \"select\" item\n   *   // propertyName => selectedOption.value.\n   *   readonly customSettings: Record<string, string>\n   * }\n   * ```\n   */\n  readonly preferences: CodegenPreferences\n  /**\n   * Triggers the `figma.codegen.on(\"generate\")` callback again.\n   *\n   * This is is useful for plugins that need to refresh the codegen output. For example, if you’re using an iframe to provide more customization options.\n   */\n  refresh: () => void\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/DevResource\n */\ninterface DevResource {\n  /**\n   * The name of the resource.\n   */\n  readonly name: string\n  /**\n   * The URL of the resource. This is considered the unique identifier of the resource.\n   */\n  readonly url: string\n  /**\n   * `inheritedNodeId` is a field only relevant to links on `INSTANCE` nodes. If `inheritedNodeId` is defined, the link is inherited from a main component or a component set. If you want to edit or delete the inherited link, you will need to go to the main node to do so. For example:\n   *\n   * ```ts\n   * const devResource = { ..., inheritedNodeId: '1:2' }\n   * const node = await figma.getNodeByIdAsync(devResource.inheritedNodeId)\n   * await node.editDevResourceAsync(...)\n   * ```\n   */\n  readonly inheritedNodeId?: string\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/DevResource\n */\ninterface DevResourceWithNodeId extends DevResource {\n  /**\n   * The ID of the node that this link is attached to.\n   */\n  nodeId: string\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/N/A\n */\ndeclare type LinkPreviewEvent = {\n  link: DevResource\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/N/A\n */\ndeclare type PlainTextElement = {\n  type: 'PLAIN_TEXT'\n  text: string\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/N/A\n */\ndeclare type LinkPreviewResult =\n  | {\n      type: 'AUTH_REQUIRED'\n    }\n  | PlainTextElement\n  | null\n/**\n * @see https://www.figma.com/plugin-docs/api/N/A\n */\ndeclare type AuthEvent = {\n  links: DevResource[]\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/N/A\n */\ndeclare type DevResourceOpenEvent = {\n  devResource: DevResourceWithNodeId\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/N/A\n */\ndeclare type AuthResult = {\n  type: 'AUTH_SUCCESS'\n} | null\n/**\n * @see https://www.figma.com/plugin-docs/api/N/A\n */\ninterface VSCodeAPI {}\n/**\n * @see https://www.figma.com/plugin-docs/api/N/A\n */\ninterface DevResourcesAPI {\n  /**\n   * Create a handler for when the linkpreview, auth, and open events are triggered.\n   */\n  on(\n    type: 'linkpreview',\n    callback: (event: LinkPreviewEvent) => Promise<LinkPreviewResult> | LinkPreviewResult,\n  ): void\n  on(type: 'auth', callback: (event: AuthEvent) => Promise<AuthResult> | AuthResult): void\n  on(type: 'open', callback: (event: DevResourceOpenEvent) => void): void\n  /**\n   * Create a handler for when the linkpreview, auth, and open events are first triggered. This only gets called once.\n   */\n  once(\n    type: 'linkpreview',\n    callback: (event: LinkPreviewEvent) => Promise<LinkPreviewResult> | LinkPreviewResult,\n  ): void\n  once(type: 'auth', callback: (event: AuthEvent) => Promise<AuthResult> | AuthResult): void\n  once(type: 'open', callback: (event: DevResourceOpenEvent) => void): void\n  /**\n   * Remove a handler for the linkpreview, auth, and open events.\n   */\n  off(\n    type: 'linkpreview',\n    callback: (event: LinkPreviewEvent) => Promise<LinkPreviewResult> | LinkPreviewResult,\n  ): void\n  off(type: 'auth', callback: (event: AuthEvent) => Promise<AuthResult> | AuthResult): void\n  off(type: 'open', callback: (event: DevResourceOpenEvent) => void): void\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/figma-timer\n */\ninterface TimerAPI {\n  /**\n   * Time remaining on timer, in seconds. If the timer has not been started, returns 0.\n   */\n  readonly remaining: number\n  /**\n   * Total time on timer, in seconds. If the timer has not been started, returns 0. The total time is defined as the time the timer was initially started at, plus or minus any time that may have been added or removed from the timer.\n   */\n  readonly total: number\n  /**\n   * The current state of the timer. If the timer is started and not paused, the state will be `\"RUNNING\"`. If the timer is not started or finished, the state is `\"STOPPED\"`. And if the timer is started but paused, the state is `\"PAUSED\"`.\n   */\n  readonly state: 'STOPPED' | 'PAUSED' | 'RUNNING'\n  /**\n   * Pause the timer. If the timer has not been started, does nothing.\n   */\n  pause: () => void\n  /**\n   * Resume the timer. If the timer is not currently started and paused, does nothing.\n   */\n  resume: () => void\n  /**\n   * Start the timer with `seconds` seconds remaining. If the timer is not currently started, will start the timer with this total time. If the timer is currently started, will set the remaining time to this value, and increment or decrement the timer's total time based on how much time was added or removed from the remaining time. If the timer was previously paused, will also unpause the timer.\n   */\n  start: (seconds: number) => void\n  /**\n   * Stops the timer. If the timer was not started or is finished, does nothing.\n   */\n  stop: () => void\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/figma-viewport\n */\ninterface ViewportAPI {\n  /**\n   * Center of the the current page that is currently visible on screen.\n   */\n  center: Vector\n  /**\n   * Zoom level. A value of 1.0 means 100% zoom, 0.5 means 50% zoom.\n   *\n   * @remarks\n   * - zoom &lt; 1: design is zoomed out\n   * - zoom = 1: design is shown at exact size\n   * - zoom &gt; 1: design is zoomed in\n   */\n  zoom: number\n  /**\n   * Automatically sets the viewport coordinates such that the nodes are visible on screen. It is the equivalent of pressing Shift-1.\n   */\n  scrollAndZoomIntoView(nodes: ReadonlyArray<BaseNode>): void\n  /**\n   * The bounds of the viewport of the page that is currently visible on screen. The (x, y) corresponds to the top-left of the screen. User actions such as resizing the window or showing/hiding the rulers/UI will change the bounds of the viewport.\n   */\n  readonly bounds: Rect\n  /**\n   * Note: This API is only available in Figma Slides\n   *\n   * @remarks\n   *\n   * The viewport mode within the Slides UI: In Single Slide View, the viewport is zoomed into the current slide, and we only render that\n   * one slide. In Grid View, the viewport is zoomed out to show the entire slide grid.\n   *\n   * You can access the current view:\n   *\n   * ```ts\n   * const currentView = figma.viewport.slidesView\n   * ```\n   *\n   * And you can set the view:\n   *\n   * ```ts\n   * figma.viewport.slidesView = 'single-slide'\n   * ```\n   *\n   * ### A Note About Single Slide View:\n   *\n   * We have updated all of the create methods (`figma.createRectangle()`, `figma.createLine()`, etc) so that when the Figma Slides file is in Single Slide View,\n   * they append that node to the focused slide instead of to the canvas. This is to ensure that the node you are creating is viewable by the current user and\n   * not hidden off to the side of the larger grid view.\n   */\n  slidesView: 'grid' | 'single-slide'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/figma-textreview\n */\ninterface TextReviewAPI {\n  /**\n   * This method will request your plugin to be enabled as a text review plugin for the user.\n   * A modal will pop up that will ask the user if they want to enable the plugin for text review.\n   * The promise returned by the function will be resolved if the user accepts in the dialog and will be rejected if the user cancels.\n   * Note that to prevent spam the promise will be auto rejected if the user cancels the request multiple times in a given plugin run.\n   *\n   * ![Dialog box that shows when you call the function](https://static.figma.com/uploads/ee33919763431eb2520074650fddfaa904c7e9c1)\n   */\n  requestToBeEnabledAsync(): Promise<void>\n  /**\n   * This method will disable the plugin as a text review plugin if it is enabled. The promise will resolve if it has been successfully been disabled and reject if it wasn’t enabled in the first place.\n   */\n  requestToBeDisabledAsync(): Promise<void>\n  /**\n   * This property is a readonly boolean that can be used to check if your plugin is enabled as a text review plugin for the user. It will be true if the plugin is enabled, and false if the plugin is disabled.\n   */\n  readonly isEnabled: boolean\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/figma-parameters\n */\ninterface ParameterValues {\n  [key: string]: any\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/figma-parameters\n */\ninterface SuggestionResults {\n  /**\n   * Sets the list of autocomplete suggestions to be displayed in the quick action UI.\n   *\n   * If you only want to provide a string suggestion, and don't need metadata or icons, you can use\n   * an array of simple string values. For example\n   *\n   * ```ts title=\"Simple string suggestions\"\n   * figma.parameters.on('input', ({ query, result }) => {\n   *   result.setSuggestions(\n   *     [\"Armadillo\", \"Baboon\", \"Cacatua\", \"Dolphin\"]\n   *     .filter(s => s.includes(query)))\n   * })\n   * ```\n   *\n   * However the API also allows providing more information with each suggestion:\n   * * The text to display to the user\n   * * An icon (optional)\n   * * Hidden metadata which is passed back to the plugin if the user chooses this suggestion (optional)\n   *\n   * Example\n   * ```ts title=\"Suggestions with icons and data\"\n   * result.setSuggestions([\n   *   { name: node1.name, data: node1.id, icon: node1Preview },\n   *   { name: node2.name, data: node2.id, icon: node2Preview },\n   *   ...\n   * ])\n   * ```\n   *\n   * The `name` property contains the text to display to the user in the autocomplete suggestions. This\n   * property is required.\n   *\n   * The `data` property allows associating hidden metadata with a given autocomplete suggestion.\n   * This data is passed back to the plugin as the parameter's value if the user chooses this option.\n   * If no `data` property is provided, it defaults to the value of the `name` property. I.e. the value\n   * of the parameter will be the string that was displayed to the user.\n   *\n   * An icon can be provided through a `icon` or `iconUrl` property. The `icon` property can contain\n   * either a raster image in the form of a `Uint8Array`, or an SVG image in the form of a string. You\n   * can alternatively use the `iconUrl` property to provide a URL to the image. Note that for this to\n   * work the target server has to support CORS.\n   */\n  setSuggestions(\n    suggestions: Array<\n      | string\n      | {\n          name: string\n          data?: any\n          icon?: string | Uint8Array\n          iconUrl?: string\n        }\n    >,\n  ): void\n  /**\n   * Displays an error message to the user instead of a list of autocomplete suggestions. When this function\n   * is called, the user is prevented from moving on to the next parameter without first changing the input\n   * for the current parameter.\n   *\n   * This is useful to signal to the user that they have entered an invalid value and provide them\n   * instruction for how to correct the input.\n   *\n   * You can also use this as a way to validate pre-conditions, like current selection, or some state of the\n   * current document. To do this, in the 'input' event handler for the first parameter key, check the that\n   * all pre-conditions are fulfilled and call `setError` with an appropriate error message if they are not,\n   * unconditionally of what the current `query` value is.\n   *\n   * This function is *not* available on parameters with `allowFreeform` set. The purpose of `allowFreeform`\n   * is to allow users to enter arbitrary values and so Figma doesn't guarantee that the plugin gets an\n   * opportunity to handle an input event and call `setError` before the user moves on to the next parameter.\n   *\n   * If you want to generally allow freeform input, but still retain the ability to call `setError`, you can\n   * remove `allowFreeform` and manually add a autocomplete entry containing the current `query` string. I.e.\n   * make the first item in the array passed to `setSuggestions` simply be the string in `query`.\n   *\n   * For a full example of what this can look like, see the [Resizer sample plugin](https://github.com/figma/plugin-samples/blob/master/resizer/code.ts)\n   */\n  setError(message: string): void\n  /**\n   * Modify the default \"Loading Suggestions...\" message displayed until the plugin calls `setSuggestions`.\n   * This can be useful if your plugin needs to load autocomplete messages from the network, or if you need\n   * to perform lengthy calculations.\n   *\n   * You can call `setLoadingMessage` multiple times in order to provide an updated message.\n   */\n  setLoadingMessage(message: string): void\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/figma-parameters\n */\ndeclare type ParameterInputEvent<ParametersType = ParameterValues> = {\n  query: string\n  key: string\n  parameters: Partial<ParametersType>\n  result: SuggestionResults\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/figma-parameters\n */\ninterface ParametersAPI {\n  /**\n   * Register a handler for user input events in the quick action UI.\n   */\n  on(type: 'input', callback: (event: ParameterInputEvent) => void): void\n  /**\n   * Register a handler for user input events in the quick action UI. Same as `figma.parameters.on(\"input\")`, but only gets called the first time.\n   */\n  once(type: 'input', callback: (event: ParameterInputEvent) => void): void\n  /**\n   * Removes a handler added via `figma.parameters.on`.\n   */\n  off(type: 'input', callback: (event: ParameterInputEvent) => void): void\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/properties/figma-on\n */\ninterface RunParametersEvent<ParametersType = ParameterValues | undefined> {\n  command: string\n  parameters: ParametersType\n}\ninterface OpenDevResourcesEvent {\n  command: 'open-dev-resource'\n  parameters?: undefined\n  link: {\n    url: string\n    name: string\n  }\n}\ndeclare type RunEvent = RunParametersEvent | OpenDevResourcesEvent\ninterface SlidesViewChangeEvent {\n  view: 'GRID' | 'SINGLE_SLIDE'\n}\ninterface DropEvent {\n  node: BaseNode | SceneNode\n  x: number\n  y: number\n  absoluteX: number\n  absoluteY: number\n  items: DropItem[]\n  files: DropFile[]\n  dropMetadata?: any\n}\ninterface DropItem {\n  type: string\n  data: string\n}\ninterface DropFile {\n  name: string\n  type: string\n  getBytesAsync(): Promise<Uint8Array>\n  getTextAsync(): Promise<string>\n}\ninterface DocumentChangeEvent {\n  /**\n   * An array of {@link DocumentChange} that has happened since the last time the event was fired.\n   */\n  documentChanges: DocumentChange[]\n}\ninterface StyleChangeEvent {\n  /**\n   * An array of {@link StyleChange} that has happened since the last time the event was fired.\n   */\n  styleChanges: StyleChange[]\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/StyleChange\n */\ndeclare type StyleChange = StyleCreateChange | StyleDeleteChange | StylePropertyChange\n/**\n * @see https://www.figma.com/plugin-docs/api/DocumentChange\n */\ninterface BaseDocumentChange {\n  /**\n   * The id of the node / style that is subject to the document change. The same that is on `node.id` or `style.id`\n   */\n  id: string\n  /**\n   * Where the change originates from. If the change is 'LOCAL' it is from the user running the plugin and if it is 'REMOTE' it is from a different user in the file.\n   */\n  origin: 'LOCAL' | 'REMOTE'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/DocumentChange\n */\ninterface BaseNodeChange extends BaseDocumentChange {\n  /**\n   * The node that changed in the document. If the node has been removed since the event happened this will be a {@link RemovedNode}\n   */\n  node: SceneNode | RemovedNode\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/RemovedNode\n */\ninterface RemovedNode {\n  /**\n   * `removed` is set to `true` to distinguish a deleted node from one that is on the document.\n   */\n  readonly removed: true\n  /**\n   * The type of the node before it was removed from the document\n   */\n  readonly type: NodeType\n  /**\n   * The id of the node\n   */\n  readonly id: string\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/DocumentChange\n */\ninterface CreateChange extends BaseNodeChange {\n  /**\n   * The string literal \"CREATE\" representing the type of document change this is. Always check the type before reading other properties.\n   */\n  type: 'CREATE'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/DocumentChange\n */\ninterface DeleteChange extends BaseNodeChange {\n  /**\n   * The string literal \"DELETE\" representing the type of document change this is. Always check the type before reading other properties.\n   */\n  type: 'DELETE'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/DocumentChange\n */\ninterface PropertyChange extends BaseNodeChange {\n  /**\n   * The string literal \"PROPERTY_CHANGE\" representing the type of document change this is. Always check the type before reading other properties.\n   */\n  type: 'PROPERTY_CHANGE'\n  /**\n   * Array of properties that have been changed on the node.\n   */\n  properties: NodeChangeProperty[]\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/DocumentChange\n */\ninterface BaseStyleChange extends BaseDocumentChange {\n  /**\n   * The style that has been updated in the document. This is null for StyleDeleteChange.\n   */\n  style: BaseStyle | null\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/DocumentChange\n */\ninterface StyleCreateChange extends BaseStyleChange {\n  /**\n   * The string literal \"STYLE_CREATE\" representing the type of document change this is. Always check the type before reading other properties.\n   */\n  type: 'STYLE_CREATE'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/DocumentChange\n */\ninterface StyleDeleteChange extends BaseStyleChange {\n  /**\n   * The string literal \"STYLE_DELETE\" representing the type of document change this is. Always check the type before reading other properties. In this case, the returned style is null.\n   */\n  type: 'STYLE_DELETE'\n  style: null\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/DocumentChange\n */\ninterface StylePropertyChange extends BaseStyleChange {\n  /**\n   * The string literal \"STYLE_PROPERTY_CHANGE\" representing the type of document change this is. Always check the type before reading other properties.\n   */\n  type: 'STYLE_PROPERTY_CHANGE'\n  /**\n   * Array of properties that have been changed on the node.\n   */\n  properties: StyleChangeProperty[]\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/DocumentChange\n */\ndeclare type DocumentChange =\n  | CreateChange\n  | DeleteChange\n  | PropertyChange\n  | StyleCreateChange\n  | StyleDeleteChange\n  | StylePropertyChange\n/**\n * @see https://www.figma.com/plugin-docs/api/NodeChangeProperty\n */\ndeclare type NodeChangeProperty =\n  | 'pointCount'\n  | 'name'\n  | 'width'\n  | 'height'\n  | 'minWidth'\n  | 'maxWidth'\n  | 'minHeight'\n  | 'maxHeight'\n  | 'parent'\n  | 'pluginData'\n  | 'constraints'\n  | 'locked'\n  | 'visible'\n  | 'opacity'\n  | 'blendMode'\n  | 'layoutGrids'\n  | 'guides'\n  | 'characters'\n  | 'openTypeFeatures'\n  | 'styledTextSegments'\n  | 'vectorNetwork'\n  | 'effects'\n  | 'exportSettings'\n  | 'arcData'\n  | 'autoRename'\n  | 'fontName'\n  | 'innerRadius'\n  | 'fontSize'\n  | 'lineHeight'\n  | 'leadingTrim'\n  | 'paragraphIndent'\n  | 'paragraphSpacing'\n  | 'listSpacing'\n  | 'hangingPunctuation'\n  | 'hangingList'\n  | 'letterSpacing'\n  | 'textAlignHorizontal'\n  | 'textAlignVertical'\n  | 'textCase'\n  | 'textDecoration'\n  | 'textAutoResize'\n  | 'textTruncation'\n  | 'maxLines'\n  | 'fills'\n  | 'topLeftRadius'\n  | 'topRightRadius'\n  | 'bottomLeftRadius'\n  | 'bottomRightRadius'\n  | 'constrainProportions'\n  | 'strokes'\n  | 'strokeWeight'\n  | 'strokeAlign'\n  | 'strokeCap'\n  | 'strokeJoin'\n  | 'strokeMiterLimit'\n  | 'booleanOperation'\n  | 'overflowDirection'\n  | 'dashPattern'\n  | 'backgrounds'\n  | 'handleMirroring'\n  | 'cornerRadius'\n  | 'cornerSmoothing'\n  | 'relativeTransform'\n  | 'x'\n  | 'y'\n  | 'rotation'\n  | 'isMask'\n  | 'maskType'\n  | 'clipsContent'\n  | 'type'\n  | 'overlayPositionType'\n  | 'overlayBackgroundInteraction'\n  | 'overlayBackground'\n  | 'prototypeStartNode'\n  | 'prototypeBackgrounds'\n  | 'expanded'\n  | 'fillStyleId'\n  | 'strokeStyleId'\n  | 'backgroundStyleId'\n  | 'textStyleId'\n  | 'effectStyleId'\n  | 'gridStyleId'\n  | 'description'\n  | 'layoutMode'\n  | 'layoutWrap'\n  | 'paddingLeft'\n  | 'paddingTop'\n  | 'paddingRight'\n  | 'paddingBottom'\n  | 'itemSpacing'\n  | 'counterAxisSpacing'\n  | 'layoutAlign'\n  | 'counterAxisSizingMode'\n  | 'primaryAxisSizingMode'\n  | 'primaryAxisAlignItems'\n  | 'counterAxisAlignItems'\n  | 'counterAxisAlignContent'\n  | 'layoutGrow'\n  | 'layoutPositioning'\n  | 'itemReverseZIndex'\n  | 'hyperlink'\n  | 'mediaData'\n  | 'stokeTopWeight'\n  | 'strokeBottomWeight'\n  | 'strokeLeftWeight'\n  | 'strokeRightWeight'\n  | 'reactions'\n  | 'flowStartingPoints'\n  | 'shapeType'\n  | 'connectorStart'\n  | 'connectorEnd'\n  | 'connectorLineType'\n  | 'connectorStartStrokeCap'\n  | 'connectorEndStrokeCap'\n  | 'codeLanguage'\n  | 'widgetSyncedState'\n  | 'componentPropertyDefinitions'\n  | 'componentPropertyReferences'\n  | 'componentProperties'\n  | 'embedData'\n  | 'linkUnfurlData'\n  | 'text'\n  | 'authorVisible'\n  | 'authorName'\n  | 'code'\n  | 'textBackground'\ninterface NodeChangeEvent {\n  nodeChanges: NodeChange[]\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/NodeChange\n */\ndeclare type NodeChange = CreateChange | DeleteChange | PropertyChange\n/**\n * @see https://www.figma.com/plugin-docs/api/StyleChangeProperty\n */\ndeclare type StyleChangeProperty =\n  | 'name'\n  | 'pluginData'\n  | 'type'\n  | 'description'\n  | 'remote'\n  | 'documentationLinks'\n  | 'fontSize'\n  | 'textDecoration'\n  | 'letterSpacing'\n  | 'lineHeight'\n  | 'leadingTrim'\n  | 'paragraphIndent'\n  | 'paragraphSpacing'\n  | 'listSpacing'\n  | 'hangingPunctuation'\n  | 'hangingList'\n  | 'textCase'\n  | 'paint'\n  | 'effects'\n  | 'layoutGrids'\ndeclare type TextReviewEvent = {\n  text: string\n}\ndeclare type TextReviewRange = {\n  start: number\n  end: number\n  suggestions: string[]\n  color?: 'RED' | 'GREEN' | 'BLUE'\n}\ndeclare type Transform = [[number, number, number], [number, number, number]]\ninterface Vector {\n  readonly x: number\n  readonly y: number\n}\ninterface Rect {\n  readonly x: number\n  readonly y: number\n  readonly width: number\n  readonly height: number\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/RGB\n */\ninterface RGB {\n  readonly r: number\n  readonly g: number\n  readonly b: number\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/RGB\n */\ninterface RGBA {\n  readonly r: number\n  readonly g: number\n  readonly b: number\n  readonly a: number\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/FontName\n */\ninterface FontName {\n  readonly family: string\n  readonly style: string\n}\ndeclare type TextCase =\n  | 'ORIGINAL'\n  | 'UPPER'\n  | 'LOWER'\n  | 'TITLE'\n  | 'SMALL_CAPS'\n  | 'SMALL_CAPS_FORCED'\ndeclare type TextDecoration = 'NONE' | 'UNDERLINE' | 'STRIKETHROUGH'\ndeclare type TextDecorationStyle = 'SOLID' | 'WAVY' | 'DOTTED'\ndeclare type TextDecorationOffset =\n  | {\n      readonly value: number\n      readonly unit: 'PIXELS' | 'PERCENT'\n    }\n  | {\n      readonly unit: 'AUTO'\n    }\ndeclare type TextDecorationThickness =\n  | {\n      readonly value: number\n      readonly unit: 'PIXELS' | 'PERCENT'\n    }\n  | {\n      readonly unit: 'AUTO'\n    }\ndeclare type TextDecorationColor =\n  | {\n      readonly value: SolidPaint\n    }\n  | {\n      readonly value: 'AUTO'\n    }\ndeclare type OpenTypeFeature =\n  | 'PCAP'\n  | 'C2PC'\n  | 'CASE'\n  | 'CPSP'\n  | 'TITL'\n  | 'UNIC'\n  | 'ZERO'\n  | 'SINF'\n  | 'ORDN'\n  | 'AFRC'\n  | 'DNOM'\n  | 'NUMR'\n  | 'LIGA'\n  | 'CLIG'\n  | 'DLIG'\n  | 'HLIG'\n  | 'RLIG'\n  | 'AALT'\n  | 'CALT'\n  | 'RCLT'\n  | 'SALT'\n  | 'RVRN'\n  | 'VERT'\n  | 'SWSH'\n  | 'CSWH'\n  | 'NALT'\n  | 'CCMP'\n  | 'STCH'\n  | 'HIST'\n  | 'SIZE'\n  | 'ORNM'\n  | 'ITAL'\n  | 'RAND'\n  | 'DTLS'\n  | 'FLAC'\n  | 'MGRK'\n  | 'SSTY'\n  | 'KERN'\n  | 'FWID'\n  | 'HWID'\n  | 'HALT'\n  | 'TWID'\n  | 'QWID'\n  | 'PWID'\n  | 'JUST'\n  | 'LFBD'\n  | 'OPBD'\n  | 'RTBD'\n  | 'PALT'\n  | 'PKNA'\n  | 'LTRA'\n  | 'LTRM'\n  | 'RTLA'\n  | 'RTLM'\n  | 'ABRV'\n  | 'ABVM'\n  | 'ABVS'\n  | 'VALT'\n  | 'VHAL'\n  | 'BLWF'\n  | 'BLWM'\n  | 'BLWS'\n  | 'AKHN'\n  | 'CJCT'\n  | 'CFAR'\n  | 'CPCT'\n  | 'CURS'\n  | 'DIST'\n  | 'EXPT'\n  | 'FALT'\n  | 'FINA'\n  | 'FIN2'\n  | 'FIN3'\n  | 'HALF'\n  | 'HALN'\n  | 'HKNA'\n  | 'HNGL'\n  | 'HOJO'\n  | 'INIT'\n  | 'ISOL'\n  | 'JP78'\n  | 'JP83'\n  | 'JP90'\n  | 'JP04'\n  | 'LJMO'\n  | 'LOCL'\n  | 'MARK'\n  | 'MEDI'\n  | 'MED2'\n  | 'MKMK'\n  | 'NLCK'\n  | 'NUKT'\n  | 'PREF'\n  | 'PRES'\n  | 'VPAL'\n  | 'PSTF'\n  | 'PSTS'\n  | 'RKRF'\n  | 'RPHF'\n  | 'RUBY'\n  | 'SMPL'\n  | 'TJMO'\n  | 'TNAM'\n  | 'TRAD'\n  | 'VATU'\n  | 'VJMO'\n  | 'VKNA'\n  | 'VKRN'\n  | 'VRTR'\n  | 'VRT2'\n  | 'SS01'\n  | 'SS02'\n  | 'SS03'\n  | 'SS04'\n  | 'SS05'\n  | 'SS06'\n  | 'SS07'\n  | 'SS08'\n  | 'SS09'\n  | 'SS10'\n  | 'SS11'\n  | 'SS12'\n  | 'SS13'\n  | 'SS14'\n  | 'SS15'\n  | 'SS16'\n  | 'SS17'\n  | 'SS18'\n  | 'SS19'\n  | 'SS20'\n  | 'CV01'\n  | 'CV02'\n  | 'CV03'\n  | 'CV04'\n  | 'CV05'\n  | 'CV06'\n  | 'CV07'\n  | 'CV08'\n  | 'CV09'\n  | 'CV10'\n  | 'CV11'\n  | 'CV12'\n  | 'CV13'\n  | 'CV14'\n  | 'CV15'\n  | 'CV16'\n  | 'CV17'\n  | 'CV18'\n  | 'CV19'\n  | 'CV20'\n  | 'CV21'\n  | 'CV22'\n  | 'CV23'\n  | 'CV24'\n  | 'CV25'\n  | 'CV26'\n  | 'CV27'\n  | 'CV28'\n  | 'CV29'\n  | 'CV30'\n  | 'CV31'\n  | 'CV32'\n  | 'CV33'\n  | 'CV34'\n  | 'CV35'\n  | 'CV36'\n  | 'CV37'\n  | 'CV38'\n  | 'CV39'\n  | 'CV40'\n  | 'CV41'\n  | 'CV42'\n  | 'CV43'\n  | 'CV44'\n  | 'CV45'\n  | 'CV46'\n  | 'CV47'\n  | 'CV48'\n  | 'CV49'\n  | 'CV50'\n  | 'CV51'\n  | 'CV52'\n  | 'CV53'\n  | 'CV54'\n  | 'CV55'\n  | 'CV56'\n  | 'CV57'\n  | 'CV58'\n  | 'CV59'\n  | 'CV60'\n  | 'CV61'\n  | 'CV62'\n  | 'CV63'\n  | 'CV64'\n  | 'CV65'\n  | 'CV66'\n  | 'CV67'\n  | 'CV68'\n  | 'CV69'\n  | 'CV70'\n  | 'CV71'\n  | 'CV72'\n  | 'CV73'\n  | 'CV74'\n  | 'CV75'\n  | 'CV76'\n  | 'CV77'\n  | 'CV78'\n  | 'CV79'\n  | 'CV80'\n  | 'CV81'\n  | 'CV82'\n  | 'CV83'\n  | 'CV84'\n  | 'CV85'\n  | 'CV86'\n  | 'CV87'\n  | 'CV88'\n  | 'CV89'\n  | 'CV90'\n  | 'CV91'\n  | 'CV92'\n  | 'CV93'\n  | 'CV94'\n  | 'CV95'\n  | 'CV96'\n  | 'CV97'\n  | 'CV98'\n  | 'CV99'\ninterface ArcData {\n  readonly startingAngle: number\n  readonly endingAngle: number\n  readonly innerRadius: number\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Effect\n */\ninterface DropShadowEffect {\n  /**\n   * The string literal representing the type of effect this is. Always check the `type` before reading other properties.\n   */\n  readonly type: 'DROP_SHADOW'\n  /**\n   * The color of the shadow, including its opacity.\n   */\n  readonly color: RGBA\n  /**\n   * The offset of the shadow relative to its object. Use this property to simulate the direction of the light.\n   */\n  readonly offset: Vector\n  /**\n   * The blur radius of the shadow. Must be >= 0. A lower radius creates a sharper shadow.\n   */\n  readonly radius: number\n  /**\n   * The distance by which to expand (or contract) the shadow. For drop shadows, a positive spread value creates a shadow larger than the node, whereas a negative value creates a shadow smaller than the node. For inner shadows, a positive `spread` value contracts the shadow. `spread` values are only accepted on rectangles and ellipses, or on frames, components, and instances with visible fill paints and `clipsContent` enabled. When left unspecified, the default value is 0.\n   */\n  readonly spread?: number\n  /**\n   * Whether this shadow is visible.\n   */\n  readonly visible: boolean\n  /**\n   * Determines how the color of this shadow blends with the colors underneath it. The typical default value is \"NORMAL\".\n   */\n  readonly blendMode: BlendMode\n  /**\n   * Whether the drop shadow should show behind translucent or transparent pixels within the node's geometry. Defaults to `false`.\n   */\n  readonly showShadowBehindNode?: boolean\n  /**\n   * The variables bound to a particular field on this shadow effect\n   */\n  readonly boundVariables?: {\n    [field in VariableBindableEffectField]?: VariableAlias\n  }\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Effect\n */\ninterface InnerShadowEffect {\n  /**\n   * The string literal representing the type of effect this is. Always check the `type` before reading other properties.\n   */\n  readonly type: 'INNER_SHADOW'\n  /**\n   * The color of the shadow, including its opacity.\n   */\n  readonly color: RGBA\n  /**\n   * The offset of the shadow relative to its object. Use this property to simulate the direction of the light.\n   */\n  readonly offset: Vector\n  /**\n   * The blur radius of the shadow. Must be >= 0. A lower radius creates a sharper shadow.\n   */\n  readonly radius: number\n  /**\n   * The distance by which to expand (or contract) the shadow. For drop shadows, a positive spread value creates a shadow larger than the node, whereas a negative value creates a shadow smaller than the node. For inner shadows, a positive `spread` value contracts the shadow. `spread` values are only accepted on rectangles and ellipses, or on frames, components, and instances with visible fill paints and `clipsContent` enabled. When left unspecified, the default value is 0.\n   */\n  readonly spread?: number\n  /**\n   * Whether this shadow is visible.\n   */\n  readonly visible: boolean\n  /**\n   * Determines how the color of this shadow blends with the colors underneath it. The typical default value is \"NORMAL\".\n   */\n  readonly blendMode: BlendMode\n  /**\n   * The variables bound to a particular field on this shadow effect\n   */\n  readonly boundVariables?: {\n    [field in VariableBindableEffectField]?: VariableAlias\n  }\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Effect\n */\ninterface BlurEffectBase {\n  /**\n   * The string literal representing the type of effect this is. Always check the `type` before reading other properties.\n   */\n  readonly type: 'LAYER_BLUR' | 'BACKGROUND_BLUR'\n  /**\n   * The radius of the blur. Must be >= 0. A lower radius creates a sharper blur. For progressive blurs, this is the end radius of the blur.\n   */\n  readonly radius: number\n  /**\n   * Whether this blur is visible.\n   */\n  readonly visible: boolean\n  /**\n   * The variable bound to the radius field on this blur effect\n   * */\n  readonly boundVariables?: {\n    ['radius']?: VariableAlias\n  }\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Effect\n */\ninterface BlurEffectNormal extends BlurEffectBase {\n  /**\n   * The string literal representing the blur type. Always check the `blurType` before reading other properties.\n   */\n  readonly blurType: 'NORMAL'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Effect\n */\ninterface BlurEffectProgressive extends BlurEffectBase {\n  /**\n   * The string literal representing the blur type. Always check the `blurType` before reading other properties.\n   */\n  readonly blurType: 'PROGRESSIVE'\n  /**\n   * Radius of the starting point of the progressive blur.\n   */\n  readonly startRadius: number\n  /**\n   * Position of the starting point of the progressive blur. The position is in normalized object space (top left corner of the bounding box of the object is (0, 0) and the bottom right is (1,1)).\n   */\n  readonly startOffset: Vector\n  /**\n   * Position of the ending point of the progressive blur. The position is in normalized object space (top left corner of the bounding box of the object is (0, 0) and the bottom right is (1,1)).\n   */\n  readonly endOffset: Vector\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Effect\n */\ndeclare type BlurEffect = BlurEffectNormal | BlurEffectProgressive\n/**\n * @see https://www.figma.com/plugin-docs/api/Effect\n */\ninterface NoiseEffectBase {\n  /**\n   * The string literal representing the type of effect this is. Always check the `type` before reading other properties.\n   */\n  readonly type: 'NOISE'\n  /**\n   * The color of the noise effect.\n   */\n  readonly color: RGBA\n  /**\n   * Whether the noise effect is visible.\n   */\n  readonly visible: boolean\n  /**\n   * The blend mode of the noise.\n   */\n  readonly blendMode: BlendMode\n  /**\n   * The size of the noise effect.\n   */\n  readonly noiseSize: number\n  /**\n   * The density of the noise effect.\n   */\n  readonly density: number\n  /**\n   * Noise effects currently do not support binding variables.\n   */\n  readonly boundVariables?: {}\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Effect\n */\ninterface NoiseEffectMonotone extends NoiseEffectBase {\n  /**\n   * The string literal representing the type of noise this is. Always check the `noiseType` before reading\n   * other properties.\n   */\n  readonly noiseType: 'MONOTONE'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Effect\n */\ninterface NoiseEffectDuotone extends NoiseEffectBase {\n  /**\n   * The string literal representing the type of noise this is. Always check the `noiseType` before reading\n   * other properties.\n   */\n  readonly noiseType: 'DUOTONE'\n  /**\n   * The secondary color of the noise effect.\n   */\n  readonly secondaryColor: RGBA\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Effect\n */\ninterface NoiseEffectMultitone extends NoiseEffectBase {\n  /**\n   * The string literal representing the type of noise this is. Always check the `noiseType` before reading\n   * other properties.\n   */\n  readonly noiseType: 'MULTITONE'\n  /**\n   * The opacity of the noise effect.\n   */\n  readonly opacity: number\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Effect\n */\ndeclare type NoiseEffect = NoiseEffectMonotone | NoiseEffectDuotone | NoiseEffectMultitone\n/**\n * @see https://www.figma.com/plugin-docs/api/Effect\n */\ninterface TextureEffect {\n  /**\n   * The string literal representing the type of effect this is. Always check the `type` before reading other properties.\n   */\n  readonly type: 'TEXTURE'\n  /**\n   * Whether the texture effect is visible.\n   */\n  readonly visible: boolean\n  /**\n   * The size of the texture effect.\n   */\n  readonly noiseSize: number\n  /**\n   * The radius of the texture effect.\n   */\n  readonly radius: number\n  /**\n   * Whether the texture is clipped to the shape.\n   */\n  readonly clipToShape: boolean\n  /**\n   * Texture effects currently do not support binding variables.\n   */\n  readonly boundVariables?: {}\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Effect\n */\ninterface GlassEffect {\n  /**\n   * The string literal representing the type of effect this is. Always check the `type` before reading other properties.\n   */\n  readonly type: 'GLASS'\n  /**\n   * Whether this glass effect is visible.\n   */\n  readonly visible: boolean\n  /**\n   * The intensity of specular highlights. Must be between 0 and 1. Higher values create brighter highlights.\n   */\n  readonly lightIntensity: number\n  /**\n   * The angle of the specular light in degrees. Controls the direction of highlights on the glass surface.\n   */\n  readonly lightAngle: number\n  /**\n   * The intensity of the refraction distortion. Must be between 0 and 1. Higher values create more distortion.\n   */\n  readonly refraction: number\n  /**\n   * The depth of the refraction effect. Must be >= 1. Higher values create deeper glass appearance.\n   */\n  readonly depth: number\n  /**\n   * The amount of chromatic aberration (color separation). Must be between 0 and 1. Higher values create more rainbow-like distortion at edges.\n   */\n  readonly dispersion: number\n  /**\n   * The radius of frost on the glass effect.\n   */\n  readonly radius: number\n  /**\n   * Glass effects currently do not support binding variables.\n   */\n  readonly boundVariables?: {}\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Effect\n */\ndeclare type Effect =\n  | DropShadowEffect\n  | InnerShadowEffect\n  | BlurEffect\n  | NoiseEffect\n  | TextureEffect\n  | GlassEffect\n/**\n * @see https://www.figma.com/plugin-docs/api/Constraints\n */\ndeclare type ConstraintType = 'MIN' | 'CENTER' | 'MAX' | 'STRETCH' | 'SCALE'\n/**\n * @see https://www.figma.com/plugin-docs/api/Constraints\n */\ninterface Constraints {\n  readonly horizontal: ConstraintType\n  readonly vertical: ConstraintType\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Paint\n */\ninterface ColorStop {\n  /**\n   * The position of the stop along the gradient between 0 and 1\n   */\n  readonly position: number\n  /**\n   * The color value of the gradient stop\n   */\n  readonly color: RGBA\n  /**\n   * The variable bound to a gradient stop\n   */\n  readonly boundVariables?: {\n    [field in VariableBindableColorStopField]?: VariableAlias\n  }\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Paint\n */\ninterface ImageFilters {\n  readonly exposure?: number\n  readonly contrast?: number\n  readonly saturation?: number\n  readonly temperature?: number\n  readonly tint?: number\n  readonly highlights?: number\n  readonly shadows?: number\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Paint\n */\ninterface SolidPaint {\n  /**\n   * The string literal \"SOLID\" representing the type of paint this is. Always check the `type` before reading other properties.\n   */\n  readonly type: 'SOLID'\n  /**\n   * The color of the paint. This does not have a alpha property, use `opacity` instead.\n   *\n   * You can use the {@link UtilAPI.solidPaint} utility function to set both `color` and `opacity` using CSS color strings:\n   *\n   * ```\n   * // Create a new SolidPaint\n   * const paint = figma.util.solidPaint('#FF00FF88')\n   *\n   * // Modify an existing SolidPaint\n   * if (node.fills[0].type === 'SOLID') {\n   *   const updated = figma.util.solidPaint('#FF00FF88', node.fills[0])\n   * }\n   * ```\n   */\n  readonly color: RGB\n  /**\n   * Whether the paint is visible. Defaults to true.\n   */\n  readonly visible?: boolean\n  /**\n   * The opacity of the paint. Must be a value between 0 and 1. Defaults to 1.\n   *\n   * You can use the {@link UtilAPI.solidPaint} utility function to set both `color` and `opacity` using CSS color strings:\n   *\n   * ```\n   * // Create a new SolidPaint\n   * const paint = figma.util.solidPaint('#FF00FF88')\n   *\n   * // Modify an existing SolidPaint\n   * if (node.fills[0].type === 'SOLID') {\n   *   const updated = figma.util.solidPaint('#FF00FF88', node.fills[0])\n   * }\n   * ```\n   */\n  readonly opacity?: number\n  /**\n   * Determines how the color of this paint blends with the colors underneath it. Defaults to \"NORMAL\".\n   */\n  readonly blendMode?: BlendMode\n  /**\n   * The variables bound to a particular field on this paint\n   */\n  readonly boundVariables?: {\n    [field in VariableBindablePaintField]?: VariableAlias\n  }\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Paint\n */\ninterface GradientPaint {\n  /**\n   * The string literal representing the type of paint this is. Always check the `type` before reading other properties.\n   */\n  readonly type: 'GRADIENT_LINEAR' | 'GRADIENT_RADIAL' | 'GRADIENT_ANGULAR' | 'GRADIENT_DIAMOND'\n  /**\n   * The positioning of the gradient within the layer.\n   */\n  readonly gradientTransform: Transform\n  /**\n   * Array of colors and their position within the gradient.\n   */\n  readonly gradientStops: ReadonlyArray<ColorStop>\n  readonly visible?: boolean\n  readonly opacity?: number\n  readonly blendMode?: BlendMode\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Paint\n */\ninterface ImagePaint {\n  /**\n   * The string literal \"IMAGE\" representing the type of paint this is. Always check the `type` before reading other properties.\n   */\n  readonly type: 'IMAGE'\n  /**\n   * How the image is positioned and scaled within the layer. Same as in the properties panel.\n   */\n  readonly scaleMode: 'FILL' | 'FIT' | 'CROP' | 'TILE'\n  /**\n   * The hash (id) of the image used for this paint, if any. Use {@link PluginAPI.getImageByHash} to get the corresponding image object.\n   */\n  readonly imageHash: string | null\n  /**\n   * Applicable only for `scaleMode == \"CROP\"`. Determines how the image is positioned (thus, cropped) within the layer.\n   */\n  readonly imageTransform?: Transform\n  /**\n   * Applicable only for `scaleMode == \"TILE\"` (automatic for other modes). Determines the scaling (thus, repetition) of the image within the layer.\n   */\n  readonly scalingFactor?: number\n  /**\n   * Applicable only for `scaleMode == \"TILE\" | \"FILL\" | \"FIT\"` (automatic for `scaleMode == \"CROP\"`). Determines the rotation of the image within the layer. Must be in increments of +90.\n   */\n  readonly rotation?: number\n  /**\n   * The values for the image filter slides, equivalent to those in the paint picker. All values default to 0.0 and have range -1.0 to +1.0.\n   */\n  readonly filters?: ImageFilters\n  readonly visible?: boolean\n  readonly opacity?: number\n  readonly blendMode?: BlendMode\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Paint\n */\ninterface VideoPaint {\n  /**\n   * The string literal \"VIDEO\" representing the type of paint this is. Always check the `type` before reading other properties.\n   */\n  readonly type: 'VIDEO'\n  /**\n   * How the image is positioned and scaled within the layer. Same as in the properties panel.\n   */\n  readonly scaleMode: 'FILL' | 'FIT' | 'CROP' | 'TILE'\n  /**\n   * The hash (id) of the video used for this paint, if any.\n   */\n  readonly videoHash: string | null\n  /**\n   * Applicable only for `scaleMode == \"CROP\"`. Determines how the video is positioned (thus, cropped) within the layer.\n   */\n  readonly videoTransform?: Transform\n  /**\n   * Applicable only for `scaleMode == \"TILE\"` (automatic for other modes). Determines the scaling (thus, repetition) of the video within the layer.\n   */\n  readonly scalingFactor?: number\n  /**\n   * Applicable only for `scaleMode == \"TILE\" | \"FILL\" | \"FIT\"` (automatic for `scaleMode == \"CROP\"`). Determines the rotation of the video within the layer. Must be in increments of +90.\n   */\n  readonly rotation?: number\n  /**\n   * The values for the video filter slides, equivalent to those in the paint picker. All values default to 0.0 and have range -1.0 to +1.0.\n   */\n  readonly filters?: ImageFilters\n  readonly visible?: boolean\n  readonly opacity?: number\n  readonly blendMode?: BlendMode\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Paint\n */\ninterface PatternPaint {\n  /**\n   * The string literal representing the type of paint this is. Always check the `type` before reading other properties.\n   */\n  readonly type: 'PATTERN'\n  /**\n   * The node id of the source node for the pattern\n   */\n  readonly sourceNodeId: string\n  /**\n   * The way the pattern is tiled\n   */\n  readonly tileType: 'RECTANGULAR' | 'HORIZONTAL_HEXAGONAL' | 'VERTICAL_HEXAGONAL'\n  /**\n   * The scaling factor of the pattern\n   */\n  readonly scalingFactor: number\n  /**\n   * The spacing of the pattern\n   */\n  readonly spacing: Vector\n  /**\n   * The horizontal alignment of the pattern\n   */\n  readonly horizontalAlignment: 'START' | 'CENTER' | 'END'\n  readonly visible?: boolean\n  readonly opacity?: number\n  readonly blendMode?: BlendMode\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Paint\n */\ndeclare type Paint = SolidPaint | GradientPaint | ImagePaint | VideoPaint | PatternPaint\ninterface Guide {\n  readonly axis: 'X' | 'Y'\n  readonly offset: number\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/LayoutGrid\n */\ninterface RowsColsLayoutGrid {\n  /**\n   * The string literal representing the layout grid this is. Always check the `pattern` before reading other properties.\n   */\n  readonly pattern: 'ROWS' | 'COLUMNS'\n  /**\n   * How the layout grid is aligned. \"MIN\" corresponds to \"Left\" or \"Top\" in the UI depending on the orientation of the layout grid. \"MAX\" corresponds to \"Right\" or \"Bottom\".\n   */\n  readonly alignment: 'MIN' | 'MAX' | 'STRETCH' | 'CENTER'\n  /**\n   * The distance between the sections of the grid.\n   */\n  readonly gutterSize: number\n  /**\n   * The number of sections. This can be set to the value `Infinity`, which corresponds to \"Auto\" in the UI.\n   */\n  readonly count: number\n  /**\n   * The size of a section. This is ignored when `alignment == \"STRETCH\"` since the size is set automatically.\n   */\n  readonly sectionSize?: number\n  /**\n   * The distance between the layout grid sections and the edges of the frame. This is ignored when `alignment == \"CENTER\"` since the size is set automatically.\n   */\n  readonly offset?: number\n  /**\n   * Whether the layout grid is visible. Defaults to true.\n   */\n  readonly visible?: boolean\n  /**\n   * The color of the layout grid.\n   */\n  readonly color?: RGBA\n  /**\n   * The variables bound to a particular field on this shadow effect\n   */\n  readonly boundVariables?: {\n    [field in VariableBindableLayoutGridField]?: VariableAlias\n  }\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/LayoutGrid\n */\ninterface GridLayoutGrid {\n  /**\n   * The string literal \"GRID\" representing the layout grid this is. Always check the `pattern` before reading other properties.\n   */\n  readonly pattern: 'GRID'\n  /**\n   * The size of individual grid cells.\n   */\n  readonly sectionSize: number\n  readonly visible?: boolean\n  readonly color?: RGBA\n  readonly boundVariables?: {\n    ['sectionSize']?: VariableAlias\n  }\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/LayoutGrid\n */\ndeclare type LayoutGrid = RowsColsLayoutGrid | GridLayoutGrid\n/**\n * @see https://www.figma.com/plugin-docs/api/ExportSettings\n */\ninterface ExportSettingsConstraints {\n  readonly type: 'SCALE' | 'WIDTH' | 'HEIGHT'\n  readonly value: number\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/ExportSettings\n */\ninterface ExportSettingsImage {\n  /**\n   * The string literal representing the export format.\n   * When reading {@link ExportMixin.exportSettings }, always check the `format` before reading other properties.\n   */\n  readonly format: 'JPG' | 'PNG'\n  /**\n   * Whether only the contents of the node are exported, or any overlapping layer in the same area. Defaults to `true`.\n   */\n  readonly contentsOnly?: boolean\n  /**\n   * Use the full dimensions of the node regardless of whether or not it is cropped or the space around it is empty. Use this to export text nodes without cropping. Defaults to `false`.\n   */\n  readonly useAbsoluteBounds?: boolean\n  /**\n   * Suffix appended to the file name when exporting. Defaults to empty string.\n   */\n  readonly suffix?: string\n  /**\n   * Constraint on the image size when exporting.\n   *\n   * ```ts\n   * interface ExportSettingsConstraints {\n   *   type: \"SCALE\" | \"WIDTH\" | \"HEIGHT\"\n   *   value: number\n   * }\n   * ```\n   *\n   * Defaults to 100% of image size `{ type: \"SCALE\", value: 1 }`.\n   *\n   *\n   * - `\"SCALE\"`: The size of the exported image is proportional to the size of the exported layer in Figma. A `value` of 1 means the export is 100% of the layer size.\n   * - `\"WIDTH\"`: The exported image is scaled to have a fixed width of `value`.\n   * - `\"HEIGHT\"`: The exported image is scaled to have a fixed height of `value`.\n   */\n  readonly constraint?: ExportSettingsConstraints\n  /**\n   * Color profile of the export.\n   *\n   * Defaults to `'DOCUMENT'`\n   *\n   *\n   * - `\"DOCUMENT\"`: Use the color profile of {@link DocumentNode.documentColorProfile}.\n   * - `\"SRGB\"`: Use sRGB colors. This was the previous behavior of Figma before [color management](https://help.figma.com/hc/en-us/articles/360039825114).\n   * - `\"DISPLAY_P3_V4\"`: Use Display P3 colors.\n   */\n  readonly colorProfile?: 'DOCUMENT' | 'SRGB' | 'DISPLAY_P3_V4'\n}\ninterface ExportSettingsSVGBase {\n  readonly contentsOnly?: boolean\n  readonly useAbsoluteBounds?: boolean\n  readonly suffix?: string\n  /**\n   * Whether text elements are rendered as outlines (vector paths) or as `<text>` elements in SVGs. Defaults to `true`.\n   *\n   * Rendering text elements as outlines guarantees that the text looks exactly the same in the SVG as it does in the browser/inside Figma.\n   *\n   * Exporting as `<text>` allows text to be selectable inside SVGs and generally makes the SVG easier to read. However, this relies on the browser’s rendering engine which can vary between browsers and/or operating systems. As such, visual accuracy is not guaranteed as the result could look different than in Figma.\n   */\n  readonly svgOutlineText?: boolean\n  /**\n   * Whether to include layer names as ID attributes in the SVG. This can be useful as a way to reference particular elements, but increases the size of the SVG. SVG features that require IDs to function, such as masks and gradients, will always have IDs. Defaults to `false`.\n   */\n  readonly svgIdAttribute?: boolean\n  /**\n   * Whether to export inside and outside strokes as an approximation of the original to simplify the output. Otherwise, it uses a more precise but more bloated masking technique. This is needed because SVGs only support center strokes. Defaults to `true`.\n   */\n  readonly svgSimplifyStroke?: boolean\n  readonly colorProfile?: 'DOCUMENT' | 'SRGB' | 'DISPLAY_P3_V4'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/ExportSettings\n */\ninterface ExportSettingsSVG extends ExportSettingsSVGBase {\n  /**\n   * The string literal \"SVG\" representing the export format.\n   * When reading {@link ExportMixin.exportSettings }, always check the `format` before reading other properties.\n   */\n  readonly format: 'SVG'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/ExportSettings\n */\ninterface ExportSettingsSVGString extends ExportSettingsSVGBase {\n  /**\n   * The string literal \"SVG_STRING\" representing the export format.\n   */\n  readonly format: 'SVG_STRING'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/ExportSettings\n */\ninterface ExportSettingsPDF {\n  /**\n   * The string literal \"PDF\" representing the export format.\n   *  When reading {@link ExportMixin.exportSettings }, always check the `format` before reading other properties.\n   */\n  readonly format: 'PDF'\n  readonly contentsOnly?: boolean\n  readonly useAbsoluteBounds?: boolean\n  readonly suffix?: string\n  readonly colorProfile?: 'DOCUMENT' | 'SRGB' | 'DISPLAY_P3_V4'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/ExportSettings\n */\ninterface ExportSettingsREST {\n  /**\n   * Returns the equivalent REST API response of hitting the endpoint `https://api.figma.com/v1/files/:file_key/nodes?ids=:id`.\n   *\n   * This is useful if you have existing code that uses the REST API that you would like to have work inside a plugin as well. It can also be significantly more perfomant if you need to serialize large groups of nodes and their children.\n   * Here is an example that logs the name of every child in a node using the REST API response:\n   *\n   * ```ts title=\"Using the JSON_REST_V1 format\"\n   * function visitChildren(child: Object) {\n   *   console.log(child.name);\n   *   if (child.children) {\n   *     child.children.forEach(visitChildren);\n   *   }\n   * }\n   *\n   * const response = await figma.currentPage.selection[0].exportAsync({\n   *   format: \"JSON_REST_V1\",\n   * });\n   *\n   * visitChildren(response.document);\n   * ```\n   *\n   * For more information on the shape of the output of the 'JSON_REST_V1' format, see: https://www.figma.com/developers/api#files\n   */\n  readonly format: 'JSON_REST_V1'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/ExportSettings\n */\ndeclare type ExportSettings = ExportSettingsImage | ExportSettingsSVG | ExportSettingsPDF\n/**\n * @see https://www.figma.com/plugin-docs/api/properties/VectorPath-windingrule\n */\ndeclare type WindingRule = 'NONZERO' | 'EVENODD'\n/**\n * @see https://www.figma.com/plugin-docs/api/VectorNetwork\n */\ninterface VectorVertex {\n  /**\n   * x position of the vertex relative to the position of the node.\n   */\n  readonly x: number\n  /**\n   * y position of the vertex relative to the position of the node.\n   */\n  readonly y: number\n  /**\n   * Appearance of the end of a stroke. Defaults to the node's property if left unspecified.\n   */\n  readonly strokeCap?: StrokeCap\n  /**\n   * Appearance of the join between two segments. Defaults to the node's property if left unspecified.\n   */\n  readonly strokeJoin?: StrokeJoin\n  /**\n   * Corner radius at this vertex. Defaults to the node's property if left unspecified.\n   */\n  readonly cornerRadius?: number\n  /**\n   * How two curve handles behave relative to one another. Defaults to the node's property if left unspecified.\n   */\n  readonly handleMirroring?: HandleMirroring\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/VectorNetwork\n */\ninterface VectorSegment {\n  /**\n   * The index of the vertex that starts this segment.\n   */\n  readonly start: number\n  /**\n   * The index of the vertex that ends this segment.\n   */\n  readonly end: number\n  /**\n   * The tangent on the start side of this segment. Defaults to { x: 0, y: 0 }\n   */\n  readonly tangentStart?: Vector\n  /**\n   * The tangent on the end side of this segment. Defaults to { x: 0, y: 0 }\n   */\n  readonly tangentEnd?: Vector\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/VectorNetwork\n */\ninterface VectorRegion {\n  /**\n   * Winding rule for this region.\n   */\n  readonly windingRule: WindingRule\n  /**\n   * List of loops, each of which is a list of indices of `VectorSegment`(s)\n   */\n  readonly loops: ReadonlyArray<ReadonlyArray<number>>\n  /**\n   * Array of fill paints used on this region.\n   */\n  readonly fills?: ReadonlyArray<Paint>\n  /**\n   * Style key of fill style applied to this region, if any.\n   */\n  readonly fillStyleId?: string\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/VectorNetwork\n */\ninterface VectorNetwork {\n  /**\n   * Vertices are points in the graph.\n   */\n  readonly vertices: ReadonlyArray<VectorVertex>\n  /**\n   * Segments connect vertices.\n   */\n  readonly segments: ReadonlyArray<VectorSegment>\n  /**\n   * Regions are defined by segments and specify that an area is to be filled. Defaults to [].\n   */\n  readonly regions?: ReadonlyArray<VectorRegion>\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/VectorPath\n */\ninterface VectorPath {\n  /**\n   * The winding rule for the path (same as in SVGs). This determines whether a given point in space is inside or outside the path.\n   *\n   * @remarks\n   *\n   * ```ts\n   * type WindingRule = \"NONZERO\" | \"EVENODD\"\n   * ```\n   *\n   * Winding rules work off a concept called the winding number, which tells you for a given point how many times the path winds around that point. This is described in much more detail [here](https://oreillymedia.github.io/Using_SVG/extras/ch06-fill-rule.html). This field can have three possible values:\n   * - `\"NONZERO\"`: The point is considered inside the path if the winding number is NONZERO.\n   * - `\"EVENODD\"`: The point is considered inside the path if the winding number is odd.\n   * - `\"NONE\"`: An open path won’t have a fill.\n   */\n  readonly windingRule: WindingRule | 'NONE'\n  /**\n   * A series of path commands that encodes how to draw the path.\n   *\n   * @remarks\n   *\n   * Figma supports a subset of the SVG path format. Path commands must be joined into a single string in order separated by a single space. Here are the path commands we support:\n   * - `M x y`: The absolute \"move to\" command.\n   * - `L x y`: The absolute \"line to\" command.\n   * - `Q x0 y0 x y`: The absolute \"quadratic spline to\" command. _Note_ that while Figma supports this as input, we will never generate this ourselves. All quadratic splines are converted to cubic splines internally.\n   * - `C x0 y0 x1 y1 x y`: The absolute \"cubic spline to\" command.\n   * - `Z`: The \"close path\" command.\n   */\n  readonly data: string\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/VectorPath\n */\ndeclare type VectorPaths = ReadonlyArray<VectorPath>\ninterface LetterSpacing {\n  readonly value: number\n  readonly unit: 'PIXELS' | 'PERCENT'\n}\ndeclare type LineHeight =\n  | {\n      readonly value: number\n      readonly unit: 'PIXELS' | 'PERCENT'\n    }\n  | {\n      readonly unit: 'AUTO'\n    }\ndeclare type LeadingTrim = 'CAP_HEIGHT' | 'NONE'\ndeclare type HyperlinkTarget = {\n  type: 'URL' | 'NODE'\n  value: string\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/TextListOptions\n */\ndeclare type TextListOptions = {\n  type: 'ORDERED' | 'UNORDERED' | 'NONE'\n}\ndeclare type BlendMode =\n  | 'PASS_THROUGH'\n  | 'NORMAL'\n  | 'DARKEN'\n  | 'MULTIPLY'\n  | 'LINEAR_BURN'\n  | 'COLOR_BURN'\n  | 'LIGHTEN'\n  | 'SCREEN'\n  | 'LINEAR_DODGE'\n  | 'COLOR_DODGE'\n  | 'OVERLAY'\n  | 'SOFT_LIGHT'\n  | 'HARD_LIGHT'\n  | 'DIFFERENCE'\n  | 'EXCLUSION'\n  | 'HUE'\n  | 'SATURATION'\n  | 'COLOR'\n  | 'LUMINOSITY'\ndeclare type MaskType = 'ALPHA' | 'VECTOR' | 'LUMINANCE'\n/**\n * @see https://www.figma.com/plugin-docs/api/FontName\n */\ninterface Font {\n  fontName: FontName\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/TextStyleOverrides\n */\ndeclare type TextStyleOverrideType = {\n  type: 'SEMANTIC_ITALIC' | 'SEMANTIC_WEIGHT' | 'HYPERLINK' | 'TEXT_DECORATION'\n}\ninterface StyledTextSegment {\n  /**\n   * The characters in the range of text with the same styles.\n   */\n  characters: string\n  /**\n   * Start index (inclusive) of the range of characters.\n   */\n  start: number\n  /**\n   * End index (exclusive) of the range of characters.\n   */\n  end: number\n  /**\n   * The size of the font. Has minimum value of 1.\n   */\n  fontSize: number\n  /**\n   * The font family (e.g. \"Inter\"), and font style (e.g. \"Regular\").\n   */\n  fontName: FontName\n  /**\n   * The weight of the font (e.g. 400 for \"Regular\", 700 for \"Bold\").\n   */\n  fontWeight: number\n  /**\n   * Whether the text is underlined or has a strikethrough.\n   */\n  textDecoration: TextDecoration\n  /**\n   * The text decoration style (e.g. \"SOLID\"). If the text is not underlined, this value will be null.\n   */\n  textDecorationStyle: TextDecorationStyle | null\n  /**\n   * The text decoration offset. If the text is not underlined, this value will be null.\n   */\n  textDecorationOffset: TextDecorationOffset | null\n  /**\n   * The text decoration thickness. If the text is not underlined, this value will be null.\n   */\n  textDecorationThickness: TextDecorationThickness | null\n  /**\n   * The text decoration color. If the text is not underlined, this value will be null.\n   */\n  textDecorationColor: TextDecorationColor | null\n  /**\n   * Whether the text decoration skips descenders. If the text is not underlined, this value will be null.\n   */\n  textDecorationSkipInk: boolean | null\n  /**\n   * Overrides the case of the raw characters in the text node.\n   */\n  textCase: TextCase\n  /**\n   * The spacing between the lines in a paragraph of text.\n   */\n  lineHeight: LineHeight\n  /**\n   * The spacing between the individual characters.\n   */\n  letterSpacing: LetterSpacing\n  /**\n   * The paints used to fill the area of the shape.\n   */\n  fills: Paint[]\n  /**\n   * The id of the TextStyle object that the text properties of this node are linked to\n   */\n  textStyleId: string\n  /**\n   * The id of the PaintStyle object that the fills property of this node is linked to.\n   */\n  fillStyleId: string\n  /**\n   * The list settings.\n   */\n  listOptions: TextListOptions\n  /**\n   * The spacing between list items.\n   */\n  listSpacing: number\n  /**\n   * The indentation.\n   */\n  indentation: number\n  /**\n   * The paragraph indent.\n   */\n  paragraphIndent: number\n  /**\n   * The paragraph spacing.\n   */\n  paragraphSpacing: number\n  /**\n   * A HyperlinkTarget if the text node has exactly one hyperlink, or null if the node has none.\n   */\n  hyperlink: HyperlinkTarget | null\n  /**\n   * OpenType features that have been explicitly enabled or disabled.\n   */\n  openTypeFeatures: {\n    readonly [feature in OpenTypeFeature]: boolean\n  }\n  /**\n   * The variables bound to a particular field.\n   */\n  boundVariables?: {\n    [field in VariableBindableTextField]?: VariableAlias\n  }\n  /**\n   * Overrides applied over a text style.\n   */\n  textStyleOverrides: TextStyleOverrideType[]\n}\ndeclare type Reaction = {\n  /**\n   * @deprecated Use the `actions` field instead of the `action` field.\n   */\n  action?: Action\n  actions?: Action[]\n  trigger: Trigger | null\n}\ndeclare type VariableDataType =\n  | 'BOOLEAN'\n  | 'FLOAT'\n  | 'STRING'\n  | 'VARIABLE_ALIAS'\n  | 'COLOR'\n  | 'EXPRESSION'\ndeclare type ExpressionFunction =\n  | 'ADDITION'\n  | 'SUBTRACTION'\n  | 'MULTIPLICATION'\n  | 'DIVISION'\n  | 'EQUALS'\n  | 'NOT_EQUAL'\n  | 'LESS_THAN'\n  | 'LESS_THAN_OR_EQUAL'\n  | 'GREATER_THAN'\n  | 'GREATER_THAN_OR_EQUAL'\n  | 'AND'\n  | 'OR'\n  | 'VAR_MODE_LOOKUP'\n  | 'NEGATE'\n  | 'NOT'\ninterface Expression {\n  expressionFunction: ExpressionFunction\n  expressionArguments: VariableData[]\n}\ndeclare type VariableValueWithExpression = VariableValue | Expression\ninterface VariableData {\n  type?: VariableDataType\n  resolvedType?: VariableResolvedDataType\n  value?: VariableValueWithExpression\n}\ndeclare type ConditionalBlock = {\n  condition?: VariableData\n  actions: Action[]\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/DevStatus\n */\ndeclare type DevStatus = {\n  type: 'READY_FOR_DEV' | 'COMPLETED'\n  description?: string\n} | null\n/**\n * @see https://www.figma.com/plugin-docs/api/Action\n */\ndeclare type Action =\n  | {\n      readonly type: 'BACK' | 'CLOSE'\n    }\n  | {\n      readonly type: 'URL'\n      url: string\n      openInNewTab?: boolean\n    }\n  | {\n      readonly type: 'UPDATE_MEDIA_RUNTIME'\n      readonly destinationId: string | null\n      readonly mediaAction:\n        | 'PLAY'\n        | 'PAUSE'\n        | 'TOGGLE_PLAY_PAUSE'\n        | 'MUTE'\n        | 'UNMUTE'\n        | 'TOGGLE_MUTE_UNMUTE'\n    }\n  | {\n      readonly type: 'UPDATE_MEDIA_RUNTIME'\n      readonly destinationId?: string | null\n      readonly mediaAction: 'SKIP_FORWARD' | 'SKIP_BACKWARD'\n      readonly amountToSkip: number\n    }\n  | {\n      readonly type: 'UPDATE_MEDIA_RUNTIME'\n      readonly destinationId?: string | null\n      readonly mediaAction: 'SKIP_TO'\n      readonly newTimestamp: number\n    }\n  | {\n      readonly type: 'SET_VARIABLE'\n      readonly variableId: string | null\n      readonly variableValue?: VariableData\n    }\n  | {\n      readonly type: 'SET_VARIABLE_MODE'\n      readonly variableCollectionId: string | null\n      readonly variableModeId: string | null\n    }\n  | {\n      readonly type: 'CONDITIONAL'\n      readonly conditionalBlocks: ConditionalBlock[]\n    }\n  | {\n      readonly type: 'NODE'\n      readonly destinationId: string | null\n      readonly navigation: Navigation\n      readonly transition: Transition | null\n      /**\n       * @deprecated Use `resetScrollPosition` instead.\n       */\n      readonly preserveScrollPosition?: boolean\n      readonly overlayRelativePosition?: Vector\n      readonly resetVideoPosition?: boolean\n      readonly resetScrollPosition?: boolean\n      readonly resetInteractiveComponents?: boolean\n    }\n/**\n * @see https://www.figma.com/plugin-docs/api/Transition\n */\ninterface SimpleTransition {\n  readonly type: 'DISSOLVE' | 'SMART_ANIMATE' | 'SCROLL_ANIMATE'\n  readonly easing: Easing\n  readonly duration: number\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Transition\n */\ninterface DirectionalTransition {\n  readonly type: 'MOVE_IN' | 'MOVE_OUT' | 'PUSH' | 'SLIDE_IN' | 'SLIDE_OUT'\n  readonly direction: 'LEFT' | 'RIGHT' | 'TOP' | 'BOTTOM'\n  readonly matchLayers: boolean\n  readonly easing: Easing\n  readonly duration: number\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Transition\n */\ndeclare type Transition = SimpleTransition | DirectionalTransition\ndeclare type Trigger =\n  | {\n      readonly type: 'ON_CLICK' | 'ON_HOVER' | 'ON_PRESS' | 'ON_DRAG'\n    }\n  | {\n      readonly type: 'AFTER_TIMEOUT'\n      readonly timeout: number\n    }\n  | {\n      readonly type: 'MOUSE_UP' | 'MOUSE_DOWN'\n      readonly delay: number\n    }\n  | {\n      readonly type: 'MOUSE_ENTER' | 'MOUSE_LEAVE'\n      readonly delay: number\n      readonly deprecatedVersion: boolean\n    }\n  | {\n      readonly type: 'ON_KEY_DOWN'\n      readonly device: 'KEYBOARD' | 'XBOX_ONE' | 'PS4' | 'SWITCH_PRO' | 'UNKNOWN_CONTROLLER'\n      readonly keyCodes: ReadonlyArray<number>\n    }\n  | {\n      readonly type: 'ON_MEDIA_HIT'\n      readonly mediaHitTime: number\n    }\n  | {\n      readonly type: 'ON_MEDIA_END'\n    }\n/**\n * @see https://www.figma.com/plugin-docs/api/Action\n */\ndeclare type Navigation = 'NAVIGATE' | 'SWAP' | 'OVERLAY' | 'SCROLL_TO' | 'CHANGE_TO'\n/**\n * @see https://www.figma.com/plugin-docs/api/Transition\n */\ninterface Easing {\n  readonly type:\n    | 'EASE_IN'\n    | 'EASE_OUT'\n    | 'EASE_IN_AND_OUT'\n    | 'LINEAR'\n    | 'EASE_IN_BACK'\n    | 'EASE_OUT_BACK'\n    | 'EASE_IN_AND_OUT_BACK'\n    | 'CUSTOM_CUBIC_BEZIER'\n    | 'GENTLE'\n    | 'QUICK'\n    | 'BOUNCY'\n    | 'SLOW'\n    | 'CUSTOM_SPRING'\n  readonly easingFunctionCubicBezier?: EasingFunctionBezier\n  readonly easingFunctionSpring?: EasingFunctionSpring\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/Transition\n */\ninterface EasingFunctionBezier {\n  x1: number\n  y1: number\n  x2: number\n  y2: number\n}\ninterface EasingFunctionSpring {\n  mass: number\n  stiffness: number\n  damping: number\n  initialVelocity: number\n}\ndeclare type OverflowDirection = 'NONE' | 'HORIZONTAL' | 'VERTICAL' | 'BOTH'\n/**\n * @see https://www.figma.com/plugin-docs/api/Overlay\n */\ndeclare type OverlayPositionType =\n  | 'CENTER'\n  | 'TOP_LEFT'\n  | 'TOP_CENTER'\n  | 'TOP_RIGHT'\n  | 'BOTTOM_LEFT'\n  | 'BOTTOM_CENTER'\n  | 'BOTTOM_RIGHT'\n  | 'MANUAL'\n/**\n * @see https://www.figma.com/plugin-docs/api/Overlay\n */\ndeclare type OverlayBackground =\n  | {\n      readonly type: 'NONE'\n    }\n  | {\n      readonly type: 'SOLID_COLOR'\n      readonly color: RGBA\n    }\n/**\n * @see https://www.figma.com/plugin-docs/api/Overlay\n */\ndeclare type OverlayBackgroundInteraction = 'NONE' | 'CLOSE_ON_CLICK_OUTSIDE'\n/**\n * @see https://www.figma.com/plugin-docs/api/PublishStatus\n */\ndeclare type PublishStatus = 'UNPUBLISHED' | 'CURRENT' | 'CHANGED'\ninterface ConnectorEndpointPosition {\n  position: {\n    x: number\n    y: number\n  }\n}\ninterface ConnectorEndpointPositionAndEndpointNodeId {\n  position: {\n    x: number\n    y: number\n  }\n  endpointNodeId: string\n}\ninterface ConnectorEndpointEndpointNodeIdAndMagnet {\n  endpointNodeId: string\n  magnet: 'NONE' | 'AUTO' | 'TOP' | 'LEFT' | 'BOTTOM' | 'RIGHT' | 'CENTER'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/ConnectorEndpoint\n */\ndeclare type ConnectorEndpoint =\n  | ConnectorEndpointPosition\n  | ConnectorEndpointEndpointNodeIdAndMagnet\n  | ConnectorEndpointPositionAndEndpointNodeId\n/**\n * @see https://www.figma.com/plugin-docs/api/ConnectorStrokeCap\n */\ndeclare type ConnectorStrokeCap =\n  | 'NONE'\n  | 'ARROW_EQUILATERAL'\n  | 'ARROW_LINES'\n  | 'TRIANGLE_FILLED'\n  | 'DIAMOND_FILLED'\n  | 'CIRCLE_FILLED'\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface BaseNodeMixin extends PluginDataMixin, DevResourcesMixin {\n  /**\n   * The unique identifier of a node. For example, `1:3`. The node id can be used with methods such as {@link PluginAPI.getNodeByIdAsync}, but plugins typically don't need to use this since you can usually just access a node directly.\n   *\n   * @remarks\n   *\n   * One possible use case for using the `id` is to have a serializable representation of a Figma node. To \"deserialize\" an id back into a node, pass it to {@link PluginAPI.getNodeByIdAsync}. This will return null if the node is no longer present in the document.\n   *\n   * In the URLs for Figma files, node ids are hyphenated. However, for use with the API, node ids must use colons. For example, if a Figma file URL has the node id `1-3`, you must convert it to `1:3`.\n   */\n  readonly id: string\n  /**\n   * Returns the parent of this node, if any. This property is not meant to be directly edited. To reparent, see {@link ChildrenMixin.appendChild}.\n   *\n   * @remarks\n   *\n   * The root node (i.e. `figma.root`) doesn't have a parent.\n   *\n   * Components accessed via {@link InstanceNode.getMainComponentAsync | instance.getMainComponentAsync()} or {@link InstanceNode.mainComponent | instance.mainComponent} do not always have a parent. They could be remote components or soft-deleted components.\n   */\n  readonly parent: (BaseNode & ChildrenMixin) | null\n  /**\n   * The name of the layer that appears in the layers panel. Calling `figma.root.name` will return the name, read-only, of the current file.\n   *\n   * @remarks\n   *\n   * If the node is a {@link TextNode}, the name will update automatically by default based on the `characters` property (`autoRename` is true). If you manually override the text node's name, it will set `autoRename` to false. This matches the behavior in the editor.\n   *\n   * If the node is a {@link PageNode} with no children and the name is a page divider name, it will set `isPageDivider` to true. A page divider name consists of all asterisks, all en dashes, all em dashes, or all spaces.\n   */\n  name: string\n  /**\n   * Returns true if this node has been removed since it was first accessed. If your plugin stays open for a while and stores references to nodes, you should write your code defensively and check that the nodes haven't been removed by the user.\n   *\n   * @remarks\n   *\n   * A node can be removed for any number of reasons. Some examples:\n   * - Your plugin called node.remove() on it\n   * - Someone else deleted the node using multiplayer\n   * - The user triggered an undo action and the node was removed\n   * - The user simply deleted the node\n   * - You removed all children out of a group, and the group auto-deleted itself\n   */\n  readonly removed: boolean\n  /**\n   * Returns a string representation of the node. For debugging purposes only, do not rely on the exact output of this string in production code.\n   *\n   * @remarks\n   *\n   * This currently returns a string of the form `[Node ID]` where `ID` is the id of the node. This is just for debugging convenience so the node displays something useful when converted to a string. We recommend not relying on this in production.\n   *\n   * Example:\n   * ```ts\n   * // e.g. [Node 0:5]\n   * console.log(`Current selected node ${figma.currentPage.selection[0]}`)\n   * ```\n   */\n  toString(): string\n  /**\n   * Removes this node and **all of its children** from the document.\n   *\n   * @remarks\n   *\n   * If you want to only remove this node but not its children, you will have to first move them to another node before calling `remove()`.\n   */\n  remove(): void\n  /**\n   * Sets state on the node to show a button and description when the node is selected. Clears the button and description when `relaunchData` is `{}`.\n   *\n   * Note: In Figma and Dev Mode, this shows up in the properties panel. In FigJam, this shows up in the property menu. See [here](https://www.figma.com/plugin-docs/api/properties/nodes-setrelaunchdata#example-figma-design-ui) for examples.\n   *\n   * @param data -\n   *\n   * ```ts\n   * {\n   *   [command: string]: string // description\n   * }\n   * ```\n   * e.g. `data = { myCommand: 'Short description' }`\n   * @param command - The string that will be passed as `figma.command` when the plugin is run after the button is clicked. This command must be present in the [manifest](https://www.figma.com/plugin-docs/manifest#relaunchbuttons) under one of the `relaunchButtons`, which is used to look up the name to display for the button.\n   * @param description - Up to three lines of text that will be displayed under the button to provide plugin specific information about the node or any clarification about the action the button will perform. This method will throw if description exceeds 1000 characters, but the UI will display even less (only 3 lines).\n   *\n   * @remarks\n   *\n   * Each call to this method sets entirely new relaunch data, removing any relaunch data and associated buttons/descriptions from before. To maintain buttons from a previous call one can store the button information using [setPluginData](https://www.figma.com/plugin-docs/api/properties/nodes-setplugindata/) and later fetch it with [getPluginData](https://www.figma.com/plugin-docs/api/PageNode/#getplugindata) before passing it on to `setRelaunchData`.\n   *\n   * To use this API, the plugin manifest must include a `relaunchButtons` section: see the [manifest guide](https://www.figma.com/plugin-docs/manifest#relaunchbuttons) for more information.\n   *\n   * Note: Note that if the `command` passed to this method does not match a command in the manifest, nothing will be displayed. Similarly if the name of a command in the manifest changes or is removed, then all buttons with that command will disappear. This behavior can be used to remove buttons when a particular action is no longer supported by the plugin.\n   *\n   * In Figma design, the relaunch data can also be placed on the {@link PageNode} or {@link DocumentNode}, to show a button and description when nothing is selected. Relaunch buttons added to the {@link PageNode} will be displayed on that page, combined with buttons from the {@link DocumentNode} that show on every page. This is not supported in FigJam.\n   *\n   * ## Examples\n   *\n   * ```ts title=\"manifest.json\"\n   * // With the following in the manifest:\n   * \"relaunchButtons\": [\n   *   {\"command\": \"edit\", \"name\": \"Edit shape\"},\n   *   {\"command\": \"open\", \"name\": \"Open Shaper\", \"multipleSelection\": true}\n   * ]\n   * ```\n   *\n   * ```ts title=\"code.ts\"\n   * // Add two buttons (ordered by the above array from the manifest):\n   * // * an \"Edit shape\" button with a description of \"Edit this trapezoid\n   * //   with Shaper\" that runs the plugin with `figma.command === 'edit'`.\n   * // * an \"Open Shaper\" button with no description that runs the plugin with\n   * //   `figma.command === 'open'`.\n   * node.setRelaunchData({ edit: 'Edit this trapezoid with Shaper', open: '' })\n   *\n   * // With the following in the manifest:\n   * \"relaunchButtons\": [\n   *   {\"command\": \"relaunch\", \"name\": \"Run again\", \"multipleSelection\": true}\n   * ]\n   *\n   * // Pass an empty description to show only a button\n   * node.setRelaunchData({ relaunch: '' })\n   *\n   * // Remove the button and description\n   * node.setRelaunchData({})\n   * ```\n   *\n   * ### Example Figma Design UI\n   * ![Relaunch UI in Figma Design](https://www.figma.com/plugin-docs/img/relaunch_ui_design.png)\n   *\n   * ### Example FigJam UI\n   * ![Relaunch UI in FigJam](https://www.figma.com/plugin-docs/img/relaunch_ui_figjam.png)\n   */\n  setRelaunchData(data: { [command: string]: string }): void\n  /**\n   * Retreives the reluanch data stored on this node using {@link BaseNodeMixin.setRelaunchData}\n   */\n  getRelaunchData(): {\n    [command: string]: string\n  }\n  /**\n   * Returns true if Figma detects that a node is an asset, otherwise returns false. An asset is is either an icon or a raster image.\n   *\n   * This property is useful if you’re building a [plugin for code generation](https://www.figma.com/plugin-docs/codegen-plugins).\n   *\n   * Note: This property uses a set of heuristics to determine if a node is an asset. At a high level an icon is a small vector graphic and an image is a node with an image fill.\n   */\n  readonly isAsset: boolean\n  /**\n   * Resolves to a JSON object of CSS properties of the node. This is the same CSS that Figma shows in the inspect panel and is helpful if you are building a [plugin for code generation](https://www.figma.com/plugin-docs/codegen-plugins).\n   */\n  getCSSAsync(): Promise<{\n    [key: string]: string\n  }>\n  /**\n   * Returns the top-most frame that contains this node. If the node is not inside a frame, this will return undefined.\n   *\n   * Note: This function will only work in Figma Design and will throw an error if called in FigJam or Slides.\n   */\n  getTopLevelFrame(): FrameNode | undefined\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface PluginDataMixin {\n  /**\n   * Retrieves custom information that was stored on this node or style using {@link PluginDataMixin.setPluginData}. If there is no data stored for the provided key, an empty string is returned.\n   */\n  getPluginData(key: string): string\n  /**\n   * Lets you store custom information on any node or style, **private** to your plugin. The total size of your entry (`pluginId`, `key`, `value`) cannot exceed 100 kB.\n   *\n   * @param key - The key under which to store the data. This is similar to writing to a plain object via `obj[key] = value`.\n   * @param value - The data you want to store. If you want to store a value type other than a string, encode it as a JSON string first via `JSON.stringify` and `JSON.parse`. If you set the value to the empty string (\"\"), the key/value pair is removed.\n   *\n   * @remarks\n   *\n   * The data is specific to your plugin ID. Plugins with other IDs won't be able to read this data. You can retrieve it later by calling `getPluginData` with the same key. To find all data stored on a node or style by your plugin use `getPluginDataKeys`.\n   *\n   * Caution: ⚠ The data is stored privately for **stability**, not **security**. It prevents other plugins from accessing with your data. It does not, however, prevent users from seeing the data given sufficient effort. For example, they could export the document as a .fig file and try to decode it.\n   *\n   * Caution: ⚠ Data will become inaccessible if your plugin ID changes.\n   *\n   *\n   * Caution: ⚠ Total entry size cannot exceed 100 kB.\n   */\n  setPluginData(key: string, value: string): void\n  /**\n   * Retrieves a list of all keys stored on this node or style using using {@link PluginDataMixin.setPluginData}. This enables iterating through all data stored privately on a node or style by your plugin.\n   */\n  getPluginDataKeys(): string[]\n  /**\n   * Retrieves custom information that was stored on this node or style using {@link PluginDataMixin.setSharedPluginData}. If there is no data stored for the provided namespace and key, an empty string is returned.\n   */\n  getSharedPluginData(namespace: string, key: string): string\n  /**\n   * Lets you store custom information on any node or style, **public** to all plugins. The total size of your entry (`namespace`, `key`, `value`) cannot exceed 100 kB.\n   *\n   * @param namespace - A unique string to identify your plugin and avoid key collisions with other plugins. The namespace must be at least 3 alphanumeric characters.\n   * @param key - The key under which to store the data. This is similar to writing to a plain object via `obj[key] = value`.\n   * @param value - The data you want to store. If you want to store a value type other than a string, encode it as a JSON string first via `JSON.stringify` and `JSON.parse`. If you set the value to the empty string (\"\"), the key/value pair is removed.\n   *\n   * @remarks\n   *\n   * This lets you store custom information on any node or style. You can retrieve it later by calling {@link PluginDataMixin.getSharedPluginData} with the same namespace and key. To find all data stored on a node or style in a particular namespace, use {@link PluginDataMixin.getSharedPluginDataKeys}.\n   *\n   * Any data you write using this API will be readable by any plugin. The intent is to allow plugins to interoperate with each other. Use {@link PluginDataMixin.setPluginData} instead if you don't want other plugins to be able to read your data.\n   *\n   * You must also provide a `namespace` argument to avoid key collisions with other plugins. This argument is mandatory to prevent multiple plugins from using generic key names like `data` and overwriting one another. We recommend passing a value that identifies your plugin. This namespace can be given to authors of other plugins so that they can read data from your plugin.\n   *\n   * Caution: ⚠ Total entry size cannot exceed 100 kB.\n   */\n  setSharedPluginData(namespace: string, key: string, value: string): void\n  /**\n   * Retrieves a list of all keys stored on this node or style using {@link PluginDataMixin.setSharedPluginData}. This enables iterating through all data stored in a given namespace.\n   */\n  getSharedPluginDataKeys(namespace: string): string[]\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface DevResourcesMixin {\n  /**\n   *\n   * Gets all of the dev resources on a node. This includes any inherited dev resources from components and component sets.\n   *\n   * @param options - An optional parameter to include getting all of the dev resources on the children of the node. Defaults to false.\n   */\n  getDevResourcesAsync(options?: { includeChildren?: boolean }): Promise<DevResourceWithNodeId[]>\n  /**\n   *\n   * Adds a dev resource to a node. This will fail if the node already has a dev resource with the same url.\n   *\n   * @param url - The url of the dev resource.\n   * @param name - The name of the dev resource. If not provided, Figma will get the name from the url.\n   *\n   */\n  addDevResourceAsync(url: string, name?: string): Promise<void>\n  /**\n   *\n   * Edits a dev resource on a node. This will fail if the node does not have a dev resource with the same url.\n   *\n   * @param currentUrl - The current url of the dev resource.\n   * @param newValue - The new name and/or url of the dev resource.\n   *\n   */\n  editDevResourceAsync(\n    currentUrl: string,\n    newValue: {\n      name?: string\n      url?: string\n    },\n  ): Promise<void>\n  /**\n   *\n   * Deletes a dev resource on a node. This will fail if the node does not have a dev resource with the same url.\n   *\n   * @param url - The url of the dev resource.\n   */\n  deleteDevResourceAsync(url: string): Promise<void>\n  /**\n   *\n   * Caution: This is a private API only available to [Figma partners](https://www.figma.com/partners/)\n   */\n  setDevResourcePreviewAsync(url: string, preview: PlainTextElement): Promise<void>\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface DevStatusMixin {\n  /**\n   * Whether the node is marked [ready for development](https://help.figma.com/hc/en-us/articles/15023124644247-Guide-to-Dev-Mode#01H8CR3K6V9S02RK503QCX0367) or [completed](https://help.figma.com/hc/en-us/articles/15023124644247-Guide-to-Dev-Mode#01H8CR3K6V9S02RK503QCX0367).\n   *\n   * There are some restrictions on how `devStatus` can be set:\n   * - Can only be set on a node directly under a page or section\n   * - Cannot be set on a node that is inside another node that already has a `devStatus`\n   */\n  devStatus: DevStatus\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface SceneNodeMixin extends ExplicitVariableModesMixin {\n  /**\n   * Whether the node is visible or not. Does not affect a plugin's ability to access the node.\n   *\n   * @remarks\n   *\n   * The value that this property returns is independent from the node's parent. i.e.\n   * - The node isn't necessarily visible if this is `.visible === true`.\n   * - The node isn't necessarily invisible if this is `.visible === false`.\n   * - An object is visible if `.visible == true` for itself and **all** its parents.\n   */\n  visible: boolean\n  /**\n   * Whether the node is locked or not, preventing certain user interactions on the canvas such as selecting and dragging. Does not affect a plugin's ability to write to those properties.\n   *\n   * @remarks\n   *\n   * The value that this property returns is independent from the node's parent. i.e.\n   * - The node isn't necessarily locked if this is `.locked === true`.\n   * - The node isn't necessarily unlocked if this is `.locked === false`.\n   * - An object is locked if `.locked == true` for itself or **any** of its parents.\n   */\n  locked: boolean\n  /**\n   * An array of nodes that are \"stuck\" to this node. In FigJam, stamps, highlights, and some widgets can \"stick\"\n   * to other nodes if they are dragged on top of another node.\n   *\n   * @remarks\n   *\n   * This property is only available in FigJam.\n   *\n   *\n   * In FigJam a stickable host that means that stickables, like `'STAMP'` nodes, are allowed to attach themselves to the node. If the stickable host moves all nodes that are in `stuckNodes` move along with it.\n   */\n  readonly stuckNodes: SceneNode[]\n  /**\n   * An array of `ConnectorNode`s that are attached to a node.\n   */\n  readonly attachedConnectors: ConnectorNode[]\n  /**\n   * All component properties that are attached on this node. A node can only have `componentPropertyReferences` if it is a component sublayer or an instance sublayer. It will be `null` otherwise. The value in the key-value pair refers to the component property name as returned by `componentPropertyDefinitions` on the containing component, component set or main component (for instances).\n   */\n  componentPropertyReferences:\n    | {\n        [nodeProperty in 'visible' | 'characters' | 'mainComponent']?: string\n      }\n    | null\n  /**\n   * The variables bound to a particular field on this node. Please see the [Working with Variables](https://www.figma.com/plugin-docs/working-with-variables) guide for how to get and set variable bindings.\n   */\n  readonly boundVariables?: {\n    readonly [field in VariableBindableNodeField]?: VariableAlias\n  } & {\n    readonly [field in VariableBindableTextField]?: VariableAlias[]\n  } & {\n    readonly fills?: VariableAlias[]\n    readonly strokes?: VariableAlias[]\n    readonly effects?: VariableAlias[]\n    readonly layoutGrids?: VariableAlias[]\n    readonly componentProperties?: {\n      readonly [propertyName: string]: VariableAlias\n    }\n    readonly textRangeFills?: VariableAlias[]\n  }\n  /**\n   * Binds the provided `field` on this node to the given variable. Please see the [Working with Variables](https://www.figma.com/plugin-docs/working-with-variables) guide for how to get and set variable bindings.\n   *\n   * @deprecated Use `setBoundVariable(VariableBindableNodeField, Variable)` instead. This function will throw an exception if the plugin manifest contains `\"documentAccess\": \"dynamic-page\"`.\n   */\n  setBoundVariable(\n    field: VariableBindableNodeField | VariableBindableTextField,\n    variableId: string | null,\n  ): void\n  /**\n   * Binds the provided `field` on this node to the given variable. Please see the [Working with Variables](https://www.figma.com/plugin-docs/working-with-variables) guide for how to get and set variable bindings.\n   *\n   * If `null` is provided as the variable, the given `field` will be unbound from any variables.\n   *\n   * @param field - The field to bind the variable to.\n   * @param variable - The variable to bind to the field. If `null` is provided, the field will be unbound from any variables. Make sure to pass a Variable object or null; passing a variable ID is deprecated.\n   */\n  setBoundVariable(\n    field: VariableBindableNodeField | VariableBindableTextField,\n    variable: Variable | null,\n  ): void\n  /**\n   * An object, keyed by field, returning any variables that match the raw value of that field for the mode of the node (or the default variable value if no mode is set)\n   *\n   * @remarks\n   *\n   * Inferred variables are only returned for a field when it is not using a [bound variable](https://www.figma.com/plugin-docs/api/node-properties/#boundvariables).\n   *\n   * Variables can be inferred from:\n   * - The collections of variables used in the file\n   * - Variables from subscribed libraries, provided the variable is used in the file\n   *\n   * Variables can only be inferred when there is a single variable that matches the raw value used for the scope of the variable.\n   * - i.e. For a property set to width: 100px, where there are two variables set to a value of 100 with the default scope, a value cannot be inferred as there are two matches.\n   * - i.e. For a property set to width: 100px, where there is a variable set to 100 with a scope of \"Width and height\" and a variable set to 100 with a scope of \"Corner radius\", a value can be inferred as there is a single match for the given scope.\n   *\n   * Inferred variables for fills and strokes return a list of results where the index matches that of node.fills and node.strokes.\n   * - i.e. node.inferredVariables.fills[0] holds the inferred variables for node.fills[0]\n   */\n  readonly inferredVariables?: {\n    readonly [field in VariableBindableNodeField]?: VariableAlias[]\n  } & {\n    readonly fills?: VariableAlias[][]\n    readonly strokes?: VariableAlias[][]\n  }\n  /**\n   * The resolved mode for this node for each variable collection in this file.\n   *\n   * @remarks\n   *\n   * The set of resolved modes on a node includes the explicitly set modes on the node, as well as the explicitly set modes on ancestors of the node. By default, nodes [automatically inherit](https://help.figma.com/hc/en-us/articles/15343816063383-Modes-for-variables#Auto_mode) the modes of their parents.\n   *\n   * ```ts title=\"explicitVariableModes vs resolvedVariableModes\"\n   * // Create two collections with two modes each\n   * const collection1 = figma.variables.createVariableCollection(\"Collection 1\")\n   * const collection1Mode1Id = collection1.modes[0].modeId\n   * const collection1Mode2Id = collection1.addMode('Mode 2')\n   * const collection2 = figma.variables.createVariableCollection(\"Collection 2\")\n   * const collection2Mode1Id = collection2.modes[0].modeId\n   * const collection2Mode2Id = collection2.addMode('Mode 2')\n   *\n   * const parentFrame = figma.createFrame()\n   * const childFrame = figma.createFrame()\n   * parentFrame.appendChild(childFrame)\n   *\n   * parentFrame.setExplicitVariableModeForCollection(\n   *   collection1,\n   *   collection1Mode2Id\n   * )\n   * childFrame.setExplicitVariableModeForCollection(\n   *   collection2,\n   *   collection2Mode1Id\n   * )\n   *\n   * // Example output (only collection2 is present):\n   * // { 'VariableCollectionId:1:3': '1:2' }\n   * console.log(childFrame.explicitVariableModes);\n   *\n   * // Example output (both collections are present):\n   * // { 'VariableCollectionId:1:2': '1:1', 'VariableCollectionId:1:3': '1:2' }\n   * console.log(childFrame.resolvedVariableModes);\n   * ```\n   */\n  resolvedVariableModes: {\n    [collectionId: string]: string\n  }\n}\ndeclare type VariableBindableNodeField =\n  | 'height'\n  | 'width'\n  | 'characters'\n  | 'itemSpacing'\n  | 'paddingLeft'\n  | 'paddingRight'\n  | 'paddingTop'\n  | 'paddingBottom'\n  | 'visible'\n  | 'topLeftRadius'\n  | 'topRightRadius'\n  | 'bottomLeftRadius'\n  | 'bottomRightRadius'\n  | 'minWidth'\n  | 'maxWidth'\n  | 'minHeight'\n  | 'maxHeight'\n  | 'counterAxisSpacing'\n  | 'strokeWeight'\n  | 'strokeTopWeight'\n  | 'strokeRightWeight'\n  | 'strokeBottomWeight'\n  | 'strokeLeftWeight'\n  | 'opacity'\ndeclare type VariableBindableTextField =\n  | 'fontFamily'\n  | 'fontSize'\n  | 'fontStyle'\n  | 'fontWeight'\n  | 'letterSpacing'\n  | 'lineHeight'\n  | 'paragraphSpacing'\n  | 'paragraphIndent'\ndeclare type VariableBindablePaintField = 'color'\ndeclare type VariableBindablePaintStyleField = 'paints'\ndeclare type VariableBindableColorStopField = 'color'\ndeclare type VariableBindableEffectField = 'color' | 'radius' | 'spread' | 'offsetX' | 'offsetY'\ndeclare type VariableBindableEffectStyleField = 'effects'\ndeclare type VariableBindableLayoutGridField = 'sectionSize' | 'count' | 'offset' | 'gutterSize'\ndeclare type VariableBindableGridStyleField = 'layoutGrids'\ndeclare type VariableBindableComponentPropertyField = 'value'\ndeclare type VariableBindableComponentPropertyDefinitionField = 'defaultValue'\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface StickableMixin {\n  /**\n   * If this node is stuck to another node this property returns that node or null.\n   *\n   * @remarks\n   *\n   * This property is only available in FigJam.\n   */\n  stuckTo: SceneNode | null\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface ChildrenMixin {\n  /**\n   * The list of children, sorted back-to-front. That is, the first child in the array is the bottommost layer on the screen, and the last child in the array is the topmost layer.\n   *\n   * If the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this property.\n   *\n   * @remarks\n   *\n   * This array can be read like and iterated like a regular array. However, calling this property always returns a new array, and both the property and the new array are read-only.\n   *\n   * As such, this property cannot be assigned to, and the array cannot be modified directly (it wouldn't do anything). Instead, use {@link ChildrenMixin.appendChild}, {@link ChildrenMixin.insertChild} or {@link BaseNodeMixin.remove}.\n   *\n   * Note: If you are curious, the reason why inserting children has to be done via API calls is because our internal representation for the layer tree uses [fractional indexing](https://www.figma.com/blog/multiplayer-editing-in-figma/) and {@link ChildrenMixin.insertChild} performs that conversion.\n   */\n  readonly children: ReadonlyArray<SceneNode>\n  /**\n   * Adds a new child to the end of the {@link ChildrenMixin.children} array. That is, visually on top of all other children.\n   *\n   * If the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function.\n   *\n   * @remarks\n   *\n   * Reparenting nodes is subject to many restrictions. For example, some nodes cannot be moved, others would break the document if moved. Below are possible exceptions that can be thrown if the operation is invalid.\n   *\n   * If this is called on an auto-layout frame, calling this function can cause this layer to be resized and children to be moved.\n   */\n  appendChild(child: SceneNode): void\n  /**\n   * Adds a new child at the specified index in the {@link ChildrenMixin.children} array.\n   *\n   * If the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function.\n   *\n   * @param index - Determines where the new layer gets inserted. For example, suppose a group has layers A, B, C, where C is the top-most layer.\n   * - `insertChild(0, D)` gives a group with layers **D**, A, B, C\n   * - `insertChild(1, D)` gives a group with layers A, **D**, B, C\n   * - `insertChild(2, D)` gives a group with layers A, B, **D**, C\n   * - `insertChild(3, D)` gives a group with layers A, B, C, **D**\n   * - `insertChild(4, D)` throws an error since the group originally only has 3 children\n   *\n   * @param child - The node to be inserted.\n   *\n   * @remarks\n   *\n   * Reparenting nodes is subject to many restrictions. For example, some nodes cannot be moved, others would break the document if moved. Below are possible exceptions that can be thrown if the operation is invalid.\n   *\n   * If this is called on an auto-layout frame, calling this function can cause this layer to be resized and children to be moved.\n   */\n  insertChild(index: number, child: SceneNode): void\n  /**\n   * Searches the immediate children of this node (i.e. not including the children's children). Returns all nodes for which `callback` returns true.\n   *\n   * If the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function.\n   *\n   * @param callback - A function that evaluates whether to return the provided `node`. If this argument is omitted, `findChildren` returns `node.children`.\n   *\n   * @remarks\n   *\n   * Example: find all frames that are immediate child of the current page.\n   * ```ts\n   * const childFrames = figma.currentPage.findChildren(n => n.type === \"FRAME\")\n   * ```\n   */\n  findChildren(callback?: (node: SceneNode) => boolean): SceneNode[]\n  /**\n   * Searches the immediate children of this node (i.e. not including the children's children). Returns the first node for which `callback` returns true.\n   *\n   * If the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function.\n   *\n   * @param callback - A function that evaluates whether to return the provided `node`.\n   *\n   * @remarks\n   *\n   * This function returns `null` if no matching node is found.\n   *\n   * Example: find the first frame that is an immediate child of the current page.\n   * ```ts\n   * const firstChildFrame = figma.currentPage.findChild(n => n.type === \"FRAME\")\n   * ```\n   */\n  findChild(callback: (node: SceneNode) => boolean): SceneNode | null\n  /**\n   * Searches this entire subtree (this node's children, its children's children, etc). Returns all nodes for which `callback` returns true.\n   *\n   * If the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function.\n   *\n   * @param callback - A function that evaluates whether to return the provided `node`. If this argument is omitted, `findAll` returns all nodes in the subtree.\n   *\n   * @remarks\n   *\n   * Nodes are included in **back-to-front** order. Parents always appear before their children, and children appear in same relative order before their children, and children appear in same relative order as in the {@link ChildrenMixin.children} array.\n   *\n   * This traversal method is known as [\"pre-order traversal\"](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR)).\n   *\n   * Note that the node this method is called on is **not included**.\n   *\n   * Example: find all nodes whose name is \"Color\":\n   * ```ts\n   * const colors = figma.currentPage.findAll(n => n.name === \"Color\")\n   * ```\n   *\n   * Caution: ⚠ Large documents in Figma can have tens of thousands of nodes. Be careful using this function as it could be very slow.\n   * If you only need to search immediate children, it is much faster to call `node.children.filter(callback)` or `node.findChildren(callback)`.\n   * Please refer to our [recommendations](https://www.figma.com/plugin-docs/accessing-document#optimizing-traversals) for how to optimize document traversals.\n   */\n  findAll(callback?: (node: SceneNode) => boolean): SceneNode[]\n  /**\n   * Searches this entire subtree (this node's children, its children's children, etc). Returns the first node for which `callback` returns true.\n   *\n   * If the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function.\n   *\n   * @param callback - A function that evaluates whether to return the provided `node`.\n   *\n   * @remarks\n   * This function returns `null` if no matching node is found. The traversal order is the same as in {@link ChildrenMixin.findAll}.\n   *\n   * Note that the node this method is called on is **not included**.\n   *\n   * Example: find one node whose name is \"Template\":\n   * ```ts\n   * const template = figma.currentPage.findOne(n => n.name === \"Template\")\n   * ```\n   *\n   * Caution: ⚠ Large documents in Figma can have tens of thousands of nodes. Be careful using this function as it could be very slow.\n   * If you only need to search immediate children, it is much faster to call `node.children.find(callback)` or `node.findChild(callback)`.\n   * Please refer to our [recommendations](https://www.figma.com/plugin-docs/accessing-document#optimizing-traversals) for how to optimize document traversals.\n   */\n  findOne(callback: (node: SceneNode) => boolean): SceneNode | null\n  /**\n   * Searches this entire subtree (this node's children, its children's children, etc). Returns all nodes that satisfy all of specified criteria.\n   *\n   * If the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function.\n   *\n   * @param criteria - An object of type {@link FindAllCriteria} that specifies the search criteria. The following criterias are currently supported:\n   * - Nodes with specific {@link NodeType | types}\n   * - Nodes with {@link PluginDataMixin.getSharedPluginData | SharedPluginData } by their namespace and keys.\n   * - Nodes with {@link PluginDataMixin.getPluginData | PluginData } by their keys.\n   * - A combination of any of the above.\n   *\n   * @remarks\n   *\n   * This is a faster but more limited search compared to {@link ChildrenMixin.findAll}, which lets you search nodes based on any logic you can include in a callback.\n   *\n   * When paired with [`figma.skipInvisibleInstanceChildren = true`](https://www.figma.com/plugin-docs/api/properties/figma-skipinvisibleinstancechildren), this method can be hundreds of times faster in large documents with tens of thousands of nodes.\n   *\n   * The return value is narrowly typed to match the provided `types`, which makes it much easier to use node-type-specific properties. For example, `node.findAllWithCriteria({ types: ['TEXT'] })` will return `TextNode[]` instead of the more generic `SceneNode[]` from {@link ChildrenMixin.findAll}.\n   *\n   * Nodes are included in **back-to-front** order, which is the same order as in {@link ChildrenMixin.findAll}. Parents always appear before their children, and children appear in same relative order before their children, and children appear in same relative order as in the {@link ChildrenMixin.children} array.\n   *\n   * This traversal method is known as [\"pre-order traversal\"](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR)).\n   *\n   * Note: The node this method is called on is **not included**.\n   *\n   * ## Example Usages\n   *\n   * ### Find by node type\n   * ```ts\n   * // Find all component and component set nodes in the current\n   * // page\n   * const nodes = figma.currentPage.findAllWithCriteria({\n   *   types: ['COMPONENT', 'COMPONENT_SET']\n   * })\n   *\n   * // Find all text nodes in the current page\n   * const nodes = figma.currentPage.findAllWithCriteria({\n   *   types: ['TEXT']\n   * })\n   * ```\n   *\n   * ### Find by plugin data\n   * ```ts\n   * // Find all nodes in the current page with plugin data\n   * // for the current plugin.\n   * const nodes = figma.currentPage.findAllWithCriteria({\n   *   pluginData: {}\n   * })\n   *\n   * // Find all nodes in the current page with plugin data\n   * // for the current plugin with keys \"a\" or \"b\"\n   * const nodes = figma.currentPage.findAllWithCriteria({\n   *   pluginData: {\n   *     keys: [\"a\", \"b\"]\n   *   }\n   * })\n   * ```\n   *\n   * ### Find by shared plugin data\n   * ```ts\n   * // Find all nodes in the current page with shared plugin data\n   * // stored on the \"bar\" namespace\n   * const nodes = figma.currentPage.findAllWithCriteria({\n   *   sharedPluginData: {\n   *     namespace: \"bar\"\n   *   }\n   * })\n   *\n   * // Find all nodes in the current page with shared plugin data\n   * // stored on the \"bar\" namespace and keys \"a\" or \"b\"\n   * const nodes = figma.currentPage.findAllWithCriteria({\n   *   sharedPluginData: {\n   *     namespace: \"bar\",\n   *     keys: [\"a\", \"b\"]\n   *   }\n   * })\n   * ```\n   *\n   * ### Combining criterias\n   *\n   * You can combine multiple criterias for further narrow your search.\n   *\n   * ```ts\n   * // Find all text nodes in the current page with plugin data\n   * // for the current plugin\n   * const nodes = figma.currentPage.findAllWithCriteria({\n   *   types: [\"TEXT\"],\n   *   pluginData: {}\n   * })\n   *\n   * // Find all text nodes in the current page with shared plugin data\n   * // stored on the \"bar\" namespace\n   * const nodes = figma.currentPage.findAllWithCriteria({\n   *   types: [\"TEXT\"],\n   *   sharedPluginData: {\n   *     namespace: \"bar\"\n   *   }\n   * })\n   * ```\n   */\n  findAllWithCriteria<T extends NodeType[]>(\n    criteria: FindAllCriteria<T>,\n  ): Array<\n    {\n      type: T[number]\n    } & SceneNode\n  >\n  /**\n   * Searches this entire subtree (this node's children, its children's children, etc). Returns all widget nodes that match the provided `widgetId`.\n   *\n   * If the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function.\n   *\n   * @param widgetId - The widget ID to search for, which represents unique identifier for the widget.\n   *\n   * @remarks\n   *\n   * `node.widgetId` is not to be confused with `node.id`, which is the unique identifier for the node on the canvas. In other words, if you clone a widget, the cloned widget will have a matching `widgetId` but a different `id`.\n   */\n  findWidgetNodesByWidgetId(widgetId: string): Array<WidgetNode>\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface ConstraintMixin {\n  /**\n   * Constraints of this node relative to its containing {@link FrameNode}, if any.\n   *\n   * @remarks\n   *\n   * Not all node types have a constraint property. In particular, Group and BooleanOperation nodes do not have a constraint property themselves. Instead, resizing a frame applies the constraints on the children of those nodes.\n   */\n  constraints: Constraints\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface DimensionAndPositionMixin {\n  /**\n   * The position of the node. Identical to `relativeTransform[0][2]`.\n   *\n   * @remarks\n   *\n   * This value is automatically computed in children of auto-layout frames. Setting this property for these auto-layout children will no-op.\n   */\n  x: number\n  /**\n   * The position of the node. Identical to `relativeTransform[1][2]`.\n   *\n   * @remarks\n   *\n   * This value is automatically computed in children of auto-layout frames. Setting this property for these auto-layout children will no-op.\n   */\n  y: number\n  /**\n   * The width of the node. Use a resizing method to change this value.\n   */\n  readonly width: number\n  /**\n   * The height of the node. Use a resizing method to change this value.\n   */\n  readonly height: number\n  /**\n   * Applicable only to auto-layout frames and their direct children. Value must be positive. Set to `null` to remove `minWidth`.\n   */\n  minWidth: number | null\n  /**\n   * Applicable only to auto-layout frames and their direct children. Value must be positive. Set to `null` to remove `maxWidth`.\n   */\n  maxWidth: number | null\n  /**\n   * Applicable only to auto-layout frames and their direct children. Value must be positive. Set to null to remove `minHeight`.\n   */\n  minHeight: number | null\n  /**\n   * Applicable only to auto-layout frames and their direct children. Value must be positive. Set to `null` to remove `maxHeight`.\n   */\n  maxHeight: number | null\n  /**\n   * The position of a node relative to its **containing parent** as a {@link Transform} matrix. Not used for scaling, see `width` and `height` instead. Read the details page to understand the nuances of this property.\n   *\n   * @remarks\n   *\n   * ### Scale\n   *\n   * The `relativeTransform` is **not** used for scaling a node. The transform always has unit axes. That is, `sqrt(m00^2 + m10^2) == sqrt(m01^2 + m11^2) == 1`. In order to set the size of a node, use {@link LayoutMixin.resize} or {@link LayoutMixin.resizeWithoutConstraints}.\n   *\n   * Note: If you have a background in computer graphics, you may find it odd that we use the transform matrix in such a manner. This is because in 2D UI design, it's rare that you would want to scale the children when resizing a frame. And even if you did, it would be through more nuanced constraint settings that aren't captured by a transformation matrix.\n   *\n   * Also, if nodes had both a `width` and a separate `m00` scale property, it would be confusing to the users which one they're changing, especially during interactions like dragging.\n   *\n   * ### Container parent\n   *\n   * The relative transform of a node is shown relative to its container parent, which includes canvas nodes, frame nodes, component nodes, and instance nodes. Just like in the properties panel, it is **not** relative to its direct parent if the parent is a group or a boolean operation.\n   *\n   * Example 1: In the following hierarchy, the relative transform of `rectangle` is relative to `page` (which is just its position on the canvas).\n   * ```text\n   * page\n   *   group\n   *     rectangle\n   * ```\n   *\n   * Example 2: In the following hierarchy, the relative transform of `rectangle` is relative to `frame`.\n   * ```text\n   * page\n   *   frame\n   *     boolean operation\n   *       rectangle\n   * ```\n   *\n   * One implication is that to calculate the absolute position of a node, you have to either use the {@link DimensionAndPositionMixin.absoluteTransform} property or multiply relative transform matrices while traversing up the node hierarchy while ignoring groups and boolean operations.\n   *\n   * Note: Why this complication? We do it this way because groups and boolean operations automatically resize to fit their children. While you _can_ set the relative transform of a group to move it, it's a property derived from the position and size of its children.\n   * If the relative transform was always relative to it’s immediate parent, you could get into confusing situations where moving a layer inside a group by setting the relative transform changes the position of the parent, which then requires changing the relative transform of the child in order to preserve its on-screen position!\n   *\n   * ### Skew\n   *\n   * While it is possible to skew a layer by setting `m00`, `m01`, `m10`, `m11` to the right values, be aware that the skew will not be surfaced in the properties panel and may be confusing to the user dealing with a skewed node.\n   *\n   * ### Auto-layout frames\n   *\n   * The translation components `m02` and `m12` of the transform matrix is automatically computed in children of auto-layout frames. Setting `relativeTransform` on those layers will ignore the translation components, but do keep the rotation components.\n   */\n  relativeTransform: Transform\n  /**\n   * The position of a node relative to its **containing page** as a {@link Transform} matrix.\n   */\n  readonly absoluteTransform: Transform\n  /**\n   * The bounds of the node that does not include rendered properties like drop shadows or strokes. The `x` and `y` inside this property represent the absolute position of the node on the page.\n   */\n  readonly absoluteBoundingBox: Rect | null\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface LayoutMixin\n  extends DimensionAndPositionMixin,\n    AutoLayoutChildrenMixin,\n    GridChildrenMixin {\n  /**\n   * The actual bounds of a node accounting for drop shadows, thick strokes, and anything else that may fall outside the node's regular bounding box defined in `x`, `y`, `width`, and `height`. The `x` and `y` inside this property represent the absolute position of the node on the page. This value will be `null` if the node is invisible.\n   */\n  readonly absoluteRenderBounds: Rect | null\n  /**\n   * When toggled, causes the layer to keep its proportions when the user resizes it via the properties panel.\n   *\n   * @deprecated Use `targetAspectRatio`, `lockAspectRatio`, and `unlockAspectRatio` instead.\n   */\n  constrainProportions: boolean\n  /**\n   * The rotation of the node in degrees. Returns values from -180 to 180. Identical to `Math.atan2(-m10, m00)` in the {@link DimensionAndPositionMixin.relativeTransform} matrix. When setting `rotation`, it will also set `m00`, `m01`, `m10`, `m11`.\n   *\n   * @remarks\n   *\n   * The rotation is with respect to the top-left of the object. Therefore, it is independent from the position of the object. If you want to rotate with respect to the center (or any arbitrary point), you can do so via matrix transformations and {@link DimensionAndPositionMixin.relativeTransform}.\n   */\n  rotation: number\n  /**\n   * Applicable only on auto-layout frames, their children, and text nodes. This is a shorthand for setting {@link AutoLayoutChildrenMixin.layoutGrow}, {@link AutoLayoutChildrenMixin.layoutAlign}, {@link AutoLayoutMixin.primaryAxisSizingMode}, and {@link AutoLayoutMixin.counterAxisSizingMode}. This field maps directly to the \"Horizontal sizing\" dropdown in the Figma UI.\n   *\n   * @remarks\n   *\n   * `\"HUG\"` is only valid on auto-layout frames and text nodes. `\"FILL\"` is only valid on auto-layout children. Setting these values when they don't apply will throw an error.\n   *\n   * ```ts title=\"Setting layoutSizingHorizontal on an auto-layout frame\"\n   * const parentFrame = figma.createFrame()\n   * const child2 = figma.createFrame()\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.appendChild(child2)\n   * parentFrame.layoutMode = 'VERTICAL'\n   * // Make the second child twice as wide as the first\n   * child2.resize(200, 100)\n   *\n   * // Parent frame (child 2 is clipped)\n   * // +-------------+\n   * // |+-----------+|\n   * // ||           ||\n   * // ||  Child 1  ||\n   * // ||           ||\n   * // |+-----------+|\n   * // |+------------|\n   * // ||            |\n   * // ||  Child 2   |\n   * // ||            |\n   * // |+------------|\n   * // +-------------+\n   *\n   * parentFrame.layoutSizingHorizontal = 'FIXED'\n   *\n   * // Parent frame (child 2 is not clipped)\n   * // +------------------------+\n   * // |+-----------+           |\n   * // ||           |           |\n   * // ||  Child 1  |           |\n   * // ||           |           |\n   * // |+-----------+           |\n   * // |+----------------------+|\n   * // ||                      ||\n   * // ||       Child 2        ||\n   * // ||                      ||\n   * // |+----------------------+|\n   * // +------------------------+\n   * parentFrame.layoutSizingHorizontal = 'HUG'\n   * ```\n   *\n   * ```ts title=\"Setting layoutSizingHorizontal on an auto-layout child\"\n   * const parentFrame = figma.createFrame()\n   * const child2 = figma.createFrame()\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.appendChild(child2)\n   * parentFrame.layoutMode = 'HORIZONTAL'\n   * parentFrame.resize(300, 100)\n   *\n   * // Parent frame\n   * // +-------------------------------------+\n   * // |+-----------++-----------+           |\n   * // ||           ||           |           |\n   * // ||  Child 1  ||  Child 2  |           |\n   * // ||           ||           |           |\n   * // |+-----------++-----------+           |\n   * // +-------------------------------------+\n   * child2.layoutSizingHorizontal = 'FIXED'\n   *\n   * // Parent frame\n   * // +-------------------------------------+\n   * // |+-----------++----------------------+|\n   * // ||           ||                      ||\n   * // ||  Child 1  ||       Child 2        ||\n   * // ||           ||                      ||\n   * // |+-----------++----------------------+|\n   * // +-------------------------------------+\n   * child2.layoutSizingHorizontal = 'FILL'\n   * ```\n   */\n  layoutSizingHorizontal: 'FIXED' | 'HUG' | 'FILL'\n  /**\n   * Applicable only on auto-layout frames, their children, and text nodes. This is a shorthand for setting {@link AutoLayoutChildrenMixin.layoutGrow}, {@link AutoLayoutChildrenMixin.layoutAlign}, {@link AutoLayoutMixin.primaryAxisSizingMode}, and {@link AutoLayoutMixin.counterAxisSizingMode}. This field maps directly to the \"Vertical sizing\" dropdown in the Figma UI.\n   *\n   * @remarks\n   *\n   * `\"HUG\"` is only valid on auto-layout frames and text nodes. `\"FILL\"` is only valid on auto-layout children. Setting these values when they don't apply will throw an error.\n   */\n  layoutSizingVertical: 'FIXED' | 'HUG' | 'FILL'\n  /**\n   * Resizes the node. If the node contains children with constraints, it applies those constraints during resizing. If the parent has auto-layout, causes the parent to be resized.\n   *\n   * @param width - New width of the node. Must be >= 0.01\n   * @param height - New height of the node. Must be >= 0.01, except for {@link LineNode} which must always be given a height of exactly 0.\n   *\n   * @remarks\n   *\n   * Since this function applies constraints recursively (when there are multiple levels of nested frames with constraints), calls to this function could be expensive. Use {@link LayoutMixin.resizeWithoutConstraints} if you don't need to apply constraints.\n   *\n   * Caution: ⚠️ If this node is a text node with a missing font or contains a text node with a missing font, the text node will be resized but the text will not re-layout until the next time the text node is opened on a machine that _has_ the font. This can cause the text node to re-layout immediately and be surprising to your user. Consider checking if the document {@link PluginAPI.hasMissingFont} before using this function.\n   *\n   * Ignores `targetAspectRatio`. If `targetAspectRatio` has been set, it will be updated to correspond to the post-resize value.\n   */\n  resize(width: number, height: number): void\n  /**\n   * Resizes the node. Children of the node are never resized, even if those children have constraints. If the parent has auto-layout, causes the parent to be resized (this constraint cannot be ignored).\n   *\n   * @param width - New width of the node. Must be >= 0.01\n   * @param height - New height of the node. Must be >= 0.01, except for {@link LineNode} which must always be given a height of exactly 0.\n   *\n   * @remarks\n   *\n   * This function will not cause its children to resize. Use {@link LayoutMixin.resize} if you need to apply constraints.\n   *\n   * Caution: ⚠️ If this node is a text node with a missing font, the text node will be resized but the text will not re-layout until the next time the text node is opened on a machine that _has_ the font. This can cause the text node to re-layout immediately and be surprising to your user. Consider checking the text node property [`hasMissingFont`](https://www.figma.com/plugin-docs/api/TextNode#hasmissingfont) before using this function.\n   *\n   * Ignores `targetAspectRatio`. If `targetAspectRatio` has been set, it will be updated to correspond to the post-resize value.\n   */\n  resizeWithoutConstraints(width: number, height: number): void\n  /**\n   * Rescales the node. This API function is the equivalent of using the Scale Tool from the toolbar.\n   *\n   * @param scale - The scale by which to resize the node from the top-left corner.\n   *\n   * @remarks\n   *\n   * The scale factor must be >= 0.01\n   */\n  rescale(scale: number): void\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface AspectRatioLockMixin {\n  /**\n   * When toggled, causes the layer to keep its proportions when the user resizes it via auto layout, constraints, the properties panel, or on-canvas.\n   * If not set, the node does NOT resize toward a specific targetAspectRatio.\n   *\n   * @remarks\n   *\n   * Use `lockAspectRatio` and `unlockAspectRatio` to set targetAspectRatio.\n   *\n   * ```ts\n   * const parentFrame = figma.createFrame()\n   * const image = await figma.createNodeFromJSXAsync(\n   *   <figma.widget.Image\n   *     src=\"https://picsum.photos/200/300\"\n   *     width={200}\n   *     height={300}\n   *   />\n   * )\n   * parentFrame.appendChild(image)\n   *\n   * image.lockAspectRatio() // set to 2:3 ratio, implicit from the size\n   *\n   * // Add autolayout to parent, which defaults to Hug x Hug\n   * parentFrame.layoutMode = 'HORIZONTAL'\n   *\n   * // Set child to fill-width\n   * image.layoutGrow = 1\n   *\n   * // Resize parent to be much larger\n   * parentFrame.resize(500, 1000)\n   *\n   * // Since the child is fill-width, it will expand to the available space\n   * image.width == 500\n   * image.height == 750\n   * // Image maintains the 2:3 ratio even as it grew with auto layout!\n   * ```\n   *\n   * Caution: ⚠️ `targetAspectRatio` cannot be used with auto-resizing text (TextNodes where textAutoResize !== NONE).\n   */\n  readonly targetAspectRatio: Vector | null\n  /**\n   * Locks the node's `targetAspectRatio` to the current ratio of its width and height.\n   */\n  lockAspectRatio(): void\n  /**\n   * Unlocks the node's `targetAspectRatio`.\n   */\n  unlockAspectRatio(): void\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface BlendMixin extends MinimalBlendMixin {\n  /**\n   * Whether this node is a mask. A mask node masks its subsequent siblings.\n   *\n   * @remarks\n   *\n   * Since a mask node masks all of its subsequent siblings, enabling `isMask` on a node that is not in a group-like container designed to stop mask propagation can have unintented consequences — that is, it may \"mask\" (often in practice, hide) more siblings than you intend. When enabling `isMask`, ensure you have contained its propagation propertly. (\"Subsequent siblings\" are siblings listed _after_ this node in a `children` array in the plugin API; this corresponds to layers shown _above_ this node in the layers panel.)\n   *\n   * Example:\n   * ```ts\n   * const rect = figma.createRectangle()\n   * const circleToMask = figma.createEllipse()\n   * const otherCircle1 = figma.createEllipse()\n   * const otherCircle2 = figma.createEllipse()\n   *\n   * // In the layers panel, this would look something like:\n   * // - otherCircle2\n   * // - otherCircle1\n   * // - circleToMask\n   * // - rect\n   * //\n   * // So if I enable `rect.isMask`, the rect will mask ALL other nodes,\n   * // because they are all siblings.\n   * //\n   * // If I only want `rect` to mask `circleToMask`, I should group\n   * // them first.\n   * figma.group([rect, circleToMask], figma.currentPage,\n   *             figma.currentPage.children.indexOf(circleToMask))\n   * rect.isMask = true\n   *\n   * // Now `rect` only masks its siblings above it in its group\n   * // (`circleToMask`) but not the circles outside of the group.\n   * // In the layers panel this would look like:\n   * // - otherCircle2\n   * // - otherCircle1\n   * // - Group\n   * //   - circleToMask [this is the only node masked by rect]\n   * //   - rect (isMask)\n   *\n   * ```\n   */\n  isMask: boolean\n  /**\n   * Type of masking to use if this node is a mask. Defaults to `\"ALPHA\"`. You must check `isMask` to verify that this is a mask; changing `maskType` does not automatically turn on `isMask`, and a node that is not a mask can still have a `maskType`.\n   */\n  maskType: MaskType\n  /**\n   * Array of effects. See {@link Effect} type. For help on how to change this value, see [Editing Properties](https://www.figma.com/plugin-docs/editing-properties).\n   */\n  effects: ReadonlyArray<Effect>\n  /**\n   * The id of the {@link EffectStyle} object that the properties of this node are linked to.\n   *\n   * If the manifest contains`\"documentAccess\": \"dynamic-page\"`, this property is read-only. Use `setEffectStyleIdAsync` to update the style.\n   */\n  effectStyleId: string\n  /**\n   * Set the {@link EffectStyle} that the properties of this node are linked to.\n   */\n  setEffectStyleIdAsync(styleId: string): Promise<void>\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface ContainerMixin {\n  /**\n   * Whether this container is shown as expanded in the layers panel.\n   */\n  expanded: boolean\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface DeprecatedBackgroundMixin {\n  /**\n   * @deprecated Use `fills` instead.\n   */\n  backgrounds: ReadonlyArray<Paint>\n  /**\n   * @deprecated Use `fillStyleId` instead. This property is read-only if the manifest contains `\"documentAccess\": \"dynamic-page\"`.\n   */\n  backgroundStyleId: string\n}\ndeclare type StrokeCap =\n  | 'NONE'\n  | 'ROUND'\n  | 'SQUARE'\n  | 'ARROW_LINES'\n  | 'ARROW_EQUILATERAL'\n  | 'DIAMOND_FILLED'\n  | 'TRIANGLE_FILLED'\n  | 'CIRCLE_FILLED'\ndeclare type StrokeJoin = 'MITER' | 'BEVEL' | 'ROUND'\ndeclare type HandleMirroring = 'NONE' | 'ANGLE' | 'ANGLE_AND_LENGTH'\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface AutoLayoutMixin {\n  /**\n   * Determines whether this layer uses auto-layout to position its children. Defaults to \"NONE\".\n   *\n   * @remarks\n   *\n   * Changing this property will cause the position of the children of this layer to change as a side-effect. It also causes the size of this layer to change, since at least one dimension of auto-layout frames is automatically calculated.\n   *\n   * As a consequence, note that if a frame has `layoutMode === \"NONE\"`, calling `layoutMode = \"VERTICAL\"; layoutMode = \"NONE\"` does not leave the document unchanged. Removing auto-layout from a frame does not restore the children to their original positions.\n   *\n   * This property must be set to `\"HORIZONTAL\"` or `\"VERTICAL\"` in order for the {@link AutoLayoutMixin.primaryAxisSizingMode}, {@link AutoLayoutMixin.counterAxisSizingMode}, {@link AutoLayoutMixin.layoutWrap}, {@link AutoLayoutMixin.primaryAxisAlignItems}, {@link AutoLayoutMixin.counterAxisAlignItems}, {@link AutoLayoutMixin.counterAxisAlignContent}, {@link AutoLayoutMixin.paddingTop}, {@link AutoLayoutMixin.paddingBottom}, {@link AutoLayoutMixin.paddingLeft}, {@link AutoLayoutMixin.paddingRight}, {@link AutoLayoutMixin.itemSpacing}, {@link AutoLayoutMixin.counterAxisSpacing}, {@link AutoLayoutMixin.itemReverseZIndex}, and {@link AutoLayoutMixin.strokesIncludedInLayout} properties to be applicable.\n   *\n   * ```ts title=\"Auto-layout frame with horizontal layout\"\n   * const parentFrame = figma.createFrame()\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.appendChild(figma.createFrame())\n   *\n   * // Parent frame\n   * // +--------------------------+\n   * // |+-----------++-----------+|\n   * // ||           ||           ||\n   * // ||  Child 1  ||  Child 2  ||\n   * // ||           ||           ||\n   * // |+-----------++-----------+|\n   * // +--------------------------+\n   * parentFrame.layoutMode = 'HORIZONTAL'\n   * ```\n   *\n   * ```ts title=\"Auto-layout frame with vertical layout\"\n   * const parentFrame = figma.createFrame()\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.appendChild(figma.createFrame())\n   *\n   * // Parent frame\n   * // +-------------+\n   * // |+-----------+|\n   * // ||           ||\n   * // ||  Child 1  ||\n   * // ||           ||\n   * // |+-----------+|\n   * // |+-----------+|\n   * // ||           ||\n   * // ||  Child 2  ||\n   * // ||           ||\n   * // |+-----------+|\n   * // +-------------+\n   * parentFrame.layoutMode = 'VERTICAL'\n   */\n  layoutMode: 'NONE' | 'HORIZONTAL' | 'VERTICAL' | 'GRID'\n  /**\n   * Applicable only on auto-layout frames. Determines the left padding between the border of the frame and its children.\n   */\n  paddingLeft: number\n  /**\n   * Applicable only on auto-layout frames. Determines the right padding between the border of the frame and its children.\n   */\n  paddingRight: number\n  /**\n   * Applicable only on auto-layout frames. Determines the top padding between the border of the frame and its children.\n   */\n  paddingTop: number\n  /**\n   * Applicable only on auto-layout frames. Determines the bottom padding between the border of the frame and its children.\n   */\n  paddingBottom: number\n  /**\n   * @deprecated Use `paddingLeft` and `paddingRight` instead.\n   */\n  horizontalPadding: number\n  /**\n   * @deprecated Use `paddingTop` and `paddingBottom` instead.\n   */\n  verticalPadding: number\n  /**\n   * Applicable only on auto-layout frames. Determines whether the primary axis has a fixed length (determined by the user) or an automatic length (determined by the layout engine).\n   *\n   * @remarks\n   *\n   * Auto-layout frames have a **primary axis**, which is the axis that resizes when you add new items into the frame. For example, frames with \"VERTICAL\" {@link AutoLayoutMixin.layoutMode} resize in the y-axis.\n   *\n   * - `\"FIXED\"`: The primary axis length is determined by the user or plugins, unless the {@link AutoLayoutChildrenMixin.layoutAlign} is set to “STRETCH” or {@link AutoLayoutChildrenMixin.layoutGrow} is 1.\n   * - `\"AUTO\"`: The primary axis length is determined by the size of the children. If set, the auto-layout frame will automatically resize along the counter axis to fit its children.\n   *\n   * Note: `“AUTO”` should not be used in any axes where {@link AutoLayoutChildrenMixin.layoutAlign} = “STRETCH” or {@link AutoLayoutChildrenMixin.layoutGrow} = 1. Either use `“FIXED”` or disable {@link AutoLayoutChildrenMixin.layoutAlign}/{@link AutoLayoutChildrenMixin.layoutGrow}.\n   */\n  primaryAxisSizingMode: 'FIXED' | 'AUTO'\n  /**\n   * Applicable only on auto-layout frames. Determines whether the counter axis has a fixed length (determined by the user) or an automatic length (determined by the layout engine).\n   *\n   * @remarks\n   *\n   * Auto-layout frames have a **primary axis**, which is the axis that resizes when you add new items into the frame. For example, frames with \"VERTICAL\" {@link AutoLayoutMixin.layoutMode} resize in the y-axis.\n   *\n   * The other axis is called the **counter axis**.\n   * - `\"FIXED\"`: The counter axis length is determined by the user or plugins, unless the {@link AutoLayoutChildrenMixin.layoutAlign} is set to “STRETCH” or {@link AutoLayoutChildrenMixin.layoutGrow} is 1.\n   * - `\"AUTO\"`: The counter axis length is determined by the size of the children. If set, the auto-layout frame will automatically resize along the counter axis to fit its children.\n   *\n   * Note: `“AUTO”` cannot be used in any axes where {@link AutoLayoutChildrenMixin.layoutAlign} = “STRETCH” or {@link AutoLayoutChildrenMixin.layoutGrow} = 1. Either use `“FIXED”` or disable {@link AutoLayoutChildrenMixin.layoutAlign}/{@link AutoLayoutChildrenMixin.layoutGrow}.\n   *\n   * ```ts title=\"Horizontal auto-layout frame with different counterAxisSizingMode values\"\n   * const parentFrame = figma.createFrame()\n   * const child2 = figma.createFrame()\n   * // Make the second child 200px high instead of the default 100px\n   * child2.resize(100, 200)\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.appendChild(child2)\n   * parentFrame.layoutMode = 'HORIZONTAL'\n   *\n   * // Parent frame\n   * // +--------------------------+\n   * // |+-----------++-----------+|\n   * // ||           ||           ||\n   * // ||  Child 1  ||  Child 2  ||\n   * // ||           ||           ||\n   * // |+-----------+|           ||\n   * // +--------------------------+\n   * parentFrame.counterAxisSizingMode = 'FIXED' // Child 2 is clipped\n   *\n   * // Parent frame\n   * // +--------------------------+\n   * // |+-----------++-----------+|\n   * // ||           ||           ||\n   * // ||  Child 1  ||  Child 2  ||\n   * // ||           ||           ||\n   * // |+-----------+|           ||\n   * // |             |           ||\n   * // |             |           ||\n   * // |             +-----------+|\n   * // +--------------------------+\n   * parentFrame.counterAxisSizingMode = 'AUTO'\n   * ```\n   */\n  counterAxisSizingMode: 'FIXED' | 'AUTO'\n  /**\n   * Applicable only on auto-layout frames. Determines whether strokes are included in [layout calculations](https://help.figma.com/hc/en-us/articles/31289464393751-Use-the-horizontal-and-vertical-flows-in-auto-layout#01JT9NA4HVT02ZPE7BA86SFCD6). When true, auto-layout frames behave like css `box-sizing: border-box`.\n   *\n   * @remarks\n   *\n   * ```ts title=\"Auto-layout frame with strokes included in layout\"\n   * const parentFrame = figma.createFrame()\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.layoutMode = 'HORIZONTAL'\n   * // Let the height of the parent frame resize to fit the children\n   * parentFrame.counterAxisSizingMode = 'AUTO'\n   *\n   * // Thick stroke around parent frame to illustrate layout differences\n   * parentFrame.strokes = [{ type: 'SOLID', color: { r: 0, g: 0, b: 0 }}]\n   * parentFrame.strokeWeight = 10\n   *\n   * // Parent frame (strokes overlap with children)\n   * // +--------------------------+\n   * // |+-----------++-----------+|\n   * // ||           ||           ||\n   * // ||  Child 1  ||  Child 2  ||\n   * // ||           ||           ||\n   * // |+-----------++-----------+|\n   * // +--------------------------+\n   * parentFrame.strokesIncludedInLayout = false\n   *\n   * // Parent frame (strokes do not overlap with children)\n   * // +--------------------------------+\n   * // |                                |\n   * // |   +-----------++-----------+   |\n   * // |   |           ||           |   |\n   * // |   |  Child 1  ||  Child 2  |   |\n   * // |   |           ||           |   |\n   * // |   +-----------++-----------+   |\n   * // |                                |\n   * // +--------------------------------+\n   * parentFrame.strokesIncludedInLayout = true\n   * ```\n   */\n  strokesIncludedInLayout: boolean\n  /**\n   * Determines whether this layer should use wrapping auto-layout. Defaults to `\"NO_WRAP\"`.\n   *\n   * @remarks\n   *\n   * This property can only be set on layers with `layoutMode === \"HORIZONTAL\"`. Setting it on layers without this property will throw an Error.\n   *\n   * This property must be set to `\"WRAP\"` in order for the {@link AutoLayoutMixin.counterAxisSpacing} and {@link AutoLayoutMixin.counterAxisAlignContent} properties to be applicable.\n   */\n  layoutWrap: 'NO_WRAP' | 'WRAP'\n  /**\n   * Applicable only on \"HORIZONTAL\" or \"VERTICAL\" auto-layout frames. Determines how the auto-layout frame’s children should be aligned in the primary axis direction.\n   *\n   * @remarks\n   *\n   * Changing this property will cause all the children to update their `x` and `y` values.\n   *\n   * - In horizontal auto-layout frames, `“MIN”` and `“MAX”` correspond to left and right respectively.\n   * - In vertical auto-layout frames, `“MIN”` and `“MAX”` correspond to top and bottom respectively.\n   * - `“SPACE_BETWEEN”` will cause the children to space themselves evenly along the primary axis, only putting the extra space between the children.\n   *\n   * The corresponding property for the counter axis direction is {@link AutoLayoutMixin.counterAxisAlignItems}.\n   *\n   * ```ts title=\"Horizontal auto-layout frame with different primaryAxisAlignItems values\"\n   * const parentFrame = figma.createFrame()\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.layoutMode = 'HORIZONTAL'\n   *\n   * // Make the parent frame wider so we can see the effects of\n   * // the different primaryAxisAlignItems values\n   * parentFrame.resize(300, 100)\n   *\n   * // Parent frame\n   * // +------------------------------------+\n   * // | +-----------++-----------+         |\n   * // | |           ||           |         |\n   * // | |  Child 1  ||  Child 2  |         |\n   * // | |           ||           |         |\n   * // | +-----------++-----------+         |\n   * // +------------------------------------+\n   * parentFrame.primaryAxisAlignItems = 'MIN'\n   *\n   * // Parent frame\n   * // +------------------------------------+\n   * // |          +-----------++-----------+|\n   * // |          |           ||           ||\n   * // |          |  Child 1  ||  Child 2  ||\n   * // |          |           ||           ||\n   * // |          +-----------++-----------+|\n   * // +------------------------------------+\n   * parentFrame.primaryAxisAlignItems = 'MAX'\n   *\n   * // Parent frame\n   * // +------------------------------------+\n   * // |     +-----------++-----------+     |\n   * // |     |           ||           |     |\n   * // |     |  Child 1  ||  Child 2  |     |\n   * // |     |           ||           |     |\n   * // |     +-----------++-----------+     |\n   * // +------------------------------------+\n   * parentFrame.primaryAxisAlignItems = 'CENTER'\n   *\n   * // Parent frame\n   * // +------------------------------------+\n   * // |+-----------+          +-----------+|\n   * // ||           |          |           ||\n   * // ||  Child 1  |          |  Child 2  ||\n   * // ||           |          |           ||\n   * // |+-----------+          +-----------+|\n   * // +------------------------------------+\n   * parentFrame.primaryAxisAlignItems = 'SPACE_BETWEEN'\n   * ```\n   */\n  primaryAxisAlignItems: 'MIN' | 'MAX' | 'CENTER' | 'SPACE_BETWEEN'\n  /**\n   * Applicable only on \"HORIZONTAL\" or \"VERTICAL\" auto-layout frames. Determines how the auto-layout frame’s children should be aligned in the counter axis direction.\n   *\n   * @remarks\n   *\n   * Changing this property will cause all the children to update their `x` and `y` values.\n   *\n   * - In horizontal auto-layout frames, `“MIN”` and `“MAX”` correspond to top and bottom respectively.\n   * - In vertical auto-layout frames, `“MIN”` and `“MAX”` correspond to left and right respectively.\n   * - `\"BASELINE\"` can only be set on horizontal auto-layout frames, and aligns all children along the [text baseline](https://help.figma.com/hc/en-us/articles/360040451373-Explore-auto-layout-properties#Text_baseline_alignment).\n   *\n   * The corresponding property for the primary axis direction is {@link AutoLayoutMixin.primaryAxisAlignItems}.\n   *\n   * ```ts title=\"Horizontal auto-layout frame with different counterAxisAlignItems values\"\n   * (async () => {\n   *   const parentFrame = figma.createFrame()\n   *   const text = figma.createText()\n   *   await figma.loadFontAsync(text.fontName)\n   *   text.characters = 'asdf'\n   *   // Make the text taller so we can see how text baseline alignment works\n   *   text.lineHeight = {unit: 'PERCENT', value: 300}\n   *\n   *   // Auto-layout frame will have 2 children: a frame and a text node\n   *   parentFrame.appendChild(figma.createFrame())\n   *   parentFrame.appendChild(text)\n   *   parentFrame.layoutMode = 'HORIZONTAL'\n   *\n   *   // Make the parent frame taller so we can see the effects of\n   *   // the different counterAxisAlignItems values\n   *   parentFrame.resize(200, 150)\n   *\n   *   // Parent frame\n   *   // +--------------------------+\n   *   // |+-----------++----+       |\n   *   // ||           ||    |       |\n   *   // ||  Child 1  ||asdf|       |\n   *   // ||           ||    |       |\n   *   // |+-----------++----+       |\n   *   // |                          |\n   *   // |                          |\n   *   // +--------------------------+\n   *   parentFrame.counterAxisAlignItems = 'MIN'\n   *\n   *   // Parent frame\n   *   // +--------------------------+\n   *   // |                          |\n   *   // |                          |\n   *   // |+-----------++----+       |\n   *   // ||           ||    |       |\n   *   // ||  Child 1  ||asdf|       |\n   *   // ||           ||    |       |\n   *   // |+-----------++----+       |\n   *   // +--------------------------+\n   *   parentFrame.counterAxisAlignItems = 'MAX'\n   *\n   *   // Parent frame\n   *   // +--------------------------+\n   *   // |                          |\n   *   // |+-----------++----+       |\n   *   // ||           ||    |       |\n   *   // ||  Child 1  ||asdf|       |\n   *   // ||           ||    |       |\n   *   // |+-----------++----+       |\n   *   // |                          |\n   *   // +--------------------------+\n   *   parentFrame.counterAxisAlignItems = 'CENTER'\n   *\n   *   // Parent frame\n   *   // +--------------------------+\n   *   // |+-----------+             |\n   *   // ||           |+----+       |\n   *   // ||  Child 1  ||    |       |\n   *   // ||           ||asdf|       |\n   *   // |+-----------+|    |       |\n   *   // |             +----+       |\n   *   // |                          |\n   *   // +--------------------------+\n   *   parentFrame.counterAxisAlignItems = 'BASELINE'\n   * })()\n   * ```\n   */\n  counterAxisAlignItems: 'MIN' | 'MAX' | 'CENTER' | 'BASELINE'\n  /**\n   * Applicable only on auto-layout frames with {@link AutoLayoutMixin.layoutWrap} set to `\"WRAP\"`. Determines how the wrapped tracks are spaced out inside of the auto-layout frame.\n   *\n   * @remarks\n   *\n   * Changing this property on a non-wrapping auto-layout frame will throw an error.\n   *\n   * - `\"AUTO\"`: If all children of this auto-layout frame have {@link AutoLayoutChildrenMixin.layoutAlign} set to `\"STRETCH\"`, the tracks will stretch to fill the auto-layout frame. This is like flexbox `align-content: stretch`. Otherwise, each track will be as tall as the tallest child of the track, and will align based on the value of {@link AutoLayoutMixin.counterAxisAlignItems}. This is like flexbox `align-content: start | center | end`. {@link AutoLayoutMixin.counterAxisSpacing} is respected when `counterAxisAlignContent` is set to `\"AUTO\"`.\n   * - `\"SPACE_BETWEEN\"`: Tracks are all sized based on the tallest child in the track. The free space within the auto-layout frame is divided up evenly between each track. If the total height of all tracks is taller than the height of the auto-layout frame, the spacing will be 0.\n   */\n  counterAxisAlignContent: 'AUTO' | 'SPACE_BETWEEN'\n  /**\n   * Applicable only on \"HORIZONTAL\" or \"VERTICAL\" auto-layout frames. Determines distance between children of the frame.\n   *\n   * @remarks\n   *\n   * For auto-layout frames with {@link AutoLayoutMixin.layoutMode} set to `\"HORIZONTAL\"`, this is the horizontal gap between children. For auto-layout frames with {@link AutoLayoutMixin.layoutMode} set to `\"VERTICAL\"`, this is the vertical gap between children.\n   *\n   * ```ts title=\"Auto-layout frame with a horizontal gap between children\"\n   * const parentFrame = figma.createFrame()\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.layoutMode = 'HORIZONTAL'\n   *\n   * // Parent frame\n   * // +------------------------------------+\n   * // |+-----------+          +-----------+|\n   * // ||           |          |           ||\n   * // ||  Child 1  | -- 20 -- |  Child 2  ||\n   * // ||           |          |           ||\n   * // |+-----------+          +-----------+|\n   * // +------------------------------------+\n   * parentFrame.itemSpacing = 20\n   * ```\n   *\n   * ```ts title=\"Auto-layout frame with a vertical gap between children\"\n   * const parentFrame = figma.createFrame()\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.layoutMode = 'VERTICAL'\n   *\n   * // Parent frame\n   * // +-------------+\n   * // |+-----------+|\n   * // ||           ||\n   * // ||  Child 1  ||\n   * // ||           ||\n   * // |+-----------+|\n   * // |      |      |\n   * // |      |      |\n   * // |      20     |\n   * // |      |      |\n   * // |      |      |\n   * // |+-----------+|\n   * // ||           ||\n   * // ||  Child 2  ||\n   * // ||           ||\n   * // |+-----------+|\n   * // +-------------+\n   * parentFrame.itemSpacing = 20\n   * ```\n   */\n  itemSpacing: number\n  /**\n   * Applicable only on \"HORIZONTAL\" or \"VERTICAL\" auto-layout frames with {@link AutoLayoutMixin.layoutWrap} set to `\"WRAP\"`. Determines the distance between wrapped tracks. The value must be positive.\n   *\n   * @remarks\n   *\n   * Set this propety to `null` to have it sync with {@link AutoLayoutMixin.itemSpacing}. This will never return `null`. Once set to `null`, it will start returning the value of {@link AutoLayoutMixin.itemSpacing}.\n   *\n   * ```ts title=\"Auto-layout frame with children wrapping to the next line\"\n   * const parentFrame = figma.createFrame()\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.appendChild(figma.createFrame())\n   * parentFrame.appendChild(figma.createFrame())\n   *\n   * // Make children flow horizontally and wrap\n   * parentFrame.layoutMode = 'HORIZONTAL'\n   * parentFrame.layoutWrap = 'WRAP'\n   *\n   * // Set a fixed width so when we set itemSpacing below, the children will wrap\n   * parentFrame.primaryAxisSizingMode = 'FIXED'\n   *\n   * // Let the height of the parent frame resize to fit the children\n   * parentFrame.counterAxisSizingMode = 'AUTO'\n   *\n   * // Horizontal gap between children\n   * parentFrame.itemSpacing = 10\n   *\n   * // Parent frame\n   * // +------------------------------------------+\n   * // |+-----------+          +-----------+      |\n   * // ||           |          |           |      |\n   * // ||  Child 1  | -- 10 -- |  Child 2  |      |\n   * // ||           |          |           |      |\n   * // |+-----------+          +-----------+      |\n   * // |      |                                   |\n   * // |      |                                   |\n   * // |      20                                  |\n   * // |      |                                   |\n   * // |      |                                   |\n   * // |+-----------+                             |\n   * // ||           |                             |\n   * // ||  Child 3  |                             |\n   * // ||           |                             |\n   * // |+-----------+                             |\n   * // +------------------------------------------+\n   * parentFrame.counterAxisSpacing = 20\n   * ```\n   */\n  counterAxisSpacing: number | null\n  /**\n   * Applicable only on \"HORIZONTAL\" or \"VERTICAL\" auto-layout frames. Determines the [canvas stacking order](https://help.figma.com/hc/en-us/articles/360040451373-Explore-auto-layout-properties#Canvas_stacking_order) of layers in this frame. When true, the first layer will be draw on top.\n   *\n   * @remarks\n   *\n   * ```ts title=\"Auto-layout frame with different canvas stacking\"\n   * const parentFrame = figma.createFrame()\n   * // Create red and green children so we can see the overlap\n   * const child1 = figma.createFrame()\n   * child1.fills = [{ type: 'SOLID', color: { r: 1, g: 0, b: 0 }}]\n   * const child2 = figma.createFrame()\n   * child2.fills = [{ type: 'SOLID', color: { r: 0, g: 1, b: 0 }}]\n   * parentFrame.appendChild(child1)\n   * parentFrame.appendChild(child2)\n   * parentFrame.layoutMode = 'HORIZONTAL'\n   * // Negative horizontal gap between children so they overlap\n   * parentFrame.itemSpacing = -20\n   *\n   * // Parent frame (last child on top)\n   * // +---------------------+\n   * // |+-------+-----------+|\n   * // ||       |           ||\n   * // ||Child 1|  Child 2  ||\n   * // ||       |           ||\n   * // |+-------+-----------+|\n   * // +---------------------+\n   * parentFrame.itemReverseZIndex = false\n   *\n   * // Parent frame (first child on top)\n   * // +---------------------+\n   * // |+-----------+-------+|\n   * // ||           |       ||\n   * // ||  Child 1  |Child 2||\n   * // ||           |       ||\n   * // |+-----------+-------+|\n   * // +---------------------+\n   * parentFrame.itemReverseZIndex = true\n   * ```\n   */\n  itemReverseZIndex: boolean\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/GridTrackSize\n */\ninterface GridTrackSize {\n  /**\n   * Applicable only on FIXED grid tracks. The size of the track in pixels.\n   * Optional for `FLEX` tracks.\n   * If the setter for this value is called on a `FLEX` track, the track will be converted to a `FIXED` track.\n   */\n  value?: number\n  /**\n   * The type of the grid track. `FLEX` indicates that the track will grow to fill the available space in the container (evenly divided among all flex tracks in the grid), while `FIXED` indicates that the track will have a fixed size.\n   **/\n  type: 'FLEX' | 'FIXED'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface GridLayoutMixin {\n  /**\n   * Applicable only on auto-layout frames with `layoutMode` set to `\"GRID\"`. Determines the number of rows in the grid.\n   *\n   * @remarks\n   *\n   * If the setter for this value is called on a grid with a value less than 1, it will throw an error.\n   * Users cannot remove rows from a grid if they are occupied by children, so if you try to reduce the count of rows in a grid and some of those rows have children, it will throw an error.\n   * By default, when the row count is increased, the new rows will be added as {@link GridTrackSize} objects with type `\"FLEX\"`. If you want to change the type of the new rows, you can use the setters on GridTrackSize objects returned by {@link GridLayoutMixin.gridRowSizes} or {@link GridLayoutMixin.gridColumnSizes}.\n   *\n   * ```ts title=\"Grid layout with 2 rows and 3 columns\"\n   * const parentFrame = figma.createFrame()\n   * parentFrame.layoutMode = 'GRID'\n   * parentFrame.gridRowCount = 2\n   * parentFrame.gridColumnCount = 3\n   *\n   * // Grid frame with 2 rows and 3 columns\n   * // + --- + --- + --- +\n   * // |     |     |     |\n   * // + --- + --- + --- +\n   * // |     |     |     |\n   * // + --- + --- + --- +\n   * ```\n   */\n  gridRowCount: number\n  /**\n   * Applicable only on auto-layout frames with `layoutMode` set to `\"GRID\"`. Determines the number of columns in the grid.\n   * @remarks\n   * If the setter for this value is called on a grid with a value less than 1, it will throw an error.\n   * Users cannot remove columns from a grid if they are occupied by children, so if you try to reduce the count of columns in a grid and some of those columns have children, it will throw an error.\n   * By default, when the column count is increased, the new columns will be added as {@link GridTrackSize} objects with type `\"FLEX\"`. If you want to change the type of the new columns, you can use the setters on GridTrackSize objects returned by {@link GridLayoutMixin.gridRowSizes} or {@link GridLayoutMixin.gridColumnSizes}.\n   */\n  gridColumnCount: number\n  /**\n   * Applicable only on auto-layout frames with `layoutMode` set to `\"GRID\"`. Determines the gap between rows in the grid.\n   * @remarks\n   * If the setter for this value is called on a grid with a value less than 0, it will throw an error.\n   */\n  gridRowGap: number\n  /**\n   * Applicable only on auto-layout frames with `layoutMode` set to `\"GRID\"`. Determines the gap between columns in the grid.\n   * @remarks\n   * If the setter for this value is called on a grid with a value less than 0, it will throw an error.\n   */\n  gridColumnGap: number\n  /**\n   * Only applicable on auto-layout frames with `layoutMode` set to `\"GRID\"`.\n   * Returns an array of {@link GridTrackSize} objects representing the rows in the grid in order.\n   *\n   * @remarks\n   * The order of the rows is from top to bottom.\n   * The {@link GridTrackSize} can be used to change the type of the row (either `\"FLEX\"` or `\"FIXED\"`) and the size of the track (if it is a `\"FIXED\"` track).\n   *\n   * ```ts title=\"Grid layout with mixed track sizes and types\"\n   * const parentFrame = figma.createFrame()\n   * parentFrame.layoutMode = 'GRID'\n   * parentFrame.gridRowCount = 2\n   * parentFrame.gridColumnCount = 3\n   *\n   * // Change the first row to be a fixed size of 100px\n   * parentFrame.gridRowSizes[0].type // 'FLEX'\n   * parentFrame.gridRowSizes[0].value = 100\n   * parentFrame.gridRowSizes[0].type // 'FIXED'\n   * // Grid with one fixed row and one flexible rows\n   * // + --- + --- + --- +\n   * // |     |     |     | 100px height\n   * // + --- + --- + --- +\n   * // |     |     |     |\n   * // |     |     |     | 'flex' height\n   * // |     |     |     |  occupies remaining height in the container, because there is only one flex row.\n   * // |     |     |     |\n   * // + --- + --- + --- +\n   * ```\n   */\n  gridRowSizes: Array<GridTrackSize>\n  /**\n   * Only applicable on auto-layout frames with `layoutMode` set to `\"GRID\"`.\n   * Returns an array of {@link GridTrackSize} objects representing the columns in the grid in order.\n   * @remarks\n   * The order of the columns is from left to right.\n   * The {@link GridTrackSize} can be used to change the type of the column (either `\"FLEX\"` or `\"FIXED\"`) and the size of the track (if it is a `\"FIXED\"` track).\n   */\n  gridColumnSizes: Array<GridTrackSize>\n  /**\n   * Applicable only on auto-layout frames with `layoutMode` set to `\"GRID\"`.\n   * Appends a node to the grid at the specified row and column index.\n   * @remarks\n   * If the specified row or column index is out of bounds, it will throw an error.\n   * If the specified row or column index is occupied by another node, it will throw an error.\n   * If the node is already a child of the grid, it will be removed from its current position and appended to the new position.\n   * ```ts title=\"Appending a node to a grid at a specific row and column index\"\n   * // + --- + --- + --- +\n   * // |     |     |     |\n   * // + --- + --- + --- +\n   * // |     |     |     |\n   * // + --- + --- + --- +\n   * // |     |     |     |\n   * // + --- + --- + --- +\n   * const grid = figma.createFrame()\n   * grid.layoutMode = 'GRID'\n   * grid.gridRowCount = 3\n   * grid.gridColumnCount = 3\n   *\n   * const child1 = figma.createFrame()\n   * const child2 = figma.createFrame()\n   * const child2 = figma.createFrame()\n   *\n   * // + --- + --- + --- +\n   * // |  1  |     |     |\n   * // + --- + --- + --- +\n   * // |  2  |     |     |\n   * // + --- + --- + --- +\n   * // |  3  |     |     |\n   * // + --- + --- + --- +\n   * grid.appendChildAt(child1, 0, 0)\n   * grid.appendChildAt(child2, 1, 0)\n   * grid.appendChildAt(child3, 2, 0)\n   * ```\n   */\n  appendChildAt(node: SceneNode, rowIndex: number, columnIndex: number): void\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface AutoLayoutChildrenMixin {\n  /**\n   * Applicable only on direct children of auto-layout frames. Determines if the layer should stretch along the parent’s counter axis. Defaults to `“INHERIT”`.\n   *\n   * @remarks\n   *\n   * Changing this property will cause the `x`, `y`, `size`, and `relativeTransform` properties on this node to change, if applicable (inside an auto-layout frame).\n   *\n   * - Setting `\"STRETCH\"` will make the node \"stretch\" to fill the width of the parent vertical auto-layout frame, or the height of the parent horizontal auto-layout frame excluding the frame's padding.\n   * - If the current node is an auto layout frame (e.g. an auto layout frame inside a parent auto layout frame) if you set layoutAlign to `“STRETCH”` you should set the corresponding axis – either {@link AutoLayoutMixin.primaryAxisSizingMode} or {@link AutoLayoutMixin.counterAxisSizingMode} – to be`“FIXED”`. This is because an auto-layout frame cannot simultaneously stretch to fill its parent and shrink to hug its children.\n   * - Setting `\"INHERIT\"` does not \"stretch\" the node.\n   *\n   * Caution: ⚠️ Previously, layoutAlign also determined counter axis alignment of auto-layout frame children. Counter axis alignment is now set on the auto-layout frame itself through {@link AutoLayoutMixin.counterAxisAlignItems}. Note that this means all layers in an auto-layout frame must now have the same counter axis alignment. This means `\"MIN\"`, `\"CENTER\"`,  and `\"MAX\"` are now deprecated values of `layoutAlign`.\n   */\n  layoutAlign: 'MIN' | 'CENTER' | 'MAX' | 'STRETCH' | 'INHERIT'\n  /**\n   * This property is applicable only for direct children of auto-layout frames. Determines whether a layer should stretch along the parent’s primary axis. 0 corresponds to a fixed size and 1 corresponds to stretch.\n   *\n   * @remarks\n   *\n   * 0 and 1 are currently the only supported values.\n   *\n   * Note: If the current node is an auto-layout frame (e.g. an auto-layout frame inside a parent auto-layout frame) if you set `layoutGrow` to 1 you should set the corresponding axis – either {@link AutoLayoutMixin.primaryAxisSizingMode} or {@link AutoLayoutMixin.counterAxisSizingMode} – to be `“FIXED”`. This is because an auto-layout frame cannot simultaneously stretch to fill its parent and shrink to hug its children.\n   */\n  layoutGrow: number\n  /**\n   * This property is applicable only for direct children of auto-layout frames. Determines whether a layer's size and position should be dermined by auto-layout settings or manually adjustable.\n   *\n   * @remarks\n   *\n   * Changing this property may cause the parent layer's size to change, since it will recalculate as if this child did not exist. It will also change this node's `x`, `y`, and `relativeTransform` properties.\n   *\n   * - The default value of `\"AUTO\"` will layout this child according to auto-layout rules.\n   * - Setting `\"ABSOLUTE\"` will take this child out of auto-layout flow, while still nesting inside the auto-layout frame. This allows explicitly setting `x`, `y`, `width`, and `height`. `\"ABSOLUTE\"` positioned nodes respect constraint settings.\n   *\n   * ```ts title=\"Auto-layout frame absolutely positioned red circle at the top-right corner\"\n   * const parentFrame = figma.createFrame()\n   * parentFrame.appendChild(figma.createFrame())\n   *\n   * // Create a small red circle\n   * const ellipse = figma.createEllipse()\n   * ellipse.resize(20, 20)\n   * ellipse.fills = [{ type: 'SOLID', color: { r: 1, g: 0, b: 0 }}]\n   * parentFrame.appendChild(ellipse)\n   * parentFrame.clipsContent = false\n   * parentFrame.layoutMode = 'HORIZONTAL'\n   *\n   * // Enable absolute positioning so we can move the circle\n   * ellipse.layoutPositioning = 'ABSOLUTE'\n   *\n   * // Center the circle on the top-right corner of the frame\n   * ellipse.x = 90\n   * ellipse.y = -10\n   *\n   * // Make the circle stick to the top-right corner of the frame\n   * ellipse.constraints = { horizontal: 'MAX', vertical: 'MIN' }\n   * ```\n   */\n  layoutPositioning: 'AUTO' | 'ABSOLUTE'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface GridChildrenMixin {\n  /**\n   * Applicable only on direct children of 'GRID' auto-layout frames. Sets the position of the node\n   *\n   * @remarks\n   * This method sets the position of the node within the grid based on the specified row and column indices.\n   * The row and column indices are 0-based, where 0 is the top row in the grid, and 0 is the left-most column in the grid.\n   * If the specified row or column index is out of bounds, it will throw an error.\n   * If the specified row or column index is occupied by another node, it will throw an error.\n   * ```ts title=\"Setting the position of a node in a grid\"\n   * const grid = figma.createFrame()\n   * grid.layoutMode = 'GRID'\n   * grid.gridRowCount = 3\n   * grid.gridColumnCount = 3\n   * const child1 = figma.createFrame()\n   * const child2 = figma.createFrame()\n   * const child2 = figma.createFrame()\n   * // + --- + --- + --- +\n   * // |  1  |  2  |  3  |\n   * // + --- + --- + --- +\n   * // |     |     |     |\n   * // + --- + --- + --- +\n   * // |     |     |     |\n   * // + --- + --- + --- +\n   *\n   * // If calling `appendChild` instead of {@link GridLayoutMixin.appendChildAt}, nodes will be added to the first available position in the grid.\n   * grid.appendChild(child1)\n   * grid.appendChild(child2)\n   * grid.appendChild(child3)\n   * // Move the children to specific grid positions\n   * child2.setGridPosition(1, 0)\n   * child3.setGridPosition(2, 1)\n   * // + --- + --- + --- +\n   * // |  1  |     |     |\n   * // + --- + --- + --- +\n   * // |  2  |     |     |\n   * // + --- + --- + --- +\n   * // |     |  3  |     |\n   * // + --- + --- + --- +\n   */\n  setGridChildPosition(rowIndex: number, columnIndex: number): void\n  /**\n   * Applicable only on direct children of grid auto-layout frames. Determines the starting row index for this node within the parent grid.\n   *\n   * @remarks\n   * The row index is 0-based, where 0 is the first row in the grid. This property works in conjunction with gridRowSpan to determine the node's row position and size in the grid.\n   * If the index provided is greater than the number of rows in the grid, the setter will throw an error.\n   * If the index provided results in the node overlapping with another node in the grid, the setter will throw an error.\n   */\n  readonly gridRowAnchorIndex: number\n  /**\n   * Applicable only on direct children of grid auto-layout frames. Determines the starting column index for this node within the parent grid.\n   *\n   * @remarks\n   * The column index is 0-based, where 0 is the first column in the grid. This property works in conjunction with gridColumnSpan to determine the node's column position and size in the grid.\n   * If the index provided is greater than the number of columns in the grid, the setter will throw an error.\n   * If the index provided results in the node overlapping with another node in the grid, the setter will throw an error.\n   */\n  readonly gridColumnAnchorIndex: number\n  /**\n   * Applicable only on direct children of grid auto-layout frames. Determines the number of rows this node will span within the parent grid.\n   *\n   * @remarks\n   * Must be a positive integer. This property defines how many rows the node will occupy starting from gridRowAnchorIndex.\n   * If the span provided results in the node overlapping with another node in the grid, the setter will throw an error.\n   * If the span provided results in the node extending beyond the grid's defined rows, the setter will throw an error.\n   */\n  gridRowSpan: number\n  /**\n   * Applicable only on direct children of grid auto-layout frames. Determines the number of columns this node will span within the parent grid.\n   *\n   * @remarks\n   * Must be a positive integer. This property defines how many columns the node will occupy starting from gridColumnAnchorIndex.\n   * If the span provided results in the node overlapping with another node in the grid, the setter will throw an error.\n   * If the span provided results in the node extending beyond the grid's defined columns, the setter will throw an error.\n   */\n  gridColumnSpan: number\n  /**\n   * Applicable only on direct children of grid auto-layout frames. Controls the horizontal alignment of the node within its grid cell.\n   *\n   * @remarks\n   * Possible values are:\n   * - `\"MIN\"`: Aligns to the left of the grid cell\n   * - `\"CENTER\"`: Centers horizontally within the grid cell\n   * - `\"MAX\"`: Aligns to the right of the grid cell\n   * - `\"AUTO\"`: Uses the default alignment\n   */\n  gridChildHorizontalAlign: 'MIN' | 'CENTER' | 'MAX' | 'AUTO'\n  /**\n   * Applicable only on direct children of grid auto-layout frames. Controls the vertical alignment of the node within its grid cell.\n   *\n   * @remarks\n   * Possible values are:\n   * - `\"MIN\"`: Aligns to the top of the grid cell\n   * - `\"CENTER\"`: Centers vertically within the grid cell\n   * - `\"MAX\"`: Aligns to the bottom of the grid cell\n   * - `\"AUTO\"`: Uses the default alignment\n   */\n  gridChildVerticalAlign: 'MIN' | 'CENTER' | 'MAX' | 'AUTO'\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/InferredAutoLayoutResult\n */\ninterface InferredAutoLayoutResult extends AutoLayoutChildrenMixin, AutoLayoutMixin {}\n/**\n * @see https://www.figma.com/plugin-docs/api/DetachedInfo\n */\ndeclare type DetachedInfo =\n  | {\n      type: 'local'\n      componentId: string\n    }\n  | {\n      type: 'library'\n      componentKey: string\n    }\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface MinimalStrokesMixin {\n  /**\n   * The paints used to fill the area of the shape's strokes. For help on how to change this value, see [Editing Properties](https://www.figma.com/plugin-docs/editing-properties).\n   */\n  strokes: ReadonlyArray<Paint>\n  /**\n   * The id of the {@link PaintStyle} object that the {@link MinimalStrokesMixin.strokes} property of this node is linked to.\n   *\n   * If the manifest contains`\"documentAccess\": \"dynamic-page\"`, this property is read-only. Use `setStrokeStyleIdAsync` to update the style.\n   */\n  strokeStyleId: string\n  /**\n   * Set the {@link PaintStyle} that the {@link MinimalStrokesMixin.strokes} property of this node is linked to.\n   */\n  setStrokeStyleIdAsync(styleId: string): Promise<void>\n  /**\n   * The thickness of the stroke, in pixels. This value must be non-negative and can be fractional.\n   *\n   * Caution: For rectangle nodes or frame-like nodes using different individual stroke weights, this property will return {@link PluginAPI.mixed}.\n   *\n   * Note: For rectangle nodes or frame-like nodes, individual stroke weights can be set for each side using the following properties:\n   *\n   * - {@link IndividualStrokesMixin.strokeTopWeight}\n   * - {@link IndividualStrokesMixin.strokeBottomWeight}\n   * - {@link IndividualStrokesMixin.strokeLeftWeight}\n   * - {@link IndividualStrokesMixin.strokeRightWeight}\n   */\n  strokeWeight: number | PluginAPI['mixed']\n  /**\n   * The decoration applied to vertices which have two or more connected segments.\n   *\n   * @remarks\n   *\n   * On a vector network, the value is set on the whole vector network. Use the vector network API to set it on individual vertices.\n   *\n   * This property can return {@link PluginAPI.mixed} if different vertices have different values.properties.\n   */\n  strokeJoin: StrokeJoin | PluginAPI['mixed']\n  /**\n   * The alignment of the stroke with respect to the boundaries of the shape.\n   *\n   * @remarks\n   *\n   * Center-aligned stroke means the center of the stroke falls exactly on the geometry. Inside-aligned stroke shifts the stroke so it lies completely inside the shape, and outside-aligned stroke is vice versa.\n   *\n   * Note: Inside and outside stroke are actually implemented by doubling the stroke weight and masking the stroke by the fill. This means inside-aligned stroke will never draw strokes outside the fill and outside-aligned stroke will never draw strokes inside the fill.\n   */\n  strokeAlign: 'CENTER' | 'INSIDE' | 'OUTSIDE'\n  /**\n   * A list of numbers specifying alternating dash and gap lengths, in pixels.\n   */\n  dashPattern: ReadonlyArray<number>\n  /**\n   * An array of paths representing the object strokes relative to the node.\n   * StrokeGeometry is always from the center regardless of the nodes `strokeAlign`.\n   */\n  readonly strokeGeometry: VectorPaths\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface IndividualStrokesMixin {\n  /** Determines the top stroke weight on a rectangle node or frame-like node. Must be non-negative and can be fractional. */\n  strokeTopWeight: number\n  /** Determines the bottom stroke weight on a rectangle node or frame-like node. Must be non-negative and can be fractional. */\n  strokeBottomWeight: number\n  /** Determines the left stroke weight on a rectangle node or frame-like node. Must be non-negative and can be fractional. */\n  strokeLeftWeight: number\n  /** Determines the right stroke weight on a rectangle node or frame-like node. Must be non-negative and can be fractional. */\n  strokeRightWeight: number\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface MinimalFillsMixin {\n  /**\n   * The paints used to fill the area of the shape. For help on how to change this value, see [Editing Properties](https://www.figma.com/plugin-docs/editing-properties).\n   *\n   * @remarks\n   *\n   * This property can return {@link PluginAPI.mixed} if the node has multiple sets of fills. Text nodes can have multiple sets of fills if some characters are colored differently than others.\n   *\n   * Use {@link UtilAPI.solidPaint} to create solid paint fills with CSS color strings.\n   *\n   * Page nodes have a [`backgrounds`](https://www.figma.com/plugin-docs/api/PageNode/#backgrounds) property instead of a `fills` property.\n   */\n  fills: ReadonlyArray<Paint> | PluginAPI['mixed']\n  /**\n   * The id of the {@link PaintStyle} object that the {@link MinimalFillsMixin.fills} property of this node is linked to.\n   *\n   * If the manifest contains`\"documentAccess\": \"dynamic-page\"`, this property is read-only. Use `setFillStyleIdAsync` to update the style.\n   *\n   * @remarks\n   *\n   * This property can return {@link PluginAPI.mixed} if the node has multiple fills.properties. Text nodes can have multiple fills if some characters are colored differently than others.\n   */\n  fillStyleId: string | PluginAPI['mixed']\n  /**\n   * Sets the {@link PaintStyle} that the {@link MinimalFillsMixin.fills} property of this node is linked to.\n   */\n  setFillStyleIdAsync(styleId: string): Promise<void>\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface GeometryMixin extends MinimalStrokesMixin, MinimalFillsMixin {\n  /**\n   * The decoration applied to vertices which have only one connected segment.\n   *\n   * @remarks\n   *\n   * On a vector network, the value is set on the whole vector network. Use the vector network API to set it on individual vertices.\n   *\n   * This property can return {@link PluginAPI.mixed} if different vertices have different values.properties.\n   */\n  strokeCap: StrokeCap | PluginAPI['mixed']\n  /**\n   * The miter limit on the stroke. This is the same as the [SVG miter limit](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit).\n   */\n  strokeMiterLimit: number\n  /**\n   * This method performs an action similar to using the \"Outline Stroke\" function in the editor from the right-click menu. However, this method creates and returns a new node while leaving the original intact. Returns `null` if the node has no strokes.\n   */\n  outlineStroke(): VectorNode | null\n  /**\n   * An array of paths representing the object fills relative to the node.\n   */\n  readonly fillGeometry: VectorPaths\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface CornerMixin {\n  /**\n   * The number of pixels to round the corners of the object by.\n   *\n   * @remarks\n   *\n   * This value must be non-negative and can be fractional. If an edge length is less than twice the corner radius, the corner radius for each vertex of the edge will be clamped to half the edge length.\n   *\n   * This property can return {@link PluginAPI.mixed} if different vertices have different values.properties. Vector nodes can have individual corner radii on each vertex. Rectangle nodes can also have different corner radii on each of the four corners.\n   */\n  cornerRadius: number | PluginAPI['mixed']\n  /**\n   * A value that lets you control how \"smooth\" the corners are. Ranges from 0 to 1.\n   *\n   * @remarks\n   *\n   * A value of 0 is the default and means that the corner is perfectly circular. A value of 0.6 means the corner matches the iOS 7 \"squircle\" icon shape. Other values produce various other curves. See [this post](https://www.figma.com/blog/desperately-seeking-squircles/) for the gory details!\n   */\n  cornerSmoothing: number\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface RectangleCornerMixin {\n  /**\n   */\n  topLeftRadius: number\n  /**\n   */\n  topRightRadius: number\n  /**\n   */\n  bottomLeftRadius: number\n  /**\n   */\n  bottomRightRadius: number\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface ExportMixin {\n  /**\n   * List of export settings stored on the node. For help on how to change this value, see [Editing Properties](https://www.figma.com/plugin-docs/editing-properties).\n   */\n  exportSettings: ReadonlyArray<ExportSettings>\n  /**\n   * Exports the node as an encoded image.\n   *\n   * If the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function.\n   *\n   * @param settings - When this parameter is absent, this function defaults to exporting as a PNG at 1x resolution.\n   *\n   * Note that the result is a Uint8Array, representing the bytes of the image file (encoded in the specified format).\n   *\n   * ```ts title=\"Create a hexagon, export as PNG, and place on canvas\"\n   * (async () => {\n   *   const polygon = figma.createPolygon()\n   *   polygon.pointCount = 6\n   *   polygon.fills = [{ type: 'SOLID', color: { r: 1, g: 0, b: 0 } }]\n   *\n   *   // highlight-start\n   *   // Export a 2x resolution PNG of the node\n   *   const bytes = await polygon.exportAsync({\n   *     format: 'PNG',\n   *     constraint: { type: 'SCALE', value: 2 },\n   *   })\n   *   // highlight-end\n   *\n   *   // Add the image onto the canvas as an image fill in a frame\n   *   const image = figma.createImage(bytes)\n   *   const frame = figma.createFrame()\n   *   frame.x = 200\n   *   frame.resize(200, 230)\n   *   frame.fills = [{\n   *     imageHash: image.hash,\n   *     scaleMode: \"FILL\",\n   *     scalingFactor: 1,\n   *     type: \"IMAGE\",\n   *   }]\n   * })()\n   * ```\n   *\n   * ```ts title=\"Export a VectorNode as an SVG string\"\n   *  (async () => {\n   *    // Create a triangle using the VectorPath API\n   *    const vector = figma.createVector()\n   *    vector.vectorPaths = [{\n   *      windingRule: \"EVENODD\",\n   *      data: \"M 0 100 L 100 100 L 50 0 Z\",\n   *    }]\n   *\n   *    // highlight-start\n   *    // Export the vector to SVG\n   *    const svg = await vector.exportAsync({ format: 'SVG_STRING' })\n   *    // highlight-end\n   *    console.log(svg);\n   *  })()\n   * ```\n   *\n   * ```ts title=\"Export a node as a JSON object\"\n   * (async () => {\n   *   const json = await figma.currentPage.selection[0].exportAsync({format: 'JSON_REST_V1'})\n   *   // Return a JSON object in the same format as the Figma REST API response\n   *   console.log(json.document)\n   * })()\n   * ```\n   */\n  exportAsync(settings?: ExportSettings): Promise<Uint8Array>\n  exportAsync(settings: ExportSettingsSVGString): Promise<string>\n  exportAsync(settings: ExportSettingsREST): Promise<Object>\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface FramePrototypingMixin {\n  /**\n   * Determines whether a frame will scroll in presentation mode when the frame contains content that exceed the frame's bounds. Reflects the value shown in \"Overflow Behavior\" in the Prototype tab.\n   *\n   * @remarks\n   *\n   * Frames directly parented under the canvas don't need this property to be set or for content to exceed the frame's bounds in order to scroll in presentation mode. They just need the frame to be bigger than the device or screen and will scroll automatically.\n   */\n  overflowDirection: OverflowDirection\n  /**\n   * Determines which children of the frame are fixed children in a scrolling frame.\n   *\n   * @remarks\n   *\n   * In Figma, fixed children are always on top of scrolling (non-fixed) children. Despite the \"Fix position when scrolling\" checkbox in the UI, fixed layers are not represented as a boolean property on individual layers. Instead, what we really have are two sections of children inside each frame. These section headers are visible in the layers panel when a frame has at least one fixed child.\n   */\n  numberOfFixedChildren: number\n  /**\n   * How this frame is positioned when opened as an overlay.\n   */\n  readonly overlayPositionType: OverlayPositionType\n  /**\n   * How this frame obscures the content under it when opened as an overlay.\n   */\n  readonly overlayBackground: OverlayBackground\n  /**\n   * How the user can interact with the content under this frame when opened as an overlay.\n   */\n  readonly overlayBackgroundInteraction: OverlayBackgroundInteraction\n}\ninterface VectorLikeMixin {\n  /**\n   * Exposes a complete, but more complex representation of vectors as a network of edges between vectices. See {@link VectorNetwork}.\n   *\n   * If the manifest contains`\"documentAccess\": \"dynamic-page\"`, this property is read-only. Use `setVectorNetworkAsync` to update the value.\n   */\n  vectorNetwork: VectorNetwork\n  /**\n   * Updates the vector network.\n   */\n  setVectorNetworkAsync(vectorNetwork: VectorNetwork): Promise<void>\n  /**\n   * Exposes a simple, but incomplete representation of vectors as path. See {@link VectorPaths}\n   */\n  vectorPaths: VectorPaths\n  /**\n   * Whether the vector handles are mirrored or independent.\n   */\n  handleMirroring: HandleMirroring | PluginAPI['mixed']\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface ReactionMixin {\n  /**\n   * List of [Reactions](https://www.figma.com/plugin-docs/api/Reaction) on this node, which includes both the method of interaction with this node in a prototype, and the behavior of that interaction. For help on how to change this value, see [Editing Properties](https://www.figma.com/plugin-docs/editing-properties).\n   *\n   * If the manifest contains`\"documentAccess\": \"dynamic-page\"`, this property is read-only. Use `setReactionsAsync` to update the value.\n   *\n   * @remarks\n   *\n   * [Prototyping](https://help.figma.com/hc/en-us/articles/360040314193-Guide-to-prototyping-in-Figma) in Figma lets users create connections between nodes that consist of a trigger (click, hover, etc...) and a corresponding list of actions, such as navigating to another frame or setting a variable. The `reactions` property lets you read and modify prototyping reactions on the node.\n   *\n   * ```ts title=\"Changing the transition duration in a prototyping action\"\n   * const node = figma.currentPage.selection[0]\n   * console.log(node.reactions)\n   *\n   * /*\n   * Output:\n   *\n   * [{\n   *   action: {\n   *     type: 'NODE',\n   *     destinationId: '4:1539',\n   *     navigation: 'NAVIGATE',\n   *     transition: {\n   *       type:'SMART_ANIMATE',\n   *       easing: { type: 'EASE_OUT' },\n   *       duration: 0.20000000298023224\n   *     },\n   *     preserveScrollPosition: false\n   *   },\n   *   actions: [{\n   *     type: 'NODE',\n   *     destinationId: '4:1539',\n   *     navigation: 'NAVIGATE',\n   *     transition: {\n   *       type:'SMART_ANIMATE',\n   *       easing: { type: 'EASE_OUT' },\n   *       duration: 0.20000000298023224\n   *     },\n   *     preserveScrollPosition: false\n   *   }],\n   *   trigger: { type: 'ON_CLICK' }\n   * }]\n   * *\\/\n   *\n   * // See clone() implementation from the Editing Properties page\n   * const newReactions = clone(node.reactions)\n   * // highlight-start\n   * newReactions[0].actions[0].transition.duration = 0.5\n   * // highlight-end\n   * await node.setReactionsAsync(newReactions)\n   * ```\n   *\n   * It is also possible to add Advanced Prototyping action types through the Plugin API: [Set Variable](https://help.figma.com/hc/en-us/articles/14506587589399-Use-variables-in-prototypes) and [Conditional](https://help.figma.com/hc/en-us/articles/15253220891799-Multiple-actions-and-conditionals).\n   * Moreover, Reactions now include the ability to execute multiple actions by updating the `actions` field on a `Reaction`.\n   *\n   * ```ts title=\"Create a button with a Reaction object that updates the visibility of another Frame.\"\n   * (async () => {\n   *   // Create collection with \"show\" variable inside\n   *   const collection = figma.variables.createVariableCollection('prototyping')\n   *   const modeId = collection.modes[0].modeId\n   *   const showVariable = figma.variables.createVariable(\n   *     'show',\n   *     collection,\n   *     'BOOLEAN'\n   *   )\n   *\n   *   // Initialize \"show\" variable to true\n   *   showVariable.setValueForMode(modeId, true)\n   *\n   *   const parentFrame = figma.createFrame()\n   *   parentFrame.resize(350, 200)\n   *\n   *   // Green \"Click me\" button\n   *   const toggleButton = figma.createFrame()\n   *   parentFrame.appendChild(toggleButton)\n   *   toggleButton.x = 50\n   *   toggleButton.y = 50\n   *   toggleButton.layoutMode = 'HORIZONTAL'\n   *   toggleButton.layoutSizingHorizontal = 'HUG'\n   *   toggleButton.layoutSizingVertical = 'HUG'\n   *   toggleButton.fills = [{ type: 'SOLID', color: { r: 0, g: 1, b: 0 } }]\n   *   const text = figma.createText()\n   *   await figma.loadFontAsync(text.fontName)\n   *   text.characters = 'Click me'\n   *   toggleButton.appendChild(text)\n   *\n   *   // Red square\n   *   const frame = figma.createFrame()\n   *   parentFrame.appendChild(frame)\n   *   frame.x = 200\n   *   frame.y = 50\n   *   frame.fills = [{ type: 'SOLID', color: { r: 1, g: 0, b: 0 } }]\n   *\n   *   // The \"show\" variable will now control the visibility of the frame\n   *   frame.setBoundVariable('visible', showVariable)\n   *\n   *   await toggleButton.setReactionsAsync([\n   *   {\n   *     trigger: { type: 'ON_CLICK' },\n   *     actions: [\n   *     {\n   *       type: 'CONDITIONAL',\n   *       conditionalBlocks: [\n   *       {\n   *         condition: { // Conditional: if \"show\" variable == true\n   *           type: 'EXPRESSION',\n   *           resolvedType: 'BOOLEAN',\n   *           value: {\n   *             expressionArguments: [\n   *               {\n   *                 type: 'VARIABLE_ALIAS',\n   *                 resolvedType: 'BOOLEAN',\n   *                 value: {\n   *                   type: 'VARIABLE_ALIAS',\n   *                   id: showVariable.id\n   *                 }\n   *               },\n   *               {\n   *                 type: 'BOOLEAN',\n   *                 resolvedType: 'BOOLEAN',\n   *                 value: true\n   *               }\n   *             ],\n   *             expressionFunction: 'EQUALS'\n   *           }\n   *         },\n   *         actions: [ // then set \"show\" variable to false\n   *           {\n   *             type: 'SET_VARIABLE',\n   *             variableId: showVariable.id,\n   *             variableValue: {\n   *               resolvedType: 'BOOLEAN',\n   *                type: 'BOOLEAN',\n   *                value: false\n   *             }\n   *           }\n   *         ]\n   *       },\n   *       {\n   *         actions: [ // else set \"show\" variable to true\n   *           {\n   *             type: 'SET_VARIABLE',\n   *             variableId: showVariable.id,\n   *             variableValue: {\n   *               resolvedType: 'BOOLEAN',\n   *               type: 'BOOLEAN',\n   *               value: true\n   *             }\n   *           }\n   *         ]\n   *       }]\n   *     }]\n   *   }])\n   * })()\n   * ```\n   */\n  reactions: ReadonlyArray<Reaction>\n  /**\n   * Updates the reactions on this node. See {@link ReactionMixin.reactions} for a usage example.\n   */\n  setReactionsAsync(reactions: Array<Reaction>): Promise<void>\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/DocumentationLink\n */\ninterface DocumentationLink {\n  readonly uri: string\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface PublishableMixin {\n  /**\n   * The plain-text annotation entered by the user for this style/component.\n   *\n   * @remarks\n   *\n   * To set a rich-text description using markdown, see {@link PublishableMixin.descriptionMarkdown}\n   *\n   * Caution: ⚠️ There is a currently a bug in Figma where the description field will appear to be missing or not up to date. Until this is fixed, the workaround is to re-publish nodes for which the description is missing.\n   */\n  description: string\n  /**\n   * The rich-text annotation entered by the user for this style/component.\n   *\n   * @remarks\n   *\n   *\n   * Caution: ⚠️ There is a currently a bug in Figma where the description field will appear to be missing or not up to date. Until this is fixed, the workaround is to re-publish nodes for which the description is missing.\n   */\n  descriptionMarkdown: string\n  /**\n   * The documentation links for this style/component.\n   *\n   * @remarks\n   *\n   * This API currently only supports setting a single documentation link.  To clear the documentation links, set to the empty list [].\n   *\n   * Example:\n   *\n   * ```ts\n   * node.documentationLinks = [{uri: \"https://www.figma.com\"}]\n   *\n   * // clear documentation links\n   * node.documentationLinks = []\n   * ```\n   */\n  documentationLinks: ReadonlyArray<DocumentationLink>\n  /**\n   * Whether this style/component is a remote style/component that doesn't live in the file (i.e. is from the team library). Remote components are read-only: attempts to change their properties will throw.\n   */\n  readonly remote: boolean\n  /**\n   * The key to use with {@link PluginAPI. relative: 0 }\n       */\n      offset?: MeasurementOffset\n      freeText?: string\n    },\n  ): Measurement\n  /**\n   * Edit a measurement’s offset.\n   *\n   * See the [Measurement type](https://www.figma.com/plugin-docs/api/Measurement) for usage examples.\n   *\n   * Note: This method is only available in Dev Mode. You can check the editor type of your plugin to know if the user is in Dev Mode or not:\n   *\n   * ```ts\n   * if (figma.editorType === 'dev') {\n   *   // In Figma's Dev Mode\n   * }\n   * ```\n   */\n  editMeasurement(\n    id: string,\n    newValue: {\n      offset?: MeasurementOffset\n      freeText?: string\n    },\n  ): Measurement\n  /**\n   * Delete a measurement.\n   *\n   * See the [Measurement type](https://www.figma.com/plugin-docs/api/Measurement) for usage examples.\n   *\n   * Note: This method is only available in Dev Mode. You can check the editor type of your plugin to know if the user is in Dev Mode or not:\n   *\n   * ```ts\n   * if (figma.editorType === 'dev') {\n   *   // In Figma's Dev Mode\n   * }\n   * ```\n   */\n  deleteMeasurement(id: string): void\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/node-properties\n */\ninterface VariantMixin {\n  /**\n   * Variant properties and values for this node. Is `null` for nodes that are not variants.\n   *\n   * @remarks\n   *\n   * [Variant properties](https://help.figma.com/hc/en-us/articles/5579474826519#h_01G2Q5GF4407ZTN7K8FHM2JREZ) define attributes of variants in a component set. For example, a component set for a button might have variant properties such as `size` and `state`, with different possible values for each property (e.g. `default`, `hover`, `pressed`, and `disabled` for the `state` property).\n   *\n   * ```ts title=\"Variant-related properties and methods for component sets, components, and instances\"\n   * componentSet.variantGroupProperties\n   *\n   * // Output\n   * {\n   *   Size: {\n   *     values: ['Small', 'Medium', 'Large']\n   *   },\n   *   State: {\n   *     values: ['Default', 'Hover', 'Pressed', 'Disabled']\n   *   }\n   * }\n   *\n   * // One of the variants / component nodes in the component set\n   * componentSet.children[1].variantProperties\n   *\n   * // Output\n   * { Size: 'Small', State: 'Hover' }\n   *\n   * // variantProperties also works on an instances of variants\n   * instance.variantProperties\n   *\n   * // Output\n   * { Size: 'Medium', State: 'Default' }\n   *\n   * // Use setProperties on an instance of a variant to configure it\n   * instance.setProperties({ Size: 'Large' })\n   * instance.variantProperties\n   *\n   * // Output\n   * { Size: 'Large', State: 'Default' }\n   * ```\n   *\n   * @deprecated Use {@link InstanceNode.componentProperties} instead.\n   */\n  readonly variantProperties: {\n    [property: string]: string\n  } | null\n}\ninterface ComponentPropertiesMixin {\n  /**\n   * All component properties and their default values that exist on this component set. `'VARIANT'` properties will also have a list of all variant options. `'BOOLEAN'`, `'TEXT'`, and `'INSTANCE_SWAP'` properties will have their names suffixed by a unique identifier starting with `'#'`, which is helpful for quickly distinguishing multiple component properties that have the same name in the Figma UI. The entire property name should be used for all Component property-related API methods and properties.\n   *\n   * @remarks\n   *\n   * [Component properties-related properties](https://help.figma.com/hc/en-us/articles/5579474826519-Create-and-use-component-properties) define parts of the component people can change by tying them to specific design properties. You can create component properties for any main component or component set, and apply them to nested layers of the component or variant.\n   *\n   * ```ts title=\"Component properties-related properties and methods for component sets, components, and instances\"\n   * componentSet.componentPropertyDefinitions\n   *\n   * // Output\n   * {\n   *   Size: {\n   *     type: 'VARIANT',\n   *     defaultValue: 'Small',\n   *     variantOptions: ['Small', 'Medium', 'Large'],\n   *   },\n   *   IconVisible#0:0: {\n   *     type: 'BOOLEAN',\n   *     defaultValue: false,\n   *   },\n   *   ButtonText#0:1: {\n   *     type: 'TEXT',\n   *     defaultValue: 'submit',\n   *   },\n   *   IconInstance#0:2: {\n   *     type: 'INSTANCE_SWAP',\n   *     defaultValue: '1:1',\n   *     preferredValues: [\n   *       {type: 'COMPONENT', key: 'ckey1'},\n   *       {type: 'COMPONENT_SET', key: 'sgkey1'}\n   *     ],\n   *   },\n   * }\n   *\n   * // componentProperties on an instance\n   * instance.componentProperties\n   *\n   * // Output\n   * {\n   *   Size: {\n   *     type: 'VARIANT',\n   *     value: 'Medium',\n   *   },\n   *   IconVisible#0:0: {\n   *     type: 'BOOLEAN',\n   *     value: false,\n   *   },\n   *   ButtonText#0:1: {\n   *     type: 'TEXT',\n   *     value: 'cancel',\n   *   },\n   *   IconInstance#0:2: {\n   *     type: 'INSTANCE_SWAP',\n   *     defaultValue: '1:1',\n   *     preferredValues: [\n   *       {type: 'COMPONENT', key: 'ckey1'},\n   *       {type: 'COMPONENT_SET', key: 'sgkey1'}\n   *     ],\n   *   },\n   * }\n   *\n   * // component property definitions can be created, edited, and deleted\n   * component.addComponentProperty(\"ButtonIcon\", \"INSTANCE_SWAP\", \"2:22\")\n   * // returns \"ButtonIcon#4:3\"\n   *\n   * component.editComponentProperty(\n   *   \"ButtonIcon#4:3\",\n   *   {name: \"PrimaryButtonIcon\", defaultValue: \"1:100\"}\n   * )\n   * // returns \"PrimaryButtonIcon#5:5\"\n   *\n   * component.deleteComponentProperty(\"PrimaryButtonIcon#5:5\")\n   *\n   * // componentPropertyDefinitions and componentProperties work similarly for\n   * // main components and their instances but will never have 'VARIANT'\n   * // properties.\n   * component.componentPropertyDefinitions\n   *\n   * // Output\n   * {\n   *   ImageVisible#0:0: {\n   *     type: 'BOOLEAN',\n   *     defaultValue: true,\n   *   },\n   *   Icon#0:1: {\n   *     type: 'INSTANCE_SWAP',\n   *     defaultValue: '7:23',\n   *   },\n   * }\n   *\n   * instance.componentProperties\n   *\n   * // Output\n   * {\n   *   ImageVisible#0:0: {\n   *     type: 'BOOLEAN',\n   *     value: true,\n   *   },\n   *   Icon#0:1: {\n   *     type: 'INSTANCE_SWAP',\n   *     value: '1:24',\n   *   },\n   * }\n   *\n   * // component properties can be applied to node properties of nested layers\n   * component.children[0].children[0].componentPropertyReferences = {\n   *   'visible': 'IconVisible#0:0'\n   * }\n   * component.children[0].children[0].visible\n   *\n   * // Output\n   * false // gets value from component property definition\n   *\n   * // Use setProperties on an instance to configure it\n   * instance.setProperties({ Size: 'Large', 'ButtonText#0:1': 'login' })\n   * instance.componentProperties\n   *\n   * // Output\n   * {\n   *   Size: {\n   *     type: 'VARIANT',\n   *     value: 'Large',\n   *   },\n   *   IconVisible#0:0: {\n   *     type: 'BOOLEAN',\n   *     value: false,\n   *   },\n   *   ButtonText#0:1: {\n   *     type: 'TEXT',\n   *     value: 'login',\n   *   },\n   * }\n   *\n   * instance.setProperties({ 'IconVisible#0:0': true })\n   * instance.componentProperties\n   *\n   * // Output\n   * {\n   *   Size: {\n   *     type: 'VARIANT',\n   *     value: 'Large',\n   *   },\n   *   IconVisible#0:0: {\n   *     type: 'BOOLEAN',\n   *     value: true,\n   *   },\n   *   ButtonText#0:1: {\n   *     type: 'TEXT',\n   *     value: 'login',\n   *   },\n   * }\n   * ```\n   */\n  readonly componentPropertyDefinitions: ComponentPropertyDefinitions\n  /**\n   * Adds a new component property to this node and returns the property name with its unique identifier suffixed. This function supports properties with type `'BOOLEAN'`, `'TEXT'`, `'INSTANCE_SWAP'` or `'VARIANT'`.\n   */\n  addComponentProperty(\n    propertyName: string,\n    type: ComponentPropertyType,\n    defaultValue: string | boolean | VariableAlias,\n    options?: ComponentPropertyOptions,\n  ): string\n  /**\n   * Modifies the name, default value, or preferred values of an existing component property on this node and returns the property name with its unique identifier suffixed.\n   *\n   * This function supports properties with type `'BOOLEAN'`, `'TEXT'`, `'INSTANCE_SWAP'`, or `'VARIANT'` with the following restrictions:\n   *\n   * - `name` is supported for all properties\n   * - `defaultValue` is supported for `'BOOLEAN'`, `'TEXT'`, and `'INSTANCE_SWAP'` properties, but not for `'VARIANT'` properties\n   * - `preferredValues` is only supported for `'INSTANCE_SWAP'` properties\n   */\n  editComponentProperty(\n    propertyName: string,\n    newValue: {\n      name?: string\n      defaultValue?: string | boolean | VariableAlias\n      preferredValues?: InstanceSwapPreferredValue[]\n    },\n  ): string\n  /**\n   * Deletes an existing component property on this node. This function only supports properties with type `'BOOLEAN'`, `'TEXT'`, or `'INSTANCE_SWAP'`.\n   */\n  deleteComponentProperty(propertyName: string): void\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/TextNode\n */\ninterface BaseNonResizableTextMixin {\n  /**\n   * Returns whether the text uses a font currently not available to the document.\n   */\n  readonly hasMissingFont: boolean\n  /**\n   * The size of the font. Has minimum value of 1.\n   */\n  fontSize: number | PluginAPI['mixed']\n  /**\n   * The font family (e.g. \"Inter\"), and font style (e.g. \"Regular\"). Setting this property to a different value requires the new font to be loaded.\n   */\n  fontName: FontName | PluginAPI['mixed']\n  /**\n   * The weight of the font (e.g. 400 for \"Regular\", 700 for \"Bold\").\n   */\n  readonly fontWeight: number | PluginAPI['mixed']\n  /**\n   * Overrides the case of the raw characters in the text node. Requires the font to be loaded.\n   */\n  textCase: TextCase | PluginAPI['mixed']\n  /**\n   * [OpenType features](https://help.figma.com/hc/en-us/articles/4913951097367) that have been explicitly enabled or disabled.\n   *\n   * @remarks\n   *\n   * The **Details** tab in the [Type settings panel](https://help.figma.com/hc/en-us/articles/360039956634-Explore-text-properties#type-settings) shows all the OpenType features that are available for the current font.\n   *\n   * This property gives you a map of four-character OpenType features to booleans indicating whether the features are explicitly enabled or disabled. For example, if the map contains `{ CALT: false }`, then the \"Contextual alternates\" feature is disabled.\n   *\n   * Note: This map only contains features that diverge from their default values. Some OpenType features are enabled by default and some are disabled by default. For example `CLIG` and `LIGA` are on by default, whereas `LNUM` and `TNUM` are disabled by default.\n   *\n   * Here are some useful resources for learning about OpenType features:\n   *\n   * - [An ode to OpenType [Figma blog]](https://www.figma.com/blog/opentype-font-features/)\n   * - [OpenType feature tags [Microsoft]](https://learn.microsoft.com/en-us/typography/opentype/spec/featuretags)\n   * - [OpenType font features guide [MDN]](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/OpenType_fonts_guide)\n   * - [OpenType Features in CSS [Sparanoid]](https://sparanoid.com/lab/opentype-features/)\n   *\n   * ```ts title=\"Getting OpenType features from the currently-selected text node\"\n   * // For a node that uses the Inter font with\n   * // \"Contextual alternates\" disabled (shows -> instead of ➔):\n   * // { CALT: false }\n   * console.log(figma.currentPage.selection[0].openTypeFeatures)\n   * ```\n   */\n  readonly openTypeFeatures:\n    | {\n        readonly [feature in OpenTypeFeature]: boolean\n      }\n    | PluginAPI['mixed']\n  /**\n   * The spacing between the individual characters. Requires the font to be loaded.\n   */\n  letterSpacing: LetterSpacing | PluginAPI['mixed']\n  /**\n   * A {@link HyperlinkTarget} if the text node has exactly one hyperlink, or `null` if the node has none.\n   */\n  hyperlink: HyperlinkTarget | null | PluginAPI['mixed']\n  /**\n   * The raw characters in the text node. Setting this property requires the font the be loaded.\n   *\n   * @remarks\n   *\n   * Setting this property will reset styles applied to character ranges.\n   *\n   * Setting the `characters` property can change the {@link BaseNodeMixin.name} of the node if `autoRename === true`.\n   */\n  characters: string\n  /**\n   * Insert `characters` at index `start` in the text.\n   *\n   * @remarks\n   *\n   * This API allows you to insert characters in a text node while preserving the styles of the existing characters. However, you still need to call {@link PluginAPI.loadFontAsync} before using this API.\n   *\n   * The style of the inserted characters will be copied from the preceding character if `useStyle` is \"BEFORE\" or not provided. Otherwise, the style of inserted characters will be copied from the following character. If there is no preceding or following character (i.e. `start` is at the boundary of the string), then the style will be copied from the closest existing character.\n   *\n   * Caution: ⚠ Did you know: not all glyphs that you might think as a \"character\" are actually stored as a single character in JavaScript string? JavaScript strings are UTF-16 encoded. Some characters like \"👍\" are stored using two characters! Try it in the JavaScript console: \"👍\".length is 2! The two characters are called \"surrogate pairs\". Even more mindblowing: some characters are made of multiple _emojis_. For example, \"👨‍👧\", which you should see in your browser as a single character, has length 5. \"👨‍👧\".substring(0, 2) is \"👨\" and \"👨‍👧\".substring(3, 5) is \"👧\".\n   */\n  insertCharacters(start: number, characters: string, useStyle?: 'BEFORE' | 'AFTER'): void\n  /**\n   * Remove characters in the text from `start` (inclusive) to `end` (exclusive).\n   *\n   * @remarks\n   *\n   * This API allows you to remove characters in a text node while preserving the styles of the existing characters. However, you still need to call {@link PluginAPI.loadFontAsync} before using this API.\n   *\n   * Caution: ⚠ Did you know: not all glyphs that you might think as a \"character\" are actually stored as a single character in JavaScript string? JavaScript strings are UTF-16 encoded. Some characters like \"👍\" are stored using two characters! Try it in the JavaScript console: \"👍\".length is 2! The two characters are called \"surrogate pairs\". Even more mindblowing: some characters are made of multiple _emojis_. For example, \"👨‍👧\", which you should see in your browser as a single character, has length 5. \"👨‍👧\".substring(0, 2) is \"👨\" and \"👨‍👧\".substring(3, 5) is \"👧\".\n   */\n  deleteCharacters(start: number, end: number): void\n  /**\n   * Get the `fontSize` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeFontSize(start: number, end: number): number | PluginAPI['mixed']\n  /**\n   * Set the `fontSize` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded.\n   */\n  setRangeFontSize(start: number, end: number, value: number): void\n  /**\n   * Get the `fontName` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeFontName(start: number, end: number): FontName | PluginAPI['mixed']\n  /**\n   * Set the `fontName` from characters in range `start` (inclusive) to `end` (exclusive). Requires the new font to be loaded.\n   */\n  setRangeFontName(start: number, end: number, value: FontName): void\n  /**\n   * Get the `fontWeight` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeFontWeight(start: number, end: number): number | PluginAPI['mixed']\n  /**\n   * Get the `fontName`s from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeAllFontNames(start: number, end: number): FontName[]\n  /**\n   * Get the `textCase` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeTextCase(start: number, end: number): TextCase | PluginAPI['mixed']\n  /**\n   * Set the `textCase` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded.\n   */\n  setRangeTextCase(start: number, end: number, value: TextCase): void\n  /**\n   * Get the {@link BaseNonResizableTextMixin.openTypeFeatures} from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeOpenTypeFeatures(\n    start: number,\n    end: number,\n  ):\n    | {\n        readonly [feature in OpenTypeFeature]: boolean\n      }\n    | PluginAPI['mixed']\n  /**\n   * Get the `letterSpacing` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeLetterSpacing(start: number, end: number): LetterSpacing | PluginAPI['mixed']\n  /**\n   * Set the `letterSpacing` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded.\n   */\n  setRangeLetterSpacing(start: number, end: number, value: LetterSpacing): void\n  /**\n   * Get the `hyperlink` from characters in range `start` (inclusive) to `end` (exclusive). Returns a {@link HyperlinkTarget} if the range contains exactly one hyperlink, or `null` if the range contains none.\n   */\n  getRangeHyperlink(start: number, end: number): HyperlinkTarget | null | PluginAPI['mixed']\n  /**\n   * Set the `hyperlink` from characters in range `start` (inclusive) to `end` (exclusive). Removes the hyperlink in range if `value` is `null`.\n   */\n  setRangeHyperlink(start: number, end: number, value: HyperlinkTarget | null): void\n  /**\n   * Get the `fills` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeFills(start: number, end: number): Paint[] | PluginAPI['mixed']\n  /**\n   * Set the `fills` from characters in range `start` (inclusive) to `end` (exclusive). Requires font to be loaded.\n   *\n   * Can be bound to color variables by using {@link VariablesAPI.setBoundVariableForPaint} on one or more of the provided `Paint`s\n   */\n  setRangeFills(start: number, end: number, value: Paint[]): void\n  /**\n   * Get the `textStyleId` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeTextStyleId(start: number, end: number): string | PluginAPI['mixed']\n  /**\n   * Set the provided {@link TextStyle} to characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded.\n   */\n  setRangeTextStyleIdAsync(start: number, end: number, styleId: string): Promise<void>\n  /**\n   * Set the `textStyleId` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded.\n   *\n   * @deprecated Use `setRangeTextStyleIdAsync` instead. This function will throw an exception if the plugin manifest contains `\"documentAccess\": \"dynamic-page\"`.\n   */\n  setRangeTextStyleId(start: number, end: number, value: string): void\n  /**\n   * Get the `fillStyleId` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeFillStyleId(start: number, end: number): string | PluginAPI['mixed']\n  /**\n   * Set the provided {@link PaintStyle} as a fill to characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  setRangeFillStyleIdAsync(start: number, end: number, styleId: string): Promise<void>\n  /**\n   * Set the `fillStyleId` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded.\n   *\n   * @deprecated Use `setRangeFillStyleIdAsync` instead. This function will throw an exception if the plugin manifest contains `\"documentAccess\": \"dynamic-page\"`.\n   */\n  setRangeFillStyleId(start: number, end: number, value: string): void\n  /**\n   * Get the `boundVariable` for a given field from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeBoundVariable(\n    start: number,\n    end: number,\n    field: VariableBindableTextField,\n  ): VariableAlias | null | PluginAPI['mixed']\n  /**\n   * Set the `boundVariable` for a given field from characters in range `start` (inclusive) to `end` (exclusive). Requires any new fonts to be loaded.\n   */\n  setRangeBoundVariable(\n    start: number,\n    end: number,\n    field: VariableBindableTextField,\n    variable: Variable | null,\n  ): void\n  /**\n   * Get text segments along with the desired text properties (font size, text case, etc...)\n   *\n   * @param fields - An array of text properties. Any text property that can apply to specific character ranges is supported:\n   * - fontSize\n   * - fontName\n   * - fontWeight\n   * - textDecoration\n   * - textDecorationStyle\n   * - textDecorationOffset\n   * - textDecorationThickness\n   * - textDecorationColor\n   * - textDecorationSkipInk\n   * - textCase\n   * - lineHeight\n   * - letterSpacing\n   * - fills\n   * - textStyleId\n   * - fillStyleId\n   * - listOptions\n   * - listSpacing\n   * - indentation\n   * - paragraphIndent\n   * - paragraphSpacing\n   * - hyperlink\n   * - boundVariables\n   * - textStyleOverrides\n   * - openTypeFeatures\n   *\n   * @param start - An optional start index for the characters to retrieve\n   * @param end - An optional end index (required if `start` is provided)\n   *\n   * @remarks\n   *\n   * This function provides an easy and performant way to get multiple text properties which may have [mixed values](https://www.figma.com/plugin-docs/working-with-text#mixed-styles), along with which characters these values apply to.\n   * It will return an array of {@link StyledTextSegment}s containing the desired fields, along with the characters and their start and end index.\n   *\n   * To illustrate the behavior of this function, here are a few examples:\n   *\n   * Node containing \"**hello** world\":\n   * ```js\n   * textNode.getStyledTextSegments(['fontName'])\n   *\n   * // Output: contains 2 segments because the text is no longer bolded after \"hello\"\n   * [\n   *   {\n   *     characters: \"hello\",\n   *     start: 0,\n   *     end: 5,\n   *     fontName: { family: 'Inter', style: 'Bold' },\n   *   },\n   *   {\n   *     characters: \" world\",\n   *     start: 5,\n   *     end: 11,\n   *     fontName: { family: 'Inter', style: 'Regular' },\n   *   }\n   * ]\n   * ```\n   *\n   * Node containing:\n   * - Item 1\n   *   - **Item** 1.1\n   * ```js\n   * textNode.getStyledTextSegments(['fontName', 'indentation'])\n   *\n   * // Output: contains 3 segments because the font / indentation changes\n   * // before and after the second \"Item\"\n   * [\n   *   {\n   *     characters: 'Item 1\\n',\n   *     start: 0,\n   *     end: 7,\n   *     fontName: { family: 'Inter', style: 'Regular' },\n   *     indentation: 1\n   *   },\n   *   {\n   *     characters: 'Item',\n   *     start: 7,\n   *     end: 11,\n   *     fontName: { family: 'Inter', style: 'Bold' },\n   *     indentation: 2\n   *   },\n   *   {\n   *     characters: ' 1.1',\n   *     start: 11,\n   *     end: 15,\n   *     fontName: { family: 'Inter', style: 'Regular' },\n   *     indentation: 2\n   *   }\n   * ]\n   * ```\n   *\n   * Node containing \"😁 😭 😅😂😳😎\":\n   * ```js\n   * textNode.getStyledTextSegments(['letterSpacing'])\n   *\n   * // Output: many emoji have length 2 in Javascript\n   * [\n   *   {\n   *     characters: '😁😭',\n   *     start: 0,\n   *     end: 4,\n   *     letterSpacing: { unit: 'PERCENT', value: 50 }\n   *   },\n   *   {\n   *     characters: '😅😂😳😎',\n   *     start: 4,\n   *     end: 12,\n   *     letterSpacing: { unit: 'PERCENT', value: 0 }\n   *   }\n   * ]\n   *\n   * textNode.getStyledTextSegments(['letterSpacing'], 1, 3)\n   *\n   * // Output: if the requested range starts or ends in the middle\n   * // of surrogate pairs, those pairs will be trimmed and you will\n   * // see raw Unicode code points\n   * [\n   *   {\n   *     characters: '\\uDE01\\uD83D',\n   *     start: 1,\n   *     end: 3,\n   *     letterSpacing: { unit: 'PERCENT', value: 50 }\n   *   }\n   * ]\n   *\n   * textNode.getStyledTextSegments(['letterSpacing'], 3, 5)\n   *\n   * // Output: similar to above, but Unicode code points span\n   * // a change in letter spacing\n   * [\n   *   {\n   *     characters: '\\uDE2D',\n   *     start: 3,\n   *     end: 4,\n   *     letterSpacing: { unit: 'PERCENT', value: 50 }\n   *   },\n   *   {\n   *     characters: '\\uD83D',\n   *     start: 4,\n   *     end: 5,\n   *     letterSpacing: { unit: 'PERCENT', value: 0 }\n   *   }\n   * ]\n   * ```\n   *\n   * See {@link BaseNonResizableTextMixin.insertCharacters} for more information on surrogate pairs.\n   */\n  getStyledTextSegments<\n    StyledTextSegmentFields extends (keyof Omit<\n      StyledTextSegment,\n      'characters' | 'start' | 'end'\n    >)[],\n  >(\n    fields: StyledTextSegmentFields,\n    start?: number,\n    end?: number,\n  ): Array<\n    Pick<StyledTextSegment, StyledTextSegmentFields[number] | 'characters' | 'start' | 'end'>\n  >\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/TextNode\n */\ninterface NonResizableTextMixin extends BaseNonResizableTextMixin {\n  /**\n   * The indentation of paragraphs (offset of the first line from the left). Setting this property requires the font the be loaded.\n   */\n  paragraphIndent: number\n  /**\n   * The vertical distance between paragraphs. Setting this property requires the font to be loaded.\n   */\n  paragraphSpacing: number\n  /**\n   * The vertical distance between lines of a list.\n   */\n  listSpacing: number\n  /**\n   * Whether punctuation, like quotation marks, hangs outside the text box.\n   */\n  hangingPunctuation: boolean\n  /**\n   * Whether numbered list counters or unordered list bullets hang outside the text box.\n   */\n  hangingList: boolean\n  /**\n   * Whether the text is underlined or has a strikethrough. Requires the font to be loaded.\n   */\n  textDecoration: TextDecoration | PluginAPI['mixed']\n  /**\n   * The text decoration style (e.g. \"SOLID\"). If the text is not underlined, this value will be null. Requires the font to be loaded.\n   */\n  textDecorationStyle: TextDecorationStyle | PluginAPI['mixed'] | null\n  /**\n   * The text decoration offset. If the text is not underlined, this value will be null. Requires the font to be loaded.\n   */\n  textDecorationOffset: TextDecorationOffset | PluginAPI['mixed'] | null\n  /**\n   * The text decoration thickness. If the text is not underlined, this value will be null. Requires the font to be loaded.\n   */\n  textDecorationThickness: TextDecorationThickness | PluginAPI['mixed'] | null\n  /**\n   * The text decoration color. If the text is not underlined, this value will be null. Requires the font to be loaded.\n   */\n  textDecorationColor: TextDecorationColor | PluginAPI['mixed'] | null\n  /**\n   * Whether the text decoration skips descenders. If the text is not underlined, this value will be null. Requires the font to be loaded.\n   */\n  textDecorationSkipInk: boolean | PluginAPI['mixed'] | null\n  /**\n   * The spacing between the lines in a paragraph of text. Requires the font to be loaded.\n   */\n  lineHeight: LineHeight | PluginAPI['mixed']\n  /**\n   * The removal of the vertical space above and below text glyphs. Requires the font to be loaded.\n   */\n  leadingTrim: LeadingTrim | PluginAPI['mixed']\n  /**\n   * Get the `textDecoration` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeTextDecoration(start: number, end: number): TextDecoration | PluginAPI['mixed']\n  /**\n   * Set the `textDecoration` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded.\n   */\n  setRangeTextDecoration(start: number, end: number, value: TextDecoration): void\n  /**\n   * Get the `textDecorationStyle` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeTextDecorationStyle(\n    start: number,\n    end: number,\n  ): TextDecorationStyle | PluginAPI['mixed'] | null\n  /**\n   * Set the `textDecorationStyle` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded.\n   */\n  setRangeTextDecorationStyle(start: number, end: number, value: TextDecorationStyle): void\n  /**\n   * Get the `textDecorationOffset` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeTextDecorationOffset(\n    start: number,\n    end: number,\n  ): TextDecorationOffset | PluginAPI['mixed'] | null\n  /**\n   * Set the `textDecorationOffset` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded.\n   */\n  setRangeTextDecorationOffset(start: number, end: number, value: TextDecorationOffset): void\n  /**\n   * Get the `textDecorationThickness` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeTextDecorationThickness(\n    start: number,\n    end: number,\n  ): TextDecorationThickness | PluginAPI['mixed'] | null\n  /**\n   * Set the `textDecorationThickness` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded.\n   */\n  setRangeTextDecorationThickness(start: number, end: number, value: TextDecorationThickness): void\n  /**\n   * Get the `textDecorationColor` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeTextDecorationColor(\n    start: number,\n    end: number,\n  ): TextDecorationColor | PluginAPI['mixed'] | null\n  /**\n   * Set the `textDecorationColor` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded.\n   */\n  setRangeTextDecorationColor(start: number, end: number, value: TextDecorationColor): void\n  /**\n   * Get the `textDecorationSkipInk` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeTextDecorationSkipInk(start: number, end: number): boolean | PluginAPI['mixed'] | null\n  /**\n   * Set the `textDecorationSkipInk` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded.\n   */\n  setRangeTextDecorationSkipInk(start: number, end: number, value: boolean): void\n  /**\n   * Get the `lineHeight` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeLineHeight(start: number, end: number): LineHeight | PluginAPI['mixed']\n  /**\n   * Set the `lineHeight` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded.\n   */\n  setRangeLineHeight(start: number, end: number, value: LineHeight): void\n  /**\n   * Get the `textListOptions` from characters in range `start` (inclusive) to `end` (exclusive). Returns a {@link TextListOptions}\n   */\n  getRangeListOptions(start: number, end: number): TextListOptions | PluginAPI['mixed']\n  /**\n   * Set the `textListOptions` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  setRangeListOptions(start: number, end: number, value: TextListOptions): void\n  /**\n   * Get the `listSpacing` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeListSpacing(start: number, end: number): number | PluginAPI['mixed']\n  /**\n   * Set the `listSpacing` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  setRangeListSpacing(start: number, end: number, value: number): void\n  /**\n   * Get the `indentation` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeIndentation(start: number, end: number): number | PluginAPI['mixed']\n  /**\n   * Set the `indentation` from characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  setRangeIndentation(start: number, end: number, value: number): void\n  /**\n   * Get the `paragraphIndent` for a paragraph containing characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeParagraphIndent(start: number, end: number): number | PluginAPI['mixed']\n  /**\n   * Set the `paragraphIndent` for a paragraph containing characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  setRangeParagraphIndent(start: number, end: number, value: number): void\n  /**\n   * Get the `paragraphSpacing` for a paragraph containing characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  getRangeParagraphSpacing(start: number, end: number): number | PluginAPI['mixed']\n  /**\n   * Set the `paragraphSpacing` for a paragraph containing characters in range `start` (inclusive) to `end` (exclusive).\n   */\n  setRangeParagraphSpacing(start: number, end: number, value: number): void\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/TextPathNode\n */\ninterface NonResizableTextPathMixin extends BaseNonResizableTextMixin {}\n/**\n * @see https://www.figma.com/plugin-docs/api/TextNode\n */\ninterface TextSublayerNode extends NonResizableTextMixin, MinimalFillsMixin {}\ninterface DocumentNode extends BaseNodeMixin {\n  /**\n   * The type of this node, represented by the string literal \"DOCUMENT\"\n   */\n  readonly type: 'DOCUMENT'\n  /**\n   * The list of children. For `DocumentNode`s, children are always {@link PageNode}s.\n   */\n  readonly children: ReadonlyArray<PageNode>\n  /**\n   * The color profile of this document. This will be \"LEGACY\" for documents created before color management was launched.\n   */\n  readonly documentColorProfile: 'LEGACY' | 'SRGB' | 'DISPLAY_P3'\n  /**\n   * Adds a new page to the end of the `children` array.\n   */\n  appendChild(child: PageNode): void\n  /**\n   * Adds a new page at the specified index in the `children` array.\n   */\n  insertChild(index: number, child: PageNode): void\n  /**\n   * Searches the immediate children of this node (i.e. all page nodes, not including their children). Returns all pages for which `callback` returns true.\n   *\n   * @param callback - A function that evaluates whether to return the provided `node`. If this argument is omitted, `findChildren` returns `node.children`.\n   *\n   * @remarks\n   *\n   * Example: find pages matching a certain name scheme\n   * ```ts\n   * const templates = figma.root.findChildren(n => n.name.includes(\"template\"))\n   * ```\n   */\n  findChildren(callback?: (node: PageNode) => boolean): Array<PageNode>\n  /**\n   * Searches the immediate children of this node (i.e. all page nodes, not including their children). Returns the first page for which `callback` returns true.\n   *\n   * @param callback - A function that evaluates whether to return the provided `node`.\n   *\n   * @remarks\n   *\n   * This function returns `null` if no matching node is found.\n   *\n   * Example: find the first page matching a certain name scheme\n   * ```ts\n   * const firstTemplate = figma.root.findChild(n => n.name.includes(\"template\"))\n   * ```\n   */\n  findChild(callback: (node: PageNode) => boolean): PageNode | null\n  /**\n   * Searches the entire document tree. Returns all nodes for which `callback` returns true.\n   *\n   * If the manifest contains `\"documentAccess\": \"dynamic-page\"`, you must first call {@link PluginAPI.loadAllPagesAsync} to access this function.\n   *\n   * @param callback - A function that evaluates whether to return the provided `node`. If this argument is omitted, `findAll` returns all nodes in the subtree.\n   *\n   * @remarks\n   *\n   * Nodes are included in **back-to-front** order. Parents always appear before their children, and children appear in same relative order before their children, and children appear in same relative order as in the {@link ChildrenMixin.children} array.\n   *\n   * This traversal method is known as [\"pre-order traversal\"](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR)).\n   *\n   * Note that the root node itself is **not included**.\n   *\n   * Example: find all nodes whose name is \"Color\":\n   * ```ts\n   * await figma.loadAllPagesAsync() // call this once when the plugin runs\n   * const colors = figma.root.findAll(n => n.name === \"Color\")\n   * ```\n   *\n   * Caution: ⚠ Large documents in Figma can have tens of thousands of nodes. Be careful using this function as it could be very slow.\n   * Please refer to our [recommendations](https://www.figma.com/plugin-docs/accessing-document#optimizing-traversals) for how to optimize document traversals.\n   */\n  findAll(callback?: (node: PageNode | SceneNode) => boolean): Array<PageNode | SceneNode>\n  /**\n   * Searches this entire page (this node's children, its children's children, etc.). Returns the first node for which `callback` returns true.\n   *\n   * If the manifest contains `\"documentAccess\": \"dynamic-page\"`, you must first call {@link PluginAPI.loadAllPagesAsync} to access this function.\n   *\n   * @param callback - A function that evaluates whether to return the provided `node`.\n   *\n   * @remarks\n   *\n   * This function returns `null` if no matching node is found. The traversal order is the same as in {@link ChildrenMixin.findAll}.\n   *\n   * Note that the root node itself is **not included**.\n   *\n   * Example: find one node whose name is \"Template\":\n   * ```ts\n   * await figma.loadAllPagesAsync() // call this once when the plugin runs\n   * const template = figma.root.findOne(n => n.name === \"Template\")\n   * ```\n   *\n   * Caution: ⚠ Large documents in Figma can have tens of thousands of nodes. Be careful using this function as it could be very slow.\n   * Please refer to our [recommendations](https://www.figma.com/plugin-docs/accessing-document#optimizing-traversals) for how to optimize document traversals.\n   */\n  findOne(callback: (node: PageNode | SceneNode) => boolean): PageNode | SceneNode | null\n  /**\n   * Searches the entire document tree. Returns all nodes that satisfy all of specified criteria.\n   *\n   * If the manifest contains `\"documentAccess\": \"dynamic-page\"`, you must first call {@link PluginAPI.loadAllPagesAsync} to access this function.\n   *\n   * Similar to {@link ChildrenMixin.findAllWithCriteria} with the main difference being that this searches all the nodes in the document, which also includes {@link PageNode} objects.\n   */\n  findAllWithCriteria<T extends NodeType[]>(\n    criteria: FindAllCriteria<T>,\n  ): Array<\n    {\n      type: T[number]\n    } & (PageNode | SceneNode)\n  >\n  /**\n   * Searches the entire document tree. Returns all widget nodes that match the provided `widgetId`.\n   *\n   * If the manifest contains `\"documentAccess\": \"dynamic-page\"`, you must first call {@link PluginAPI.loadAllPagesAsync} to access this function.\n   *\n   * @param widgetId - The widget ID to search for, which represents unique identifier for the widget.\n   *\n   * @remarks\n   *\n   * `node.widgetId` is not to be confused with `node.id`, which is the unique identifier for the node on the canvas. In other words, if you clone a widget, the cloned widget will have a matching `widgetId` but a different `id`.\n   */\n  findWidgetNodesByWidgetId(widgetId: string): Array<WidgetNode>\n}\ninterface ExplicitVariableModesMixin {\n  /**\n   * The explicitly set modes for this node.\n   * For `SceneNodes`, represents a subset of {@link SceneNodeMixin.resolvedVariableModes }.\n   * Note that this does not include [workspace and team-default modes](https://help.figma.com/hc/en-us/articles/12611253730071).\n   */\n  explicitVariableModes: {\n    [collectionId: string]: string\n  }\n  /**\n   * Clears an explicit mode for the given collection on this node\n   *\n   * @deprecated Use `clearExplicitVariableModeForCollection(VariableCollection)` instead. This function will throw an exception if the plugin manifest contains `\"documentAccess\": \"dynamic-page\"`.\n   * */\n  clearExplicitVariableModeForCollection(collectionId: string): void\n  /**\n   * Clears an explicit mode for the given collection on this node\n   *\n   * @param collection - A variable collection. Make sure to pass a collection object here; passing a variable collection ID is deprecated.\n   */\n  clearExplicitVariableModeForCollection(collection: VariableCollection): void\n  /**\n   * Sets an explicit mode for the given collection on this node\n   *\n   * @deprecated Use `setExplicitVariableModeForCollection(VariableCollection, Variable)` instead. This function will throw an exception if the plugin manifest contains `\"documentAccess\": \"dynamic-page\"`.\n   */\n  setExplicitVariableModeForCollection(collectionId: string, modeId: string): void\n  /**\n   * Sets an explicit mode for the given collection on this node\n   *\n   * @param collection - A variable collection. Make sure to pass a collection object here; passing a variable collection ID is deprecated.\n   * @param modeId - A variable mode ID.\n   */\n  setExplicitVariableModeForCollection(collection: VariableCollection, modeId: string): void\n}\ninterface PageNode\n  extends BaseNodeMixin,\n    ChildrenMixin,\n    ExportMixin,\n    ExplicitVariableModesMixin,\n    MeasurementsMixin {\n  /**\n   * The type of this node, represented by the string literal \"PAGE\"\n   */\n  readonly type: 'PAGE'\n  /**\n   * Create a clone of this page, parented under {@link PluginAPI.root}. Prototyping connections will be copied such that they point to their equivalent in the cloned page. Components will be cloned as instances who master is the original component.\n   */\n  clone(): PageNode\n  /**\n   * The guides on this page.\n   *\n   * @remarks\n   *\n   * Like many of our array properties, `page.guide` creates a new, read-only array every time it is called. To change the guides, you will need to make a copy of the existing array and/or assign a new array.\n   *\n   * Example:\n   * ```ts\n   * function addNewGuide(page: PageNode, guide: Guide) {\n   *   // .concat() creates a new array\n   *   page.guides = page.guides.concat(guide)\n   * }\n   * ```\n   */\n  guides: ReadonlyArray<Guide>\n  /**\n   * The selected nodes on this page. Each page stores its own selection separately. The ordering of nodes in the selection is **unspecified**, you should not be relying on it.\n   *\n   * @remarks\n   *\n   * Like many of our array properties, `page.selection` returns a new, read-only array every time it is called (the nodes inside are references to existing nodes, not copies). To change the selection, you will need to make a copy of the existing array and/or assign a new array.\n   *\n   * Example:\n   * ```ts\n   * function addNewNodeToSelection(page: PageNode, node: SceneNode) {\n   *   // .concat() creates a new array\n   *   page.selection = page.selection.concat(node)\n   * }\n   *\n   * function selectFirstChildOfNode(page: PageNode, node: SceneNode) {\n   *   if (node.children.length > 0) {\n   *     page.selection = [node.children[0]]\n   *   }\n   * }\n   * ```\n   *\n   * - As the selection is just a node property, the selection is preserved when the user switches between pages.\n   * - Nodes in the selection are unique. When setting the selection, the API will de-deduplicate nodes in the selection. This API could have been a `Set<SceneNode>`, but it's generally easier to work with array and to get the first node using just selection[0].\n   * - Only **directly selected nodes** are present in this array. A node is directly selected when it is selected and none of its ancestors are selected. That means the array will never contain both a node and one of its descendents.\n   */\n  selection: ReadonlyArray<SceneNode>\n  /**\n   * The current text node being edited, if any, and the text currently being selected within that text node.\n   *\n   * @remarks\n   *\n   * This property will return `null` if there is no text node being edited. Setting this property to a `node` will enter text edit mode on that `node`. Leaving text edit mode will set this value to `null`.\n   *\n   * When `start == end`, it means that no characters is currently selected -- i.e., there is just a cursor.\n   *\n   * Changing `selectedTextRange` will trigger a `selectionchanged` message.\n   */\n  selectedTextRange: {\n    node: TextNode\n    start: number\n    end: number\n  } | null\n  /**\n   * The sorted list of flow starting points used when accessing Presentation view.\n   *\n   * @remarks\n   *\n   * The default starting point is the first one (e.g., used when no frames are selected and you click the toolbar's play icon to enter Presentation view).\n   */\n  flowStartingPoints: ReadonlyArray<{\n    nodeId: string\n    name: string\n  }>\n  /**\n   * The background color of the canvas (currently only supports a single solid color paint).\n   */\n  backgrounds: ReadonlyArray<Paint>\n  /**\n   * The background color of the prototype (currently only supports a single solid color paint).\n   */\n  prototypeBackgrounds: ReadonlyArray<Paint>\n  /**\n   * The starting point when launching a prototype. Prototypes with a starting node contain all frames reachable from that node. Prototypes without a starting node contain all frames on the current page. Note that prototypes are per-page.\n   */\n  readonly prototypeStartNode: FrameNode | GroupNode | ComponentNode | InstanceNode | null\n  /**\n   * Returns true if the node is a page divider, which is only possible when the page node is empty and has a page divider name. A page divider name consists of all asterisks, all en dashes, all em dashes, or all spaces.\n   */\n  isPageDivider: boolean\n  /**\n   * Loads the contents of the page node.\n   */\n  loadAsync(): Promise<void>\n  /**\n   * Registers a callback that will be invoked when an event occurs on the page. Current supported events are:\n   *\n   * - `\"nodechange\"`: Emitted when a node is added, removed, or updated.\n   *\n   * @param type - The type of event to listen for.\n   * @param callback - The callback to be invoked when the event occurs.\n   *\n   * @remarks\n   *\n   * ## Available event types\n   *\n   * ### `\"nodechange\"`\n   *\n   * This event will be emitted when a node on the page is added, removed, or updated.\n   *\n   * The callback will receive a NodeChangeEvent with the below interface:\n   *\n   * ```ts\n   * interface NodeChangeEvent {\n   *   nodeChanges: NodeChange[]\n   * }\n   * ```\n   *\n   * There are 3 different {@link NodeChange} types. Each of these changes has a `type` property to distinguish them:\n   *\n   * | Change | `type` property | Description |\n   * | --- | --- | --- |\n   * | [`CreateChange`](https://www.figma.com/plugin-docs/api/NodeChange#createchange) | `'CREATE'` | A node has been created in the page. If a node with nested children is being added to the page a `CreateChange` will only be made for the highest level parent that was added to the page. |\n   * | [`DeleteChange`](https://www.figma.com/plugin-docs/api/NodeChange#deletechange) | `'DELETE'` | A node has been removed from the page. If a node with nested children is being removed from the page a  `DeleteChange`  will only be made for the highest level parent that was removed from the page. |\n   * | [`PropertyChange`](https://www.figma.com/plugin-docs/api/NodeChange#propertychange) | `'PROPERTY_CHANGE'` | A property of a node has changed. |\n   */\n  on(type: 'nodechange', callback: (event: NodeChangeEvent) => void): void\n  /**\n   * Same as {@link PageNode.on}, but the callback will only be called once, the first time the specified event happens.\n   */\n  once(type: 'nodechange', callback: (event: NodeChangeEvent) => void): void\n  /**\n   * Removes a callback added with {@link PageNode.on} or {@link PageNode.once}.\n   *\n   * @remarks\n   *\n   * The callback needs to be the same object that was originally added. For example, you can do this:\n   *\n   * ```ts title=\"Correct way to remove a callback\"\n   * let fn = () => { console.log(\"nodechange\") }\n   * page.on(\"nodechange\", fn)\n   * page.off(\"nodechange\", fn)\n   * ```\n   *\n   * whereas the following won't work, because the function objects are different:\n   *\n   * ```ts title=\"Incorrect way to remove a callback\"\n   * page.on(\"nodechange\", () => { console.log(\"nodechange\") })\n   * page.off(\"nodechange\", () => { console.log(\"nodechange\") })\n   * ```\n   */\n  off(type: 'nodechange', callback: (event: NodeChangeEvent) => void): void\n  /**\n   *\n   * Note: This API is only available in Figma Slides\n   *\n   * When in single slide view, the Slide that is currently focused is accessible via this property.\n   *\n   * @remarks\n   *\n   * You can also set this via:\n   *\n   * ```ts\n   * figma.currentPage.focusedSlide = slideNode\n   * ```\n   */\n  focusedSlide?: SlideNode | null\n}\ninterface FrameNode extends DefaultFrameMixin {\n  /**\n   * The type of this node, represented by the string literal \"FRAME\".\n   */\n  readonly type: 'FRAME'\n  /**\n   * Duplicates the frame node. By default, the duplicate will be parented under `figma.currentPage`. Nested components will be cloned as instances who master is the original component.\n   */\n  clone(): FrameNode\n}\ninterface GroupNode\n  extends BaseNodeMixin,\n    SceneNodeMixin,\n    ReactionMixin,\n    ChildrenMixin,\n    ContainerMixin,\n    DeprecatedBackgroundMixin,\n    BlendMixin,\n    LayoutMixin,\n    ExportMixin,\n    AspectRatioLockMixin {\n  /**\n   * The type of this node, represented by the string literal \"GROUP\".\n   */\n  readonly type: 'GROUP'\n  /**\n   * Duplicates the group node. By default, the duplicate will be parented under `figma.currentPage`. Nested components will be cloned as instances who master is the original component.\n   */\n  clone(): GroupNode\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/TransformGroupNode\n */\ninterface TransformGroupNode\n  extends BaseNodeMixin,\n    SceneNodeMixin,\n    ReactionMixin,\n    ChildrenMixin,\n    ContainerMixin,\n    DeprecatedBackgroundMixin,\n    BlendMixin,\n    LayoutMixin,\n    ExportMixin,\n    AspectRatioLockMixin {\n  /**\n   * The type of this node, represented by the string literal \"TRANSFORM_GROUP\".\n   */\n  readonly type: 'TRANSFORM_GROUP'\n  /**\n   * Duplicates the transform group node. By default, the duplicate will be parented under `figma.currentPage`. Nested components will be cloned as instances who master is the original component.\n   */\n  clone(): TransformGroupNode\n}\ninterface SliceNode extends BaseNodeMixin, SceneNodeMixin, LayoutMixin, ExportMixin {\n  /**\n   * The type of this node, represented by the string literal \"SLICE\"\n   */\n  readonly type: 'SLICE'\n  /**\n   * Duplicates the slice node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): SliceNode\n}\ninterface RectangleNode\n  extends DefaultShapeMixin,\n    ConstraintMixin,\n    CornerMixin,\n    RectangleCornerMixin,\n    IndividualStrokesMixin,\n    AnnotationsMixin,\n    AspectRatioLockMixin {\n  /**\n   * The type of this node, represented by the string literal \"RECTANGLE\"\n   */\n  readonly type: 'RECTANGLE'\n  /**\n   * Duplicates the rectangle node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): RectangleNode\n}\ninterface LineNode extends DefaultShapeMixin, ConstraintMixin, AnnotationsMixin {\n  /**\n   * The type of this node, represented by the string literal \"LINE\"\n   */\n  readonly type: 'LINE'\n  /**\n   * Duplicates the line node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): LineNode\n}\ninterface EllipseNode\n  extends DefaultShapeMixin,\n    ConstraintMixin,\n    CornerMixin,\n    AnnotationsMixin,\n    AspectRatioLockMixin {\n  /**\n   * The type of this node, represented by the string literal \"ELLIPSE\"\n   */\n  readonly type: 'ELLIPSE'\n  /**\n   * Duplicates the ellipse node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): EllipseNode\n  /**\n   * Exposes the values of the sweep and ratio handles used in our UI to create arcs and donuts. See the {@link ArcData} property.\n   */\n  arcData: ArcData\n}\ninterface PolygonNode\n  extends DefaultShapeMixin,\n    ConstraintMixin,\n    CornerMixin,\n    AnnotationsMixin,\n    AspectRatioLockMixin {\n  /**\n   * The type of this node, represented by the string literal \"POLYGON\"\n   */\n  readonly type: 'POLYGON'\n  /**\n   * Duplicates the polygon node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): PolygonNode\n  /**\n   * Number of sides of the polygon. Must be an integer >= 3.\n   */\n  pointCount: number\n}\ninterface StarNode\n  extends DefaultShapeMixin,\n    ConstraintMixin,\n    CornerMixin,\n    AnnotationsMixin,\n    AspectRatioLockMixin {\n  /**\n   * The type of this node, represented by the string literal \"STAR\"\n   */\n  readonly type: 'STAR'\n  /**\n   * Duplicates the star node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): StarNode\n  /**\n   * Number of \"spikes\", or outer points of the star. Must be an integer >= 3.\n   */\n  pointCount: number\n  /**\n   * The percentage value that defines the acuteness of the star's angles. This value must be between 0.0 and 1.0 inclusive.\n   *\n   * Contrary to cornerRadius, which controls the outer corners of the star, innerRadius controls the inner rounded corners of the star. A value closer to 0 makes the angles on each point more acute, resulting in a more \"spiky\" look. A value closer to 1 makes the star closer to a Polygon node. A value equals 1 means that the node is a regular polygon with 2 * pointCount edges.\n   */\n  innerRadius: number\n}\ninterface VectorNode\n  extends DefaultShapeMixin,\n    ConstraintMixin,\n    CornerMixin,\n    VectorLikeMixin,\n    AnnotationsMixin,\n    AspectRatioLockMixin {\n  /**\n   * The type of this node, represented by the string literal \"VECTOR\"\n   */\n  readonly type: 'VECTOR'\n  /**\n   * Duplicates the vector node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): VectorNode\n}\ninterface TextNode\n  extends DefaultShapeMixin,\n    ConstraintMixin,\n    NonResizableTextMixin,\n    AnnotationsMixin,\n    AspectRatioLockMixin {\n  /**\n   * The type of this node, represented by the string literal \"TEXT\"\n   */\n  readonly type: 'TEXT'\n  /**\n   * Duplicates the text node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): TextNode\n  /**\n   * The horizontal alignment of the text with respect to the textbox. Setting this property requires the font the be loaded.\n   */\n  textAlignHorizontal: 'LEFT' | 'CENTER' | 'RIGHT' | 'JUSTIFIED'\n  /**\n   * The vertical alignment of the text with respect to the textbox. Setting this property requires the font the be loaded.\n   */\n  textAlignVertical: 'TOP' | 'CENTER' | 'BOTTOM'\n  /**\n   * The behavior of how the size of the text box adjusts to fit the characters. Setting this property requires the font the be loaded.\n   *\n   * @remarks\n   * - \"NONE\": The size of the textbox is fixed and is independent of its content.\n   * - \"HEIGHT\": The width of the textbox is fixed. Characters wrap to fit in the textbox. The height of the textbox automatically adjusts to fit its content.\n   * - \"WIDTH_AND_HEIGHT\": Both the width and height of the textbox automatically adjusts to fit its content. Characters do not wrap.\n   * - [DEPRECATED] \"TRUNCATE\": Like \"NONE\", but text that overflows the bounds of the text node will be truncated with an ellipsis. This value will be removed in the future - prefer reading from {@link TextNode.textTruncation} instead.\n   */\n  textAutoResize: 'NONE' | 'WIDTH_AND_HEIGHT' | 'HEIGHT' | 'TRUNCATE'\n  /**\n   * Whether this text node will truncate with an ellipsis when the text node size is smaller than the text inside.\n   *\n   * @remarks\n   *\n   * When {@link TextNode.textAutoResize} is set to `\"NONE\"`, the text will truncate when the fixed size is smaller than the text inside. When it is `\"HEIGHT\"` or `\"WIDTH_AND_HEIGHT\"`, truncation will only occur if used in conjunction with {@link DimensionAndPositionMixin.maxHeight} or {@link TextNode.maxLines}.\n   */\n  textTruncation: 'DISABLED' | 'ENDING'\n  /**\n   * The maximum number of lines a text node can reach before it truncates. Only applicable when {@link TextNode.textTruncation} is set to `\"ENDING\"`.\n   *\n   * @remarks\n   *\n   * The value must be >= 1. To disable truncation at a maximum number of lines, set to `null`.\n   */\n  maxLines: number | null\n  /**\n   * Whether updating the characters in the text node should update the name of the node. If this is set to true, `name` will be auto-derived from `characters`.\n   *\n   * @remarks\n   *\n   * This is automatically reset to false if `name` is modified in order to allow the node to keep the new name.\n   */\n  autoRename: boolean\n  /**\n   * The id of the {@link TextStyle} object that the text properties of this node are linked to. Requires the font to be loaded.\n   *\n   * If the manifest contains`\"documentAccess\": \"dynamic-page\"`, this property is read-only. Use {@link TextNode.setTextStyleIdAsync} to update the style.\n   */\n  textStyleId: string | PluginAPI['mixed']\n  /**\n   * Set the {@link TextStyle} that the text properties of this node are linked to. Requires the font to be loaded.\n   */\n  setTextStyleIdAsync(styleId: string): Promise<void>\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/TextPathNode\n */\ninterface TextPathNode\n  extends DefaultShapeMixin,\n    ConstraintMixin,\n    NonResizableTextPathMixin,\n    AnnotationsMixin,\n    AspectRatioLockMixin {\n  /**\n   * The type of this node, represented by the string literal \"TEXT_PATH\"\n   */\n  readonly type: 'TEXT_PATH'\n  /**\n   * Duplicates the text path node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): TextPathNode\n  /**\n   * The horizontal alignment of the text with respect to the textbox. Setting this property requires the font the be loaded.\n   */\n  textAlignHorizontal: 'LEFT' | 'CENTER' | 'RIGHT' | 'JUSTIFIED'\n  /**\n   * The vertical alignment of the text with respect to the textbox. Setting this property requires the font the be loaded.\n   */\n  textAlignVertical: 'TOP' | 'CENTER' | 'BOTTOM'\n  /**\n   * Whether updating the characters in the text node should update the name of the node. If this is set to true, `name` will be auto-derived from `characters`.\n   *\n   * @remarks\n   *\n   * This is automatically reset to false if `name` is modified in order to allow the node to keep the new name.\n   */\n  autoRename: boolean\n  /**\n   * The id of the {@link TextStyle} object that the text properties of this node are linked to. Requires the font to be loaded.\n   *\n   * If the manifest contains`\"documentAccess\": \"dynamic-page\"`, this property is read-only. Use {@link TextPathNode.setTextStyleIdAsync} to update the style.\n   */\n  textStyleId: string | PluginAPI['mixed']\n  /**\n   * Set the {@link TextStyle} that the text properties of this node are linked to. Requires the font to be loaded.\n   */\n  setTextStyleIdAsync(styleId: string): Promise<void>\n  /**\n   * The vector paths of the text path node.\n   */\n  readonly vectorPaths: VectorPaths\n  /**\n   * The vector network of the text path node.\n   */\n  readonly vectorNetwork: VectorNetwork\n  /**\n   * Whether the vector handles are mirrored or independent.\n   */\n  readonly handleMirroring: HandleMirroring | PluginAPI['mixed']\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/ComponentPropertyType\n */\ndeclare type ComponentPropertyType = 'BOOLEAN' | 'TEXT' | 'INSTANCE_SWAP' | 'VARIANT'\n/**\n * @see https://www.figma.com/plugin-docs/api/InstanceSwapPreferredValue\n */\ndeclare type InstanceSwapPreferredValue = {\n  type: 'COMPONENT' | 'COMPONENT_SET'\n  key: string\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/ComponentPropertyOptions\n */\ndeclare type ComponentPropertyOptions = {\n  preferredValues?: InstanceSwapPreferredValue[]\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/ComponentPropertyDefinitions\n */\ndeclare type ComponentPropertyDefinitions = {\n  [propertyName: string]: {\n    type: ComponentPropertyType\n    defaultValue: string | boolean\n    preferredValues?: InstanceSwapPreferredValue[]\n    variantOptions?: string[]\n    readonly boundVariables?: {\n      [field in VariableBindableComponentPropertyField]?: VariableAlias\n    }\n  }\n}\ninterface ComponentSetNode extends BaseFrameMixin, PublishableMixin, ComponentPropertiesMixin {\n  /**\n   * The type of this node, represented by the string literal \"COMPONENT_SET\"\n   */\n  readonly type: 'COMPONENT_SET'\n  /**\n   * Duplicates the component set as a new component set. Its children will be duplicated as **new** components with no instances of them. By default, the duplicate will be parented under figma.currentPage.\n   */\n  clone(): ComponentSetNode\n  /**\n   * The default variant of this component set, which is the top-left-most variant, spatially. This corresponds to the variant that would be inserted when dragging in a component set from the team library in the Figma UI.\n   */\n  readonly defaultVariant: ComponentNode\n  /**\n   * @deprecated Use `componentPropertyDefinitions` instead.\n   */\n  readonly variantGroupProperties: {\n    [property: string]: {\n      values: string[]\n    }\n  }\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/ComponentNode\n */\ninterface ComponentNode\n  extends DefaultFrameMixin,\n    PublishableMixin,\n    VariantMixin,\n    ComponentPropertiesMixin {\n  /**\n   * The type of this node, represented by the string literal \"COMPONENT\"\n   */\n  readonly type: 'COMPONENT'\n  /**\n   * Duplicates the component node as a **new** component with no instances of it. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): ComponentNode\n  /**\n   * Creates an instance of this component. By default, the instance will be parented under `figma.currentPage`.\n   */\n  createInstance(): InstanceNode\n  /**\n   * Returns an array of all of the instances of this component in the document.\n   */\n  getInstancesAsync(): Promise<InstanceNode[]>\n  /**\n   * Returns an array of all of the instances of this component in the document.\n   *\n   * @deprecated Use {@link ComponentNode.getInstancesAsync} instead. Accessing this property will throw an exception if the plugin manifest contains `\"documentAccess\": \"dynamic-page\"`.\n   */\n  readonly instances: InstanceNode[]\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/ComponentProperties\n */\ndeclare type ComponentProperties = {\n  [propertyName: string]: {\n    type: ComponentPropertyType\n    value: string | boolean\n    preferredValues?: InstanceSwapPreferredValue[]\n    readonly boundVariables?: {\n      [field in VariableBindableComponentPropertyField]?: VariableAlias\n    }\n  }\n}\ninterface InstanceNode extends DefaultFrameMixin, VariantMixin {\n  /**\n   * The type of this node, represented by the string literal \"INSTANCE\"\n   */\n  readonly type: 'INSTANCE'\n  /**\n   * Duplicates the instance node. The new instance has the same main component. By default, the duplicate's parent is `figma.currentPage`.\n   */\n  clone(): InstanceNode\n  /**\n   * The component that this instance reflects. This could be a remote, read-only component. This can be set to turn this instance into a different component. On nested instances (instances inside other instances), setting this value clears all overrides and performs nested instance swapping.\n   */\n  getMainComponentAsync(): Promise<ComponentNode | null>\n  /**\n   * The component that this instance reflects. This could be a remote, read-only component. This can be set to turn this instance into a different component. On nested instances (instances inside other instances), setting this value clears all overrides and performs nested instance swapping.\n   *\n   * If the plugin manifest contains `\"documentAccess\": \"dynamic-page\"`, this property is **write-only**. Use {@link InstanceNode.getMainComponentAsync} to read the value.\n   */\n  mainComponent: ComponentNode | null\n  /**\n   * Swaps this instance's current main component with `componentNode` and preserves overrides using the same heuristics as instance swap in the Figma editor UI. Note that we may update these override preservation heuristics from time to time.\n   *\n   * @remarks\n   *\n   * Learn more about instance swap and override preservation in our <a href=\"https://help.figma.com/hc/en-us/articles/360039150413-Swap-between-component-instances-in-a-file\">help center</a>. If you do not want to preserve overrides when swapping, you should assign to {@link InstanceNode.mainComponent}, which sets the instance's main component directly and clears all overrides.\n   */\n  swapComponent(componentNode: ComponentNode): void\n  /**\n   * Sets the component properties and values for this instance. `propertyName` corresponds to the names returned by `componentPropertyDefinitions` and should be suffixed with `'#'` and a unique ID for `'TEXT'`, `'BOOLEAN'`, and `'INSTANCE_SWAP'` properties. In the case of name collision, this function prioritizes updating the `'VARIANT'` type properties. Existing properties that are non-specified in the function will maintain their current value.\n   */\n  setProperties(properties: { [propertyName: string]: string | boolean | VariableAlias }): void\n  /**\n   * Component properties and values for this instance. If conflicting property names are encountered, prioritizes showing `'VARIANT'` type properties.\n   */\n  readonly componentProperties: ComponentProperties\n  /**\n   * Detaches the given instance from its component.  Returns the frame node that results from detaching the instance. For nested instances (instances inside of other instances), also detaches all ancestors nodes that\n   * are instances.\n   */\n  detachInstance(): FrameNode\n  /**\n   * The scale factor applied to the instance.\n   *\n   * @remarks\n   *\n   * Normally, this has value `1`, even if the instance is resized. However, if the instance is resized via the scale tool (shortcut `K`), then the instance is scaled and the scale factor is stored in this property.\n   */\n  scaleFactor: number\n  /**\n   * All nested instances that have been exposed to this `InstanceNode`'s level. These nested instances' component properties will be visible at the top level of this `InstanceNode`.\n   */\n  readonly exposedInstances: InstanceNode[]\n  /**\n   * Whether this instance has been marked as exposed to its containing `ComponentNode` or `ComponentSetNode`. This property is only writeable on primary `InstanceNode`s contained within a `ComponentNode` or `ComponentSetNode` but is inherited on nested `InstanceNode`s.\n   */\n  isExposedInstance: boolean\n  /**\n   * Returns an array of all of the fields directly overridden on this instance. Inherited overrides are not included.\n   */\n  readonly overrides: {\n    id: string\n    overriddenFields: NodeChangeProperty[]\n  }[]\n  /**\n   * Resets all direct overrides on this instance.\n   */\n  resetOverrides(): void\n}\ninterface BooleanOperationNode\n  extends DefaultShapeMixin,\n    ChildrenMixin,\n    CornerMixin,\n    ContainerMixin,\n    AspectRatioLockMixin {\n  /**\n   * The type of this node, represented by the string literal \"BOOLEAN_OPERATION\"\n   */\n  readonly type: 'BOOLEAN_OPERATION'\n  /**\n   * Duplicates the boolean operation node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): BooleanOperationNode\n  /**\n   * The type of operation used to combine the children of this node.\n   */\n  booleanOperation: 'UNION' | 'INTERSECT' | 'SUBTRACT' | 'EXCLUDE'\n}\ninterface StickyNode extends OpaqueNodeMixin, MinimalFillsMixin, MinimalBlendMixin {\n  /**\n   * The type of this node, represented by the string literal \"STICKY\"\n   */\n  readonly type: 'STICKY'\n  /**\n   * Text sublayer of the StickyNode\n   */\n  readonly text: TextSublayerNode\n  /**\n   * Indicates whether the author field is visible\n   */\n  authorVisible: boolean\n  /**\n   * Returns the author name.\n   */\n  authorName: string\n  /**\n   *  Indicates whether the sticky note has a [wide rectangular shape](https://help.figma.com/hc/en-us/articles/1500004414322-Sticky-notes-in-FigJam#Size), as opposed to a square shape.\n   */\n  isWideWidth: boolean\n  /**\n   * Duplicates the node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): StickyNode\n}\ninterface StampNode\n  extends DefaultShapeMixin,\n    ConstraintMixin,\n    StickableMixin,\n    AspectRatioLockMixin {\n  /**\n   * The type of this node, represented by the string literal \"STAMP\"\n   */\n  readonly type: 'STAMP'\n  /**\n   * Duplicates the node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): StampNode\n  /**\n   * Fetches the name, id, and photoUrl of the user that created the Stamp. Note that this can return null\n   * if the stamp was created before July 2022 or if the user is currently not connected to the internet.\n   *\n   * `fileusers` must be specified in the permissions array in `manifest.json` to access this function.\n   */\n  getAuthorAsync(): Promise<BaseUser | null>\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/TableNode\n */\ninterface TableNode extends OpaqueNodeMixin, MinimalFillsMixin, MinimalBlendMixin {\n  /**\n   * The type of this node, represented by the string literal \"TABLE\"\n   */\n  readonly type: 'TABLE'\n  /**\n   * Duplicates the node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): TableNode\n  /**\n   * The number of rows in the table.\n   *\n   */\n  readonly numRows: number\n  /**\n   * The number of columns in the table.\n   *\n   */\n  readonly numColumns: number\n  /**\n   * Returns the table cell node at a specific cell coordinate.\n   *\n   * @param rowIndex - The index of the row. Must satisfy 0 <= rowIndex < numRows.\n   * @param columnIndex - The index of the column. Must satisfy 0 <= columnInde < numColumns.\n   *\n   */\n  cellAt(rowIndex: number, columnIndex: number): TableCellNode\n  /**\n   * Inserts a row before the specified index.\n   *\n   * @param rowIndex - Index of the new row. Must satisfy 0 <= rowIndex <= numRows.\n   *\n   */\n  insertRow(rowIndex: number): void\n  /**\n   * Inserts a column before the specified index.\n   *\n   * @param columnIndex - Index of the new column. Must satisfy 0 <= columnIndex <= numColumns.\n   *\n   */\n  insertColumn(columnIndex: number): void\n  /**\n   * Removes the row at the specified index.\n   *\n   * @param rowIndex - Index of the row to remove. Must satisfy 0 <= rowIndex < numRows.\n   *\n   */\n  removeRow(rowIndex: number): void\n  /**\n   * Removes the column at the specified index.\n   *\n   * @param columnIndex - Index of the column to remove. Must satisfy 0 <= columnIndex < numColumns.\n   *\n   */\n  removeColumn(columnIndex: number): void\n  /**\n   * Moves the row from the start index to the destination index.\n   *\n   * @param fromIndex - Index of the row to move. Must satisfy 0 <= rowIndex < numRows.\n   * @param toIndex - Index that specifies where the row will be moved before. Must satisfy 0 <= rowIndex < numRows.\n   *\n   */\n  moveRow(fromIndex: number, toIndex: number): void\n  /**\n   * Moves the column from the start index to the destination index.\n   *\n   * @param fromIndex - Index of the column to move. Must satisfy 0 <= columnIndex < numColumns.\n   * @param toIndex - Index that specifies where the column will be moved before. Must satisfy 0 <= columnIndex < numColumns.\n   *\n   */\n  moveColumn(fromIndex: number, toIndex: number): void\n  /**\n   * Resizes the row. Rows cannot be resized to be smaller than their minimum size.\n   *\n   * @param height - New width of the row. Must be >= 0.01\n   *\n   */\n  resizeRow(rowIndex: number, height: number): void\n  /**\n   * Resizes the column. Columns cannot be resized to be smaller than their minimum size.\n   *\n   * @param width - New width of the column. Must be >= 0.01\n   *\n   */\n  resizeColumn(columnIndex: number, width: number): void\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/TableCellNode\n */\ninterface TableCellNode extends MinimalFillsMixin {\n  /**\n   * The type of this node, represented by the string literal \"TABLE_CELL\"\n   */\n  readonly type: 'TABLE_CELL'\n  /**\n   * Text sublayer of the TableCellNode\n   */\n  readonly text: TextSublayerNode\n  /**\n   * The row index of this cell relative to its parent table.\n   */\n  readonly rowIndex: number\n  /**\n   * The column index of this cell relative to its parent table.\n   */\n  readonly columnIndex: number\n  readonly toString: string\n  readonly parent: TableNode\n  readonly height: number\n  readonly width: number\n}\ninterface HighlightNode\n  extends DefaultShapeMixin,\n    ConstraintMixin,\n    CornerMixin,\n    VectorLikeMixin,\n    StickableMixin,\n    AspectRatioLockMixin {\n  /**\n   * The type of this node, represented by the string literal \"HIGHLIGHT\"\n   */\n  readonly type: 'HIGHLIGHT'\n  /**\n   * Duplicates the highlight node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): HighlightNode\n}\ninterface WashiTapeNode extends DefaultShapeMixin, StickableMixin, AspectRatioLockMixin {\n  /**\n   * The type of this node, represented by the string literal \"WASHI_TAPE\"\n   */\n  readonly type: 'WASHI_TAPE'\n  /**\n   * Duplicates the washi tape node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): WashiTapeNode\n}\ninterface ShapeWithTextNode\n  extends OpaqueNodeMixin,\n    MinimalFillsMixin,\n    MinimalBlendMixin,\n    MinimalStrokesMixin {\n  /**\n   * The type of this node, represented by the string literal \"SHAPE_WITH_TEXT\".\n   */\n  readonly type: 'SHAPE_WITH_TEXT'\n  /**\n   * The shape of this node.\n   *\n   * Most shape types have the same name as their tooltip but there are a few exceptions.\n   * ENG_DATABASE: Cylinder, ENG_QUEUE: Horizontal cylinder, ENG_FILE: File, ENG_FOLDER: Folder.\n   */\n  shapeType:\n    | 'SQUARE'\n    | 'ELLIPSE'\n    | 'ROUNDED_RECTANGLE'\n    | 'DIAMOND'\n    | 'TRIANGLE_UP'\n    | 'TRIANGLE_DOWN'\n    | 'PARALLELOGRAM_RIGHT'\n    | 'PARALLELOGRAM_LEFT'\n    | 'ENG_DATABASE'\n    | 'ENG_QUEUE'\n    | 'ENG_FILE'\n    | 'ENG_FOLDER'\n    | 'TRAPEZOID'\n    | 'PREDEFINED_PROCESS'\n    | 'SHIELD'\n    | 'DOCUMENT_SINGLE'\n    | 'DOCUMENT_MULTIPLE'\n    | 'MANUAL_INPUT'\n    | 'HEXAGON'\n    | 'CHEVRON'\n    | 'PENTAGON'\n    | 'OCTAGON'\n    | 'STAR'\n    | 'PLUS'\n    | 'ARROW_LEFT'\n    | 'ARROW_RIGHT'\n    | 'SUMMING_JUNCTION'\n    | 'OR'\n    | 'SPEECH_BUBBLE'\n    | 'INTERNAL_STORAGE'\n  /**\n   * Text sublayer of the ShapeWithTextNode.\n   */\n  readonly text: TextSublayerNode\n  /**\n   * How rounded a shape's corner is.\n   */\n  readonly cornerRadius?: number\n  /**\n   * The rotation of the node in degrees. Returns values from -180 to 180. Identical to `Math.atan2(-m10, m00)` in the {@link DimensionAndPositionMixin.relativeTransform} matrix. When setting `rotation`, it will also set `m00`, `m01`, `m10`, `m11`.\n   *\n   * @remarks\n   *\n   * The rotation is with respect to the top-left of the object. Therefore, it is independent from the position of the object. If you want to rotate with respect to the center (or any arbitrary point), you can do so via matrix transformations and {@link DimensionAndPositionMixin.relativeTransform}.\n   */\n  rotation: number\n  /**\n   * Resize the ShapeWithText.\n   * @param width - New width of the node. Must be >= 0.01\n   * @param height - New height of the node. Must be >= 0.01\n   */\n  resize(width: number, height: number): void\n  /**\n   * Rescale the ShapeWithText.\n   * @param scale - The scale by which to resize the node from the top-left corner.\n   */\n  rescale(scale: number): void\n  /**\n   * Duplicates the node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): ShapeWithTextNode\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/CodeBlockNode\n */\ninterface CodeBlockNode extends OpaqueNodeMixin, MinimalBlendMixin {\n  /**\n   * The type of this node, represented by the string literal \"CODE_BLOCK\"\n   */\n  readonly type: 'CODE_BLOCK'\n  /**\n   * The contents of the code block.\n   */\n  code: string\n  /**\n   * The language of the code block. New languages will be added to this enum without the major version updating, so be careful not to exhaustively match on this type without a default case.\n   */\n  codeLanguage:\n    | 'TYPESCRIPT'\n    | 'CPP'\n    | 'RUBY'\n    | 'CSS'\n    | 'JAVASCRIPT'\n    | 'HTML'\n    | 'JSON'\n    | 'GRAPHQL'\n    | 'PYTHON'\n    | 'GO'\n    | 'SQL'\n    | 'SWIFT'\n    | 'KOTLIN'\n    | 'RUST'\n    | 'BASH'\n    | 'PLAINTEXT'\n    | 'DART'\n  /**\n   * Duplicates the node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): CodeBlockNode\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/LabelSublayer\n */\ninterface LabelSublayerNode {\n  fills: Paint[] | PluginAPI['mixed']\n}\ninterface ConnectorNode extends OpaqueNodeMixin, MinimalBlendMixin, MinimalStrokesMixin {\n  /**\n   * The type of this node, represented by the string literal \"CONNECTOR\"\n   */\n  readonly type: 'CONNECTOR'\n  /**\n   * Text sublayer of the ConnectorNode\n   */\n  readonly text: TextSublayerNode\n  /**\n   * Text sublayer of the ConnectorNode\n   */\n  readonly textBackground: LabelSublayerNode\n  /**\n   * How rounded a connector's edges are\n   */\n  readonly cornerRadius?: number\n  /**\n   * Connector path type\n   */\n  connectorLineType: 'ELBOWED' | 'STRAIGHT' | 'CURVED'\n  /**\n   * Connector starting endpoint\n   */\n  connectorStart: ConnectorEndpoint\n  /**\n   * Connector ending endpoint\n   */\n  connectorEnd: ConnectorEndpoint\n  /**\n   * Connector start stroke cap\n   */\n  connectorStartStrokeCap: ConnectorStrokeCap\n  /**\n   * Connector end stroke cap\n   */\n  connectorEndStrokeCap: ConnectorStrokeCap\n  /**\n   * The rotation of the node in degrees. Returns values from -180 to 180. Identical to `Math.atan2(-m10, m00)` in the {@link DimensionAndPositionMixin.relativeTransform} matrix. When setting `rotation`, it will also set `m00`, `m01`, `m10`, `m11`.\n   *\n   * @remarks\n   *\n   * The rotation is with respect to the top-left of the object. Therefore, it is independent from the position of the object. If you want to rotate with respect to the center (or any arbitrary point), you can do so via matrix transformations and {@link DimensionAndPositionMixin.relativeTransform}.\n   */\n  rotation: number\n  /**\n   * Duplicates the node. By default, the duplicate will be parented under `figma.currentPage`.\n   */\n  clone(): ConnectorNode\n}\ndeclare type VariableResolvedDataType = 'BOOLEAN' | 'COLOR' | 'FLOAT' | 'STRING'\ninterface VariableAlias {\n  type: 'VARIABLE_ALIAS'\n  id: string\n}\ndeclare type VariableValue = boolean | string | number | RGB | RGBA | VariableAlias\ndeclare type VariableScope =\n  | 'ALL_SCOPES'\n  | 'TEXT_CONTENT'\n  | 'CORNER_RADIUS'\n  | 'WIDTH_HEIGHT'\n  | 'GAP'\n  | 'ALL_FILLS'\n  | 'FRAME_FILL'\n  | 'SHAPE_FILL'\n  | 'TEXT_FILL'\n  | 'STROKE_COLOR'\n  | 'STROKE_FLOAT'\n  | 'EFFECT_FLOAT'\n  | 'EFFECT_COLOR'\n  | 'OPACITY'\n  | 'FONT_FAMILY'\n  | 'FONT_STYLE'\n  | 'FONT_WEIGHT'\n  | 'FONT_SIZE'\n  | 'LINE_HEIGHT'\n  | 'LETTER_SPACING'\n  | 'PARAGRAPH_SPACING'\n  | 'PARAGRAPH_INDENT'\ndeclare type CodeSyntaxPlatform = 'WEB' | 'ANDROID' | 'iOS'\ninterface Variable extends PluginDataMixin {\n  /**\n   * The unique identifier of this variable.\n   */\n  readonly id: string\n  /** The name of this variable. */\n  name: string\n  /** Description of this variable. */\n  description: string\n  /**\n   * Whether this variable is hidden when publishing the current file as a library. Can only true if {@link Variable.remote} is false (e.g. this is a local variable).\n   *\n   * @remarks\n   *\n   * If the parent {@link VariableCollection} is marked as `hiddenFromPublishing`, then this variable will also be hidden from publishing via the UI.\n   * `hiddenFromPublishing` is independently toggled for a variable and collection, however both must be true for a given variable to be publishable.\n   */\n  hiddenFromPublishing: boolean\n  /**\n   * Returns the publishing status of this variable in the current file.\n   */\n  getPublishStatusAsync(): Promise<PublishStatus>\n  /** Whether this variable is remote or local. */\n  readonly remote: boolean\n  /** The ID of the collection that contains this variable. */\n  readonly variableCollectionId: string\n  /**\n   * The key to use with {@link VariablesAPI. passing a variable ID is not supported.\n   */\n  setBoundVariable(field: VariableBindableTextField, variable: Variable | null): void\n}\ninterface EffectStyle extends BaseStyleMixin {\n  /**\n   * The string literal \"EFFECT\" representing the style type. Always check the `type` before reading other properties.\n   */\n  type: 'EFFECT'\n  /**\n   * List of {@link Effect} to replace the `effects` property with.\n   */\n  effects: ReadonlyArray<Effect>\n  /**\n   * The variables bound to a particular field on this effect style.\n   */\n  readonly boundVariables?: {\n    readonly [field in VariableBindableEffectStyleField]?: VariableAlias[]\n  }\n}\ninterface GridStyle extends BaseStyleMixin {\n  /**\n   * The string literal \"GRID\" representing the style type. Always check the `type` before reading other properties.\n   */\n  type: 'GRID'\n  /**\n   * List of {@link LayoutGrid} to replace the `layoutGrids` property with.\n   */\n  layoutGrids: ReadonlyArray<LayoutGrid>\n  /**\n   * The variables bound to a particular field on this grid style.\n   */\n  readonly boundVariables?: {\n    readonly [field in VariableBindableGridStyleField]?: VariableAlias[]\n  }\n}\ndeclare type BaseStyle = PaintStyle | TextStyle | EffectStyle | GridStyle\ninterface Image {\n  /**\n   * A unique hash of the contents of the image file.\n   */\n  readonly hash: string\n  /**\n   * The contents of the corresponding image file. This returns a promise because the image may still need to be downloaded (images in Figma are loaded separately from the rest of the document).\n   */\n  getBytesAsync(): Promise<Uint8Array>\n  /**\n   * The width and height of the image in pixels. This returns a promise because the image may still need to be downloaded (images in Figma are loaded separately from the rest of the document).\n   */\n  getSizeAsync(): Promise<{\n    width: number\n    height: number\n  }>\n}\ninterface Video {\n  /**\n   * A unique hash of the contents of the video file.\n   */\n  readonly hash: string\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/BaseUser\n */\ninterface BaseUser {\n  /**\n   * The user's id. `id` will be automatically generated users in workshop mode.\n   * `id` will also be automatically generated for the current user if they are not logged in.\n   * For other non-logged in users, this value will be null.\n   */\n  readonly id: string | null\n  /**\n   * The user's name. `name` will be 'Anonymous' for non-logged in users.\n   */\n  readonly name: string\n  /**\n   * The user's photo URL. `photoUrl` will be automatically generated users in workshop mode.\n   * `photoUrl` will also be automatically generated for the current user if they are not logged in.\n   * For other non-logged in users, this value will be null.\n   */\n  readonly photoUrl: string | null\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/User\n */\ninterface User extends BaseUser {\n  /**\n   * The current user's multiplayer color. This will match the color of their dot stamps and cursor.\n   */\n  readonly color: string\n  /**\n   * The user's session id. This is guaranteed to be unique among active users.\n   * For example, if a user with the same `id` opens a file in different tabs,\n   * each `User` will have a unique `sessionId`.\n   */\n  readonly sessionId: number\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/ActiveUser\n */\ninterface ActiveUser extends User {\n  /**\n   * Cursor position of the user on the canvas. If the user's mouse is not on the canvas, this value is `null`.\n   */\n  readonly position: Vector | null\n  /**\n   * The bounds of the canvas that is currently visible on-screen for the active user.\n   */\n  readonly viewport: Rect\n  /**\n   * The node IDs the user has selected.\n   */\n  readonly selection: string[]\n}\n/**\n * @see https://www.figma.com/plugin-docs/api/FindAllCriteria\n */\ninterface FindAllCriteria<T extends NodeType[]> {\n  /**\n   * If specified, the search will match nodes that have one of the given types.\n   *\n   * ```ts\n   * // Find children of type text or frame.\n   * node.findAllWithCriteria({ types: [\"TEXT\", \"FRAME\"] })\n   * ```\n   */\n  types?: T\n  /**\n   * If specified, the search will match nodes that have {@link PluginDataMixin.getPluginData | PluginData} stored for your plugin.\n   *\n   * ```ts\n   * // Find children that have plugin data stored.\n   * node.findAllWithCriteria({ pluginData: {} })\n   *\n   * // Find children that have plugin data stored with keys\n   * // \"a\" or \"b\"\n   * node.findAllWithCriteria({\n   *   pluginData: {\n   *     keys: [\"a\", \"b\"]\n   *   }\n   * })\n   * ```\n   */\n  pluginData?: {\n    keys?: string[]\n  }\n  /**\n   * If specified, the search will match nodes that have {@link PluginDataMixin.getSharedPluginData | SharedPluginData} stored on the given `namespace` and `keys`.\n   *\n   * ```ts\n   * // Find children that have shared plugin data\n   * // on the \"foo\" namespace.\n   * node.findAllWithCriteria({\n   *   sharedPluginData: {\n   *     namespace: \"foo\"\n   *   }\n   * })\n   *\n   * // Find children that have shared plugin data\n   * // on the \"foo\" namespace with keys \"a\" or \"b\"\n   * node.findAllWithCriteria({\n   *   sharedPluginData: {\n   *     namespace: \"foo\",\n   *     keys: [\"a\", \"b\"]\n   *   }\n   * })\n   * ```\n   */\n  sharedPluginData?: {\n    namespace: string\n    keys?: string[]\n  }\n}",
  d3: "// Last module patch version validated against: 7.4.4\n\nexport as namespace d3;\n\n/**\n * Version number in format _Major.Minor.BugFix_, like 7.0.0.\n */\nexport const version: string;\n\nexport * from \"d3-array\";\nexport * from \"d3-axis\";\nexport * from \"d3-brush\";\nexport * from \"d3-chord\";\nexport * from \"d3-color\";\nexport * from \"d3-contour\";\nexport * from \"d3-delaunay\";\nexport * from \"d3-dispatch\";\nexport * from \"d3-drag\";\nexport * from \"d3-dsv\";\nexport * from \"d3-ease\";\nexport * from \"d3-fetch\";\nexport * from \"d3-force\";\nexport * from \"d3-format\";\nexport * from \"d3-geo\";\nexport * from \"d3-hierarchy\";\nexport * from \"d3-interpolate\";\nexport * from \"d3-path\";\nexport * from \"d3-polygon\";\nexport * from \"d3-quadtree\";\nexport * from \"d3-random\";\nexport * from \"d3-scale\";\nexport * from \"d3-scale-chromatic\";\nexport * from \"d3-selection\";\nexport * from \"d3-shape\";\nexport * from \"d3-time\";\nexport * from \"d3-time-format\";\nexport * from \"d3-timer\";\nexport * from \"d3-transition\";\nexport * from \"d3-zoom\";\n\n// Types from d3-array\n// Last module patch version validated against: 3.2.4\n\n// --------------------------------------------------------------------------\n// Shared Types and Interfaces\n// --------------------------------------------------------------------------\n\n/**\n * Administrivia: JavaScript primitive types and Date\n */\nexport type Primitive = number | string | boolean | Date;\n\n/**\n * Administrivia: anything with a valueOf(): number method is comparable, so we allow it in numeric operations\n */\nexport interface Numeric {\n    valueOf(): number;\n}\n\n/**\n * Administrivia: a matrix of numeric values.\n * If height is not specified, it is inferred from the given width and data.length.\n */\nexport interface Matrix {\n    data: ArrayLike<number>;\n    width: number;\n    height?: number;\n}\n\n/**\n * Represents a nested/recursive InternMap type\n *\n * The first generic \"TObject\" refers to the type of the data object that is available in the accessor functions.\n * The second generic \"TReduce\" refers to the type of the data available at the deepest level (the result data).\n * The third generic \"TKeys\" refers to the type of the keys at each level of the nestes InternMap.\n */\nexport type NestedInternMap<TObject, TReduce, TKeys extends unknown[]> = TKeys extends [infer TFirst, ...infer TRest]\n    ? InternMap<TFirst, NestedInternMap<TObject, TReduce, TRest>>\n    : TReduce;\n\n/**\n * Represents a nested/recursive Array type\n *\n * The first generic \"TObject\" refers to the type of the data object that is available in the accessor functions.\n * The second generic \"TReduce\" refers to the type of the data available at the deepest level (the result data).\n * The third generic \"TKeys\" refers to the type of the keys at each level of the nestes Array.\n */\nexport type NestedArray<TObject, TReduce, TKeys extends unknown[]> = TKeys extends [infer TFirst, ...infer TRest]\n    ? Array<[TFirst, NestedArray<TObject, TReduce, TRest>]>\n    : TReduce;\n\n// --------------------------------------------------------------------------------------\n// Statistics\n// --------------------------------------------------------------------------------------\n\n/**\n * Return the minimum value in the array using natural order.\n */\nexport function min(iterable: Iterable<string>): string | undefined;\n\n/**\n * Return the minimum value in the array using natural order.\n */\nexport function min<T extends Numeric>(iterable: Iterable<T>): T | undefined;\n/**\n * Return the minimum value in the array using natural order.\n */\nexport function min<T>(\n    iterable: Iterable<T>,\n    accessor: (datum: T, index: number, array: Iterable<T>) => string | undefined | null,\n): string | undefined;\n/**\n * Return the minimum value in the array using natural order.\n */\nexport function min<T, U extends Numeric>(\n    iterable: Iterable<T>,\n    accessor: (datum: T, index: number, array: Iterable<T>) => U | undefined | null,\n): U | undefined;\n\n/**\n * Return the index of the minimum value in the array using natural order.\n */\nexport function minIndex(iterable: Iterable<unknown>): number;\n/**\n * Return the index of the minimum value in the array using natural order and a projection function to map values.\n */\nexport function minIndex<TDatum>(\n    iterable: Iterable<TDatum>,\n    accessor: (datum: TDatum, index: number, array: Iterable<TDatum>) => unknown,\n): number;\n/**\n * Return the index of the minimum value in the array using natural order.\n */\nexport function minIndex(iterable: Iterable<unknown>): number;\n\n/**\n * Return the maximum value in the array of strings using natural order.\n */\nexport function max(iterable: Iterable<string>): string | undefined;\n/**\n * Return the maximum value in the array of numbers using natural order.\n */\nexport function max<T extends Numeric>(iterable: Iterable<T>): T | undefined;\n/**\n * Return the maximum value in the array using natural order and a projection function to map values to strings.\n */\nexport function max<T>(\n    iterable: Iterable<T>,\n    accessor: (datum: T, index: number, array: Iterable<T>) => string | undefined | null,\n): string | undefined;\n/**\n * Return the maximum value in the array using natural order and a projection function to map values to easily-sorted values.\n */\nexport function max<T, U extends Numeric>(\n    iterable: Iterable<T>,\n    accessor: (datum: T, index: number, array: Iterable<T>) => U | undefined | null,\n): U | undefined;\n\n/**\n * Return the index of the maximum value in the array using natural order.\n */\nexport function maxIndex(iterable: Iterable<unknown>): number;\n/**\n * Return the index of the maximum value in the array using natural order and a projection function to map values.\n */\nexport function maxIndex<TDatum>(\n    iterable: Iterable<TDatum>,\n    accessor: (datum: TDatum, index: number, array: Iterable<TDatum>) => unknown,\n): number;\n\n/**\n * Return the min and max simultaneously.\n */\nexport function extent(iterable: Iterable<string>): [string, string] | [undefined, undefined];\n/**\n * Return the min and max simultaneously.\n */\nexport function extent<T extends Numeric>(iterable: Iterable<T>): [T, T] | [undefined, undefined];\n/**\n * Return the min and max simultaneously.\n */\nexport function extent<T>(\n    iterable: Iterable<T>,\n    accessor: (datum: T, index: number, array: Iterable<T>) => string | undefined | null,\n): [string, string] | [undefined, undefined];\n/**\n * Return the min and max simultaneously.\n */\nexport function extent<T, U extends Numeric>(\n    iterable: Iterable<T>,\n    accessor: (datum: T, index: number, array: Iterable<T>) => U | undefined | null,\n): [U, U] | [undefined, undefined];\n\n/**\n * Returns the mode of the given iterable, i.e. the value which appears the most often.\n * In case of equality, returns the first of the relevant values.\n * If the iterable contains no comparable values, returns undefined.\n * An optional accessor function may be specified, which is equivalent to calling Array.from before computing the mode.\n * This method ignores undefined, null and NaN values; this is useful for ignoring missing data.\n */\nexport function mode(iterable: Iterable<Numeric | undefined | null>): number;\n/**\n * Returns the mode of the given iterable, i.e. the value which appears the most often.\n * In case of equality, returns the first of the relevant values.\n * If the iterable contains no comparable values, returns undefined.\n * An optional accessor function may be specified, which is equivalent to calling Array.from before computing the mode.\n * This method ignores undefined, null and NaN values; this is useful for ignoring missing data.\n */\nexport function mode<T>(\n    iterable: Iterable<T>,\n    accessor: (datum: T, index: number, array: Iterable<T>) => number | undefined | null,\n): number;\n\n/**\n * Compute the sum of an array of numbers.\n */\nexport function sum(iterable: Iterable<Numeric | undefined | null>): number;\n/**\n * Compute the sum of an array, using the given accessor to convert values to numbers.\n */\nexport function sum<T>(\n    iterable: Iterable<T>,\n    accessor: (datum: T, index: number, array: Iterable<T>) => number | undefined | null,\n): number;\n\n/**\n * Return the mean of an array of numbers\n */\nexport function mean(iterable: Iterable<Numeric | undefined | null>): number | undefined;\n/**\n * Return the mean of an array of numbers\n */\nexport function mean<T>(\n    iterable: Iterable<T>,\n    accessor: (datum: T, index: number, array: Iterable<T>) => number | undefined | null,\n): number | undefined;\n\n/**\n * Return the median of an array of numbers\n */\nexport function median(iterable: Iterable<Numeric | undefined | null>): number | undefined;\n/**\n * Return the median of an array of numbers\n */\nexport function median<T>(\n    iterable: Iterable<T>,\n    accessor: (element: T, i: number, array: Iterable<T>) => number | undefined | null,\n): number | undefined;\n\n/**\n * Like median, but returns the index of the element to the left of the median.\n */\nexport function medianIndex(iterable: Iterable<Numeric | undefined | null>): number;\n/**\n * Like median, but returns the index of the element to the left of the median.\n */\nexport function medianIndex<T>(\n    iterable: Iterable<T>,\n    accessor: (element: T, i: number, array: Iterable<T>) => number | undefined | null,\n): number;\n\n/**\n * Returns the cumulative sum of the given iterable of numbers, as a Float64Array of the same length.\n * If the iterable contains no numbers, returns zeros.\n * An optional accessor function may be specified, which is equivalent to calling Array.from before computing the cumulative sum.\n * This method ignores undefined and NaN values; this is useful for ignoring missing data.\n */\nexport function cumsum(iterable: Iterable<Numeric | undefined | null>): Float64Array;\n/**\n * Returns the cumulative sum of the given iterable of numbers, as a Float64Array of the same length.\n * If the iterable contains no numbers, returns zeros.\n * An optional accessor function may be specified, which is equivalent to calling Array.from before computing the cumulative sum.\n * This method ignores undefined and NaN values; this is useful for ignoring missing data.\n */\nexport function cumsum<T>(\n    iterable: Iterable<T>,\n    accessor: (element: T, i: number, array: Iterable<T>) => number | undefined | null,\n): Float64Array;\n\n/**\n * Returns the p-quantile of the given iterable of numbers, where p is a number in the range [0, 1].\n *\n * An optional accessor function may be specified, which is equivalent to calling array.map(accessor) before computing the quantile.\n */\nexport function quantile(iterable: Iterable<Numeric | undefined | null>, p: number): number | undefined;\n/**\n * Returns the p-quantile of the given iterable of numbers, where p is a number in the range [0, 1].\n *\n * An optional accessor function may be specified, which is equivalent to calling array.map(accessor) before computing the quantile.\n */\nexport function quantile<T>(\n    iterable: Iterable<T>,\n    p: number,\n    accessor: (element: T, i: number, array: Iterable<T>) => number | undefined | null,\n): number | undefined;\n\n/**\n * Similar to quantile, but returns the index to the left of p.\n */\nexport function quantileIndex(iterable: Iterable<Numeric | undefined | null>, p: number): number;\n/**\n * Similar to quantile, but returns the index to the left of p.\n */\nexport function quantileIndex<T>(\n    iterable: Iterable<T>,\n    p: number,\n    accessor: (element: T, i: number, array: Iterable<T>) => number | undefined | null,\n): number;\n\n/**\n * Similar to quantile, but expects the input to be a sorted array of values.\n * In contrast with quantile, the accessor is only called on the elements needed to compute the quantile.\n */\nexport function quantileSorted(\n    array: Array<Numeric | undefined | null>,\n    p: number,\n): number | undefined;\n/**\n * Similar to quantile, but expects the input to be a sorted array of values.\n * In contrast with quantile, the accessor is only called on the elements needed to compute the quantile.\n */\nexport function quantileSorted<T>(\n    array: T[],\n    p: number,\n    accessor: (element: T, i: number, array: T[]) => number | undefined | null,\n): number | undefined;\n\n/**\n * Returns an array with the rank of each value in the iterable, i.e. the zero-based index of the value when the iterable is sorted.\n * Nullish values are sorted to the end and ranked NaN.\n * An optional comparator or accessor function may be specified; the latter is equivalent to calling array.map(accessor) before computing the ranks.\n * If comparator is not specified, it defaults to ascending.\n * Ties (equivalent values) all get the same rank, defined as the first time the value is found.\n */\nexport function rank(iterable: Iterable<Numeric | undefined | null>): Float64Array;\n/**\n * Returns an array with the rank of each value in the iterable, i.e. the zero-based index of the value when the iterable is sorted.\n * Nullish values are sorted to the end and ranked NaN.\n * An optional comparator or accessor function may be specified; the latter is equivalent to calling array.map(accessor) before computing the ranks.\n * If comparator is not specified, it defaults to ascending.\n * Ties (equivalent values) all get the same rank, defined as the first time the value is found.\n */\nexport function rank<T>(\n    iterable: Iterable<T>,\n    accessorOrComparator:\n        | ((datum: T, index: number, array: Iterable<T>) => number | undefined | null)\n        | ((a: T, b: T) => number | undefined | null),\n): Float64Array;\n\n/**\n * Returns an unbiased estimator of the population variance of the given iterable of numbers using Welford’s algorithm.\n * If the iterable has fewer than two numbers, returns undefined.\n * An optional accessor function may be specified, which is equivalent to calling Array.from before computing the variance.\n * This method ignores undefined and NaN values; this is useful for ignoring missing data.\n */\nexport function variance(iterable: Iterable<Numeric | undefined | null>): number | undefined;\n/**\n * Returns an unbiased estimator of the population variance of the given iterable of numbers using Welford’s algorithm.\n * If the iterable has fewer than two numbers, returns undefined.\n * An optional accessor function may be specified, which is equivalent to calling Array.from before computing the variance.\n * This method ignores undefined and NaN values; this is useful for ignoring missing data.\n */\nexport function variance<T>(\n    iterable: Iterable<T>,\n    accessor: (datum: T, index: number, array: Iterable<T>) => number | undefined | null,\n): number | undefined;\n\n/**\n * Compute the standard deviation, defined as the square root of the bias-corrected variance, of the given array of numbers.\n */\nexport function deviation(iterable: Iterable<Numeric | undefined | null>): number | undefined;\n/**\n * Compute the standard deviation, defined as the square root of the bias-corrected variance, of the given array,\n * using the given accessor to convert values to numbers.\n */\nexport function deviation<T>(\n    iterable: Iterable<T>,\n    accessor: (datum: T, index: number, array: Iterable<T>) => number | undefined | null,\n): number | undefined;\n\n/**\n * Returns a full precision summation of the given values.\n * Although slower, d3.fsum can replace d3.sum wherever greater precision is needed. Uses d3.Adder.\n */\nexport function fsum(values: Iterable<Numeric | undefined | null>): number;\n/**\n * Returns a full precision summation of the given values.\n * Although slower, d3.fsum can replace d3.sum wherever greater precision is needed. Uses d3.Adder.\n */\nexport function fsum<T>(\n    values: Iterable<T>,\n    accessor: (datum: T, index: number, array: Iterable<T>) => number | undefined | null,\n): number;\n\n/**\n * Returns a full precision cumulative sum of the given values.\n * Although slower, d3.fcumsum can replace d3.cumsum when greater precision is needed. Uses d3.Adder.\n */\nexport function fcumsum(values: Iterable<Numeric | undefined | null>): Float64Array;\n/**\n * Returns a full precision cumulative sum of the given values.\n * Although slower, d3.fcumsum can replace d3.cumsum when greater precision is needed. Uses d3.Adder.\n */\nexport function fcumsum<T>(\n    values: Iterable<T>,\n    accessor: (datum: T, index: number, array: Iterable<T>) => number | undefined | null,\n): Float64Array;\n\nexport class Adder {\n    /**\n     * Creates a full precision adder for IEEE 754 floating point numbers, setting its initial value to 0.\n     */\n    constructor();\n\n    /**\n     * Adds the specified number to the adder’s current value and returns the adder.\n     */\n    add(number: number): Adder;\n\n    /**\n     * Returns the IEEE 754 double precision representation of the adder’s current value.\n     * Most useful as the short-hand notation +adder.\n     */\n    valueOf(): number;\n}\n\n// --------------------------------------------------------------------------------------\n// Search\n// --------------------------------------------------------------------------------------\n\n/**\n * Returns the least element of the specified iterable according to the specified comparator.\n * If comparator is not specified, it defaults to ascending.\n */\nexport function least<T>(iterable: Iterable<T>, comparator?: (a: T, b: T) => number): T | undefined;\n/**\n * Returns the least element of the specified iterable according to the specified accessor.\n */\nexport function least<T>(iterable: Iterable<T>, accessor: (a: T) => unknown): T | undefined;\n\n/**\n * Returns the index of the least element of the specified iterable according to the specified comparator.\n */\nexport function leastIndex(iterable: Iterable<unknown>): number | undefined;\n/**\n * Returns the index of the least element of the specified iterable according to the specified comparator.\n */\nexport function leastIndex<T>(iterable: Iterable<T>, comparator: (a: T, b: T) => number): number | undefined;\n/**\n * Returns the index of the least element of the specified iterable according to the specified accessor.\n */\n// tslint:disable-next-line:unified-signatures\nexport function leastIndex<T>(iterable: Iterable<T>, accessor: (a: T) => unknown): number | undefined;\n\n/**\n * Returns the greatest element of the specified iterable according to the specified comparator or accessor.\n * If the given iterable contains no comparable elements (i.e., the comparator returns NaN when comparing each element to itself), returns undefined.\n * If comparator is not specified, it defaults to ascending.\n */\nexport function greatest<T>(iterable: Iterable<T>, comparator?: (a: T, b: T) => number): T | undefined;\n/**\n * Returns the greatest element of the specified iterable according to the specified comparator or accessor.\n * If the given iterable contains no comparable elements (i.e., the comparator returns NaN when comparing each element to itself), returns undefined.\n * If comparator is not specified, it defaults to ascending.\n */\nexport function greatest<T>(iterable: Iterable<T>, accessor: (a: T) => unknown): T | undefined;\n\n/**\n * Returns the index of the greatest element of the specified iterable according to the specified comparator or accessor.\n * If the given iterable contains no comparable elements (i.e., the comparator returns NaN when comparing each element to itself), returns -1.\n * If comparator is not specified, it defaults to ascending.\n */\nexport function greatestIndex(iterable: Iterable<unknown>): number | undefined;\n/**\n * Returns the index of the greatest element of the specified iterable according to the specified comparator or accessor.\n * If the given iterable contains no comparable elements (i.e., the comparator returns NaN when comparing each element to itself), returns -1.\n * If comparator is not specified, it defaults to ascending.\n */\nexport function greatestIndex<T>(iterable: Iterable<T>, comparator: (a: T, b: T) => number): number | undefined;\n/**\n * Returns the index of the greatest element of the specified iterable according to the specified comparator or accessor.\n * If the given iterable contains no comparable elements (i.e., the comparator returns NaN when comparing each element to itself), returns -1.\n * If comparator is not specified, it defaults to ascending.\n */\n// tslint:disable-next-line:unified-signatures\nexport function greatestIndex<T>(iterable: Iterable<T>, accessor: (a: T) => unknown): number | undefined;\n\nexport function bisectLeft(array: ArrayLike<number>, x: number, lo?: number, hi?: number): number;\nexport function bisectLeft(array: ArrayLike<string>, x: string, lo?: number, hi?: number): number;\nexport function bisectLeft(array: ArrayLike<Date>, x: Date, lo?: number, hi?: number): number;\n\nexport function bisectRight(array: ArrayLike<number>, x: number, lo?: number, hi?: number): number;\nexport function bisectRight(array: ArrayLike<string>, x: string, lo?: number, hi?: number): number;\nexport function bisectRight(array: ArrayLike<Date>, x: Date, lo?: number, hi?: number): number;\n\nexport function bisectCenter(array: ArrayLike<number>, x: number, lo?: number, hi?: number): number;\nexport function bisectCenter(array: ArrayLike<string>, x: string, lo?: number, hi?: number): number;\nexport function bisectCenter(array: ArrayLike<Date>, x: Date, lo?: number, hi?: number): number;\n\nexport const bisect: typeof bisectRight;\n\nexport interface Bisector<T, U> {\n    left(array: ArrayLike<T>, x: U, lo?: number, hi?: number): number;\n    right(array: ArrayLike<T>, x: U, lo?: number, hi?: number): number;\n    center(array: ArrayLike<T>, x: U, lo?: number, hi?: number): number;\n}\n\nexport function bisector<T, U>(comparator: (a: T, b: U) => number): Bisector<T, U>;\n// tslint:disable-next-line:unified-signatures\nexport function bisector<T, U>(accessor: (x: T) => U): Bisector<T, U>;\n\n/**\n * Rearranges items so that all items in the [left, k] are the smallest. The k-th element will have the (k - left + 1)-th smallest value in [left, right].\n *\n * @param array The array to partially sort (in place).\n * @param k The middle index for partial sorting.\n * @param left The left index of the range to sort.\n * @param right The right index.\n * @param compare The compare function.\n */\nexport function quickselect<T>(\n    array: ArrayLike<T>,\n    k: number,\n    left?: number,\n    right?: number,\n    compare?: (a: Primitive | undefined, b: Primitive | undefined) => number,\n): T[];\n\n// NB. this is limited to primitive values due to D3's use of the <, >, and >= operators. Results get weird for object instances.\n/**\n * Compares two primitive values for sorting (in ascending order).\n */\nexport function ascending(a: Primitive | undefined, b: Primitive | undefined): number;\n\n// NB. this is limited to primitive values due to D3's use of the <, >, and >= operators. Results get weird for object instances.\n/**\n * Compares two primitive values for sorting (in descending order).\n */\nexport function descending(a: Primitive | undefined, b: Primitive | undefined): number;\n\n// --------------------------------------------------------------------------------------\n// Transformations\n// --------------------------------------------------------------------------------------\n\n/**\n * Groups the specified iterable of values into an InternMap from key to array of value.\n *\n * @param iterable The iterable to group.\n * @param keys The key functions.\n */\nexport function group<TObject, TKeys extends unknown[]>(\n    iterable: Iterable<TObject>,\n    ...keys: {\n        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];\n    }\n): NestedInternMap<TObject, TObject[], TKeys>;\n\n/**\n * Equivalent to group, but returns nested arrays instead of nested maps.\n *\n * @param iterable The iterable to group.\n * @param keys The key functions.\n */\nexport function groups<TObject, TKeys extends unknown[]>(\n    iterable: Iterable<TObject>,\n    ...keys: {\n        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];\n    }\n): NestedArray<TObject, TObject[], TKeys>;\n\n/**\n * Equivalent to group, but returns a flat array of [key0, key1, …, values] instead of nested maps.\n *\n * @param iterable The iterable to group.\n * @param keys The key functions.\n */\nexport function flatGroup<TObject, TKeys extends unknown[]>(\n    iterable: Iterable<TObject>,\n    ...keys: {\n        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];\n    }\n): Array<[...TKeys, TObject[]]>;\n\n/**\n * Equivalent to group but returns a unique value per compound key instead of an array, throwing if the key is not unique.\n *\n * @param iterable The iterable to group.\n * @param key The key functions.\n */\nexport function index<TObject, TKeys extends unknown[]>(\n    iterable: Iterable<TObject>,\n    ...keys: {\n        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];\n    }\n): NestedInternMap<TObject, TObject, TKeys>;\n\n/**\n * Equivalent to index, but returns nested arrays instead of nested maps.\n *\n * @param iterable The iterable to group.\n * @param keys The key functions.\n */\nexport function indexes<TObject, TKeys extends unknown[]>(\n    iterable: Iterable<TObject>,\n    ...keys: {\n        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];\n    }\n): NestedArray<TObject, TObject, TKeys>;\n\n/**\n * Groups and reduces the specified array of values into an InternMap from key to value.\n *\n * @param iterable The iterable to group.\n * @param reduce The reduce function.\n * @param keys The key functions.\n */\nexport function rollup<TObject, TReduce, TKeys extends unknown[]>(\n    iterable: Iterable<TObject>,\n    reduce: (values: TObject[]) => TReduce,\n    ...keys: {\n        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];\n    }\n): NestedInternMap<TObject, TReduce, TKeys>;\n\n/**\n * Equivalent to rollup, but returns nested arrays instead of nested maps.\n *\n * @param iterable The iterable to group.\n * @param reduce The reduce function.\n * @param keys The key functions.\n */\nexport function rollups<TObject, TReduce, TKeys extends unknown[]>(\n    iterable: Iterable<TObject>,\n    reduce: (values: TObject[]) => TReduce,\n    ...keys: {\n        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];\n    }\n): NestedArray<TObject, TReduce, TKeys>;\n\n/**\n * Equivalent to rollup, but returns a flat array of [key0, key1, …, value] instead of nested maps.\n *\n * @param iterable The iterable to group.\n * @param reduce The reduce function.\n * @param keys The key functions.\n */\nexport function flatRollup<TObject, TReduce, TKeys extends unknown[]>(\n    iterable: Iterable<TObject>,\n    reduce: (values: TObject[]) => TReduce,\n    ...keys: {\n        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];\n    }\n): Array<[...TKeys, TReduce]>;\n\n/**\n * Groups the specified iterable of elements according to the specified key function, sorts the groups according to the specified comparator, and then returns an array of keys in sorted order.\n * The comparator will be asked to compare two groups a and b and should return a negative value if a should be before b, a positive value if a should be after b, or zero for a partial ordering.\n */\nexport function groupSort<TObject, TKey>(\n    iterable: Iterable<TObject>,\n    comparator: (a: TObject[], b: TObject[]) => number,\n    key: (value: TObject) => TKey,\n): TKey[];\n/**\n * Groups the specified iterable of elements according to the specified key function, sorts the groups according to the specified accessor, and then returns an array of keys in sorted order.\n */\nexport function groupSort<TObject, TKey>(\n    iterable: Iterable<TObject>,\n    // tslint:disable-next-line:unified-signatures\n    accessor: (value: TObject[]) => unknown,\n    key: (value: TObject) => TKey,\n): TKey[];\n\n/**\n * Returns the number of valid number values (i.e., not null, NaN, or undefined) in the specified iterable; accepts an accessor.\n *\n * @param iterable Input array.\n */\nexport function count(iterable: Iterable<unknown>): number;\n/**\n * Returns the number of valid number values (i.e., not null, NaN, or undefined) in the specified iterable; accepts an accessor.\n *\n * @param iterable Input array.\n * @param accessor Accessor method.\n */\nexport function count<TObject>(\n    iterable: Iterable<TObject>,\n    accessor: (a: TObject, b: TObject) => number | null | undefined,\n): number;\n\n/**\n * Returns the Cartesian product of the two arrays a and b.\n * For each element i in the specified array a and each element j in the specified array b, in order,\n * it creates a two-element array for each pair.\n *\n * @param a First input array.\n * @param b Second input array.\n */\nexport function cross<S, T>(a: Iterable<S>, b: Iterable<T>): Array<[S, T]>;\n\n/**\n * Returns the Cartesian product of the two arrays a and b.\n * For each element i in the specified array a and each element j in the specified array b, in order,\n * invokes the specified reducer function passing the element i and element j.\n *\n * @param a First input array.\n * @param b Second input array.\n * @param reducer A reducer function taking as input an element from \"a\" and \"b\" and returning a reduced value.\n */\nexport function cross<S, T, U>(a: Iterable<S>, b: Iterable<T>, reducer: (a: S, b: T) => U): U[];\n\n/**\n * Merges the specified arrays into a single array.\n */\nexport function merge<T>(iterables: Iterable<Iterable<T>>): T[];\n\n/**\n * For each adjacent pair of elements in the specified array, returns a new array of tuples of elements i and i - 1.\n * Returns the empty array if the input array has fewer than two elements.\n *\n * @param iterable Array of input elements\n */\nexport function pairs<T>(iterable: Iterable<T>): Array<[T, T]>;\n/**\n * For each adjacent pair of elements in the specified array, in order, invokes the specified reducer function passing the element i and element i - 1.\n * Returns the resulting array of pair-wise reduced elements.\n * Returns the empty array if the input array has fewer than two elements.\n *\n * @param iterable Array of input elements\n * @param reducer A reducer function taking as input to adjacent elements of the input array and returning a reduced value.\n */\nexport function pairs<T, U>(iterable: Iterable<T>, reducer: (a: T, b: T) => U): U[];\n\n/**\n * Returns a permutation of the specified source object (or array) using the specified iterable of keys.\n * The returned array contains the corresponding property of the source object for each key in keys, in order.\n * For example, `permute([\"a\", \"b\", \"c\"], [1, 2, 0]) // [\"b\", \"c\", \"a\"]`\n *\n * It is acceptable to have more keys than source elements, and for keys to be duplicated or omitted.\n */\nexport function permute<T>(source: { [key: number]: T }, keys: Iterable<number>): T[];\n/**\n * Extract the values from an object into an array with a stable order. For example:\n * `var object = {yield: 27, year: 1931, site: \"University Farm\"};`\n * `d3.permute(object, [\"site\", \"yield\"]); // [\"University Farm\", 27]`\n */\nexport function permute<T, K extends keyof T>(source: T, keys: Iterable<K>): Array<T[K]>;\n\n/**\n * Randomizes the order of the specified array using the Fisher–Yates shuffle.\n */\nexport function shuffle<T>(array: T[], lo?: number, hi?: number): T[];\nexport function shuffle(array: Int8Array, lo?: number, hi?: number): Int8Array;\nexport function shuffle(array: Uint8Array, lo?: number, hi?: number): Uint8Array;\nexport function shuffle(array: Uint8ClampedArray, lo?: number, hi?: number): Uint8ClampedArray;\nexport function shuffle(array: Int16Array, lo?: number, hi?: number): Int16Array;\nexport function shuffle(array: Uint16Array, lo?: number, hi?: number): Uint16Array;\nexport function shuffle(array: Int32Array, lo?: number, hi?: number): Int32Array;\nexport function shuffle(array: Uint32Array, lo?: number, hi?: number): Uint32Array;\nexport function shuffle(array: Float32Array, lo?: number, hi?: number): Float32Array;\nexport function shuffle(array: Float64Array, lo?: number, hi?: number): Float64Array;\n\n/**\n * Returns a shuffle function given the specified random source.\n */\nexport function shuffler(random: () => number): typeof shuffle;\n\n/**\n * Generate an array of approximately count + 1 uniformly-spaced, nicely-rounded values between start and stop (inclusive).\n * Each value is a power of ten multiplied by 1, 2 or 5. See also d3.tickIncrement, d3.tickStep and linear.ticks.\n *\n * Ticks are inclusive in the sense that they may include the specified start and stop values if (and only if) they are exact,\n * nicely-rounded values consistent with the inferred step. More formally, each returned tick t satisfies start ≤ t and t ≤ stop.\n *\n * @param start Start value for ticks\n * @param stop Stop value for ticks\n * @param count count + 1 is the approximate number of ticks to be returned by d3.ticks.\n */\nexport function ticks(start: number, stop: number, count: number): number[];\n\n/**\n * Returns the difference between adjacent tick values if the same arguments were passed to d3.ticks:\n * a nicely-rounded value that is a power of ten multiplied by 1, 2 or 5.\n *\n * Like d3.tickStep, except requires that start is always less than or equal to stop, and if the tick step for the given start,\n * stop and count would be less than one, returns the negative inverse tick step instead.\n *\n * This method is always guaranteed to return an integer, and is used by d3.ticks to avoid guarantee that the returned tick values\n * are represented as precisely as possible in IEEE 754 floating point.\n *\n * @param start Start value for ticks\n * @param stop Stop value for ticks\n * @param count count + 1 is the approximate number of ticks to be returned by d3.ticks.\n */\nexport function tickIncrement(start: number, stop: number, count: number): number;\n\n/**\n * Returns the difference between adjacent tick values if the same arguments were passed to d3.ticks:\n * a nicely-rounded value that is a power of ten multiplied by 1, 2 or 5.\n *\n * Note that due to the limited precision of IEEE 754 floating point, the returned value may not be exact decimals;\n * use d3-format to format numbers for human consumption.\n *\n * @param start Start value for ticks\n * @param stop Stop value for ticks\n * @param count count + 1 is the approximate number of ticks to be returned by d3.ticks.\n */\nexport function tickStep(start: number, stop: number, count: number): number;\n\n/**\n * Returns a new interval [niceStart, niceStop] covering the given interval [start, stop] and where niceStart and niceStop are guaranteed to align with the corresponding tick step.\n * Like d3.tickIncrement, this requires that start is less than or equal to stop.\n *\n * @param start Start value for ticks\n * @param stop Stop value for ticks\n * @param count count + 1 is the approximate number of ticks to be returned by d3.ticks.\n */\nexport function nice(start: number, stop: number, count: number): [number, number];\n\n/**\n * Generates a 0-based numeric sequence. The output range does not include 'stop'.\n */\nexport function range(stop: number): number[];\n/**\n * Generates a numeric sequence starting from the given start and stop values. 'step' defaults to 1. The output range does not include 'stop'.\n */\n// tslint:disable-next-line:unified-signatures\nexport function range(start: number, stop: number, step?: number): number[];\n\n/**\n * Transpose a matrix provided in Array of Arrays format.\n */\nexport function transpose<T>(matrix: ArrayLike<ArrayLike<T>>): T[][];\n\n/**\n * Returns an array of arrays, where the ith array contains the ith element from each of the argument arrays.\n * The returned array is truncated in length to the shortest array in arrays. If arrays contains only a single array, the returned array\n * contains one-element arrays. With no arguments, the returned array is empty.\n */\nexport function zip<T>(...arrays: Array<ArrayLike<T>>): T[][];\n\n// --------------------------------------------------------------------------------------\n// Blur\n// --------------------------------------------------------------------------------------\n\n/**\n * Blurs an array of data in-place by applying three iterations of a moving average transform (box filter)\n * for a fast approximation of a Gaussian kernel of the given radius, a non-negative number.\n * Returns the given data.\n */\nexport function blur(data: ArrayLike<number>, radius: number): ArrayLike<number>;\n\n/**\n * Blurs a matrix of the given width and height in-place by applying a horizontal blur of radius rx\n * and a vertical blur of radius ry (which defaults to rx).\n * The matrix values data are stored in a flat (one-dimensional) array.\n * If height is not specified, it is inferred from the given width and data.length.\n * Returns the blurred matrix {data, width, height}.\n */\nexport function blur2(data: Matrix, rx: number, ry?: number): Matrix;\n\n/**\n * Blurs the given ImageData in-place, blurring each of the RGBA layers independently by applying an horizontal blur of radius rx\n * and a vertical blur of radius ry (which defaults to rx).\n * Returns the blurred ImageData.\n */\nexport function blurImage(imageData: ImageData, rx: number, ry?: number): ImageData;\n\n// --------------------------------------------------------------------------------------\n// Iterables\n// --------------------------------------------------------------------------------------\n\n/**\n * Returns true if the given test function returns true for every value in the given iterable.\n * This method returns as soon as test returns a non-truthy value or all values are iterated over.\n * Equivalent to array.every.\n */\nexport function every<T>(\n    iterable: Iterable<T>,\n    test: (value: T, index: number, iterable: Iterable<T>) => unknown,\n): boolean;\n\n/**\n * Returns true if the given test function returns true for any value in the given iterable.\n * This method returns as soon as test returns a truthy value or all values are iterated over.\n * Equivalent to array.some.\n */\nexport function some<T>(\n    iterable: Iterable<T>,\n    test: (value: T, index: number, iterable: Iterable<T>) => unknown,\n): boolean;\n\n/**\n * Returns a new array containing the values from iterable, in order, for which the given test function returns true.\n * Equivalent to array.filter.\n */\nexport function filter<T>(\n    iterable: Iterable<T>,\n    test: (value: T, index: number, iterable: Iterable<T>) => unknown,\n): T[];\n\n/**\n * Returns a new array containing the mapped values from iterable, in order, as defined by given mapper function.\n * Equivalent to array.map and Array.from.\n */\nexport function map<T, U>(iterable: Iterable<T>, mapper: (value: T, index: number, iterable: Iterable<T>) => U): U[];\n\n/**\n * Returns the reduced value defined by given reducer function, which is repeatedly invoked for each value in iterable, being passed the current reduced value and the next value.\n * Equivalent to array.reduce.\n */\nexport function reduce<T>(\n    iterable: Iterable<T>,\n    reducer: (previousValue: T, currentValue: T, currentIndex: number, iterable: Iterable<T>) => T,\n    initialValue?: T,\n): T;\n/**\n * Returns the reduced value defined by given reducer function, which is repeatedly invoked for each value in iterable, being passed the current reduced value and the next value.\n * Equivalent to array.reduce.\n */\nexport function reduce<T, U>(\n    iterable: Iterable<T>,\n    reducer: (previousValue: U, currentValue: T, currentIndex: number, iterable: Iterable<T>) => U,\n    initialValue: U,\n): U;\n\n/**\n * Returns an array containing the values in the given iterable in reverse order.\n * Equivalent to array.reverse, except that it does not mutate the given iterable.\n */\nexport function reverse<T>(iterable: Iterable<T>): T[];\n\n/**\n * Returns an array containing the values in the given iterable in the sorted order defined by the given comparator function.\n * If comparator is not specified, it defaults to d3.ascending.\n * Equivalent to array.sort, except that it does not mutate the given iterable, and the comparator defaults to natural order instead of lexicographic order.\n */\nexport function sort<T>(iterable: Iterable<T>, comparator?: (a: T, b: T) => number): T[];\n/**\n * Returns an array containing the values in the given iterable in the sorted order defined by the given accessor function.\n * This is equivalent to a comparator using natural order.\n * The accessor is only invoked once per element, and thus may be nondeterministic.\n * Multiple accessors may be specified to break ties.\n */\nexport function sort<T>(iterable: Iterable<T>, ...accessors: Array<(a: T) => unknown>): T[];\n\n// --------------------------------------------------------------------------------------\n// Sets\n// --------------------------------------------------------------------------------------\n\n/**\n * Returns a new InternSet containing every value in iterable that is not in any of the others iterables.\n */\nexport function difference<T>(iterable: Iterable<T>, ...others: Array<Iterable<T>>): InternSet<T>;\n\n/**\n * Returns a new InternSet containing every (distinct) value that appears in any of the given iterables.\n * The order of values in the returned set is based on their first occurrence in the given iterables.\n */\nexport function union<T>(...iterables: Array<Iterable<T>>): InternSet<T>;\n\n/**\n * Returns a new InternSet containing every (distinct) value that appears in all of the given iterables.\n * The order of values in the returned set is based on their first occurrence in the given iterables.\n */\nexport function intersection<T>(...iterables: Array<Iterable<T>>): InternSet<T>;\n\n/**\n * Returns true if a is a superset of b: if every value in the given iterable b is also in the given iterable a.\n */\nexport function superset<T>(a: Iterable<T>, b: Iterable<T>): boolean;\n\n/**\n * Returns true if a is a subset of b: if every value in the given iterable a is also in the given iterable b.\n */\nexport function subset<T>(a: Iterable<T>, b: Iterable<T>): boolean;\n\n/**\n * Returns true if a and b are disjoint: if a and b contain no shared value.\n */\nexport function disjoint<T>(a: Iterable<T>, b: Iterable<T>): boolean;\n\n// --------------------------------------------------------------------------------------\n// Bins\n// --------------------------------------------------------------------------------------\n\nexport interface Bin<Datum, Value extends number | Date | undefined> extends Array<Datum> {\n    x0: Value | undefined;\n    x1: Value | undefined;\n}\n\n/**\n * Type definition for threshold generator which returns the count of recommended thresholds\n */\nexport type ThresholdCountGenerator<Value extends number | undefined = number | undefined> = (\n    values: ArrayLike<Value>,\n    min: number,\n    max: number,\n) => number;\n\n/**\n * Type definition for threshold generator which returns an array of recommended numbers thresholds\n */\nexport type ThresholdNumberArrayGenerator<Value extends number | undefined> = (\n    values: ArrayLike<Value>,\n    min: number,\n    max: number,\n) => Value[];\n\n/**\n * Type definition for threshold generator which returns an array of recommended dates thresholds\n */\nexport type ThresholdDateArrayGenerator<Value extends Date | undefined> = (\n    values: ArrayLike<Value>,\n    min: Date,\n    max: Date,\n) => Value[];\n\nexport interface HistogramCommon<Datum, Value extends number | Date | undefined> {\n    (data: ArrayLike<Datum>): Array<Bin<Datum, Value>>;\n\n    value(): (d: Datum, i: number, data: ArrayLike<Datum>) => Value;\n    value(valueAccessor: (d: Datum, i: number, data: ArrayLike<Datum>) => Value): this;\n}\n\nexport interface HistogramGeneratorDate<Datum, Value extends Date | undefined> extends HistogramCommon<Datum, Date> {\n    domain(): (values: ArrayLike<Value>) => [Date, Date];\n    domain(domain: [Date, Date] | ((values: ArrayLike<Value>) => [Date, Date])): this;\n\n    thresholds(): ThresholdDateArrayGenerator<Value>;\n    /**\n     * Set the array of values to be used as thresholds in determining the bins.\n     *\n     * Any threshold values outside the domain are ignored. The first bin.x0 is always equal to the minimum domain value,\n     * and the last bin.x1 is always equal to the maximum domain value.\n     *\n     * @param thresholds Either an array of threshold values used for binning. The elements must\n     * be of the same type as the materialized values of the histogram.\n     * Or a function which accepts as arguments the array of materialized values, and\n     * optionally the domain minimum and maximum. The function calculates and returns the array of values to be used as\n     * thresholds in determining the bins.\n     */\n    thresholds(thresholds: ArrayLike<Value> | ThresholdDateArrayGenerator<Value>): this;\n}\n\nexport interface HistogramGeneratorNumber<Datum, Value extends number | undefined>\n    extends HistogramCommon<Datum, Value>\n{\n    domain(): (values: Iterable<Value>) => [number, number] | [undefined, undefined];\n    domain(domain: [number, number] | ((values: Iterable<Value>) => [number, number] | [undefined, undefined])): this;\n\n    thresholds(): ThresholdCountGenerator<Value> | ThresholdNumberArrayGenerator<Value>;\n    /**\n     * Divide the domain uniformly into approximately count bins. IMPORTANT: This threshold\n     * setting approach only works, when the materialized values are numbers!\n     *\n     * Any threshold values outside the domain are ignored. The first bin.x0 is always equal to the minimum domain value,\n     * and the last bin.x1 is always equal to the maximum domain value.\n     *\n     * @param count Either the desired number of uniform bins or a function which accepts as arguments the array of\n     * materialized values, and optionally the domain minimum and maximum. The function calculates and returns the\n     * suggested number of bins.\n     */\n    thresholds(count: number | ThresholdCountGenerator<Value>): this;\n    /**\n     * Set the array of values to be used as thresholds in determining the bins.\n     *\n     * Any threshold values outside the domain are ignored. The first bin.x0 is always equal to the minimum domain value,\n     * and the last bin.x1 is always equal to the maximum domain value.\n     *\n     * @param thresholds Either an array of threshold values used for binning. The elements must\n     * be of the same type as the materialized values of the histogram.\n     * Or a function which accepts as arguments the array of materialized values, and\n     * optionally the domain minimum and maximum. The function calculates and returns the array of values to be used as\n     * thresholds in determining the bins.\n     */\n    // tslint:disable-next-line:unified-signatures\n    thresholds(thresholds: ArrayLike<Value> | ThresholdNumberArrayGenerator<Value>): this;\n}\n\n/**\n * @deprecated Use bin instead.\n */\nexport function histogram(): HistogramGeneratorNumber<number, number>;\n\n/**\n * @deprecated Use bin instead.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function histogram<Datum, Value extends number | undefined>(): HistogramGeneratorNumber<Datum, Value>;\n\n/**\n * @deprecated Use bin instead.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function histogram<Datum, Value extends Date | undefined>(): HistogramGeneratorDate<Datum, Value>;\n\nexport function bin(): HistogramGeneratorNumber<number, number>;\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function bin<Datum, Value extends number | undefined>(): HistogramGeneratorNumber<Datum, Value>;\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function bin<Datum, Value extends Date | undefined>(): HistogramGeneratorDate<Datum, Value>;\n\n// --------------------------------------------------------------------------------------\n// Histogram Thresholds\n// --------------------------------------------------------------------------------------\n\nexport function thresholdFreedmanDiaconis(values: ArrayLike<number | undefined>, min: number, max: number): number; // of type ThresholdCountGenerator\n\nexport function thresholdScott(values: ArrayLike<number | undefined>, min: number, max: number): number; // of type ThresholdCountGenerator\n\nexport function thresholdSturges(values: ArrayLike<number | undefined>): number; // of type ThresholdCountGenerator\n\n// --------------------------------------------------------------------------------------\n// Interning\n// --------------------------------------------------------------------------------------\n\n/**\n * The InternMap class extends the native JavaScript Map class, allowing Dates and other non-primitive keys by bypassing the SameValueZero algorithm when determining key equality.\n */\nexport class InternMap<K = any, V = any> extends Map<K, V> {\n}\n\n/**\n * The InternSet class extends the native JavaScript Set class, allowing Dates and other non-primitive keys by bypassing the SameValueZero algorithm when determining key equality.\n */\nexport class InternSet<T = any> extends Set<T> {\n}\n\n// Types from d3-axis\n// Last module patch version validated against: 3.0.0\n\n// --------------------------------------------------------------------------\n// Shared Types and Interfaces\n// --------------------------------------------------------------------------\n\n/**\n * A helper type to alias elements which can serve as a domain for an axis.\n */\nexport type AxisDomain = number | string | Date | { valueOf(): number };\n\n/**\n * A helper interface to describe the minimal contract to be met by a time interval\n * which can be passed into the Axis.ticks(...) or Axis.tickArguments(...) methods when\n * creating time series axes. Under normal circumstances the argument will be of type\n * TimeInterval or CountableTimeInterval as defined in d3-time.\n * NB: This helper interface has been created to avoid tight coupling of d3-axis to\n * d3-time at the level of definition files. I.e. d3-time is not a\n * dependency of d3-axis in the D3 Javascript implementation. This minimal contract\n * is based on an analysis of how d3-axis passes a time interval argument into a time scale,\n * if a time scale was set using Axis.scale(...). And in turn on how a time scale uses\n * the time interval when creating ticks from it.\n */\nexport interface AxisTimeInterval {\n    range(start: Date, stop: Date, step?: number): Date[];\n}\n\n/**\n * A helper interface to which a scale passed into axis must conform (at a minimum)\n * for axis to use the scale without error.\n */\nexport interface AxisScale<Domain> {\n    (x: Domain): number | undefined;\n    domain(): Domain[];\n    range(): number[];\n    copy(): this;\n    bandwidth?(): number;\n    // TODO: Reconsider the below, note that the compiler does not differentiate the overloads w.r.t. optionality\n    // ticks?(count?: number): Domain[];\n    // ticks?(count?: AxisTimeInterval): Date[];\n    // tickFormat?(count?: number, specifier?: string): ((d: number) => string);\n    // tickFormat?(count?: number | AxisTimeInterval, specifier?: string): ((d: Date) => string);\n}\n\n/**\n * A helper type to alias elements which can serve as a container for an axis.\n */\nexport type AxisContainerElement = SVGSVGElement | SVGGElement;\n\n/**\n * Interface defining an axis generator. The generic <Domain> is the type of the axis domain.\n */\nexport interface Axis<Domain> {\n    /**\n     * Render the axis to the given context.\n     *\n     * @param context A selection of or a transition defined on SVG containers (either SVG or G elements).\n     */\n    (\n        context:\n            | Selection<SVGSVGElement, any, any, any>\n            | Selection<SVGGElement, any, any, any>\n            | TransitionLike<SVGSVGElement, any>\n            | TransitionLike<SVGGElement, any>,\n    ): void;\n\n    /**\n     * Gets the current scale underlying the axis.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    scale<A extends AxisScale<Domain>>(): A;\n\n    /**\n     * Sets the scale and returns the axis.\n     *\n     * @param scale The scale to be used for axis generation.\n     */\n    scale(scale: AxisScale<Domain>): this;\n\n    /**\n     * Sets the arguments that will be passed to scale.ticks and scale.tickFormat when the axis is rendered, and returns the axis generator.\n     *\n     * This method has no effect if the scale does not implement scale.ticks, as with band and point scales.\n     *\n     * This method is also a convenience function for axis.tickArguments.\n     *\n     * @param count Number of ticks that should be rendered.\n     * @param specifier An optional format specifier to customize how the tick values are formatted.\n     */\n    ticks(count: number, specifier?: string): this;\n\n    /**\n     * Sets the arguments that will be passed to scale.ticks and scale.tickFormat when the axis is rendered, and returns the axis generator.\n     * Use with a TIME SCALE ONLY.\n     *\n     * This method is also a convenience function for axis.tickArguments.\n     *\n     * @param interval A time interval used to generate date-based ticks. This is typically a TimeInterval/CountableTimeInterval as defined\n     * in d3-time. E.g. as obtained by passing in d3.timeMinute.every(15).\n     * @param specifier An optional format specifier to customize how the tick values are formatted.\n     */\n    // tslint:disable-next-line:unified-signatures\n    ticks(interval: AxisTimeInterval, specifier?: string): this;\n\n    /**\n     * Sets the arguments that will be passed to scale.ticks and scale.tickFormat when the axis is rendered, and returns the axis generator.\n     *\n     * The meaning of the arguments depends on the axis’ scale type: most commonly, the arguments are a suggested count for the number of ticks\n     * (or a time interval for time scales), and an optional format specifier to customize how the tick values are formatted.\n     *\n     * This method has no effect if the scale does not implement scale.ticks, as with band and point scales.\n     *\n     * To set the tick values explicitly, use axis.tickValues. To set the tick format explicitly, use axis.tickFormat.\n     *\n     * This method is also a convenience function for axis.tickArguments.\n     */\n    ticks(arg0: any, ...args: any[]): this;\n\n    /**\n     * Get an array containing the currently set arguments to be passed into scale.ticks and scale.tickFormat, which defaults to the empty array.\n     */\n    tickArguments(): any[];\n\n    /**\n     * Sets the arguments that will be passed to scale.ticks and scale.tickFormat when the axis is rendered, and returns the axis generator.\n     *\n     * This method has no effect if the scale does not implement scale.ticks, as with band and point scales.\n     * To set the tick values explicitly, use axis.tickValues. To set the tick format explicitly, use axis.tickFormat.\n     *\n     * See also axis.ticks.\n     *\n     * @param args The meaning of the arguments depends on the axis’ scale type: most commonly, the arguments are a\n     * suggested count for the number of ticks (or a time interval for time scales), and an optional format specifier to\n     * customize how the tick values are formatted.\n     */\n    tickArguments(args: any[]): this;\n\n    /**\n     * Returns the current tick values, which defaults to null.\n     */\n    tickValues(): Domain[] | null;\n\n    /**\n     * Specified values to be used for ticks rather than using the scale’s automatic tick generator.\n     * The explicit tick values take precedent over the tick arguments set by axis.tickArguments.\n     * However, any tick arguments will still be passed to the scale’s tickFormat function if a\n     * tick format is not also set.\n     *\n     * @param values An iterable with values from the Domain of the scale underlying the axis.\n     */\n    tickValues(values: Iterable<Domain>): this;\n\n    /**\n     * Clears any previously-set explicit tick values and reverts back to the scale’s tick generator.\n     *\n     * @param values null\n     */\n    tickValues(values: null): this;\n\n    /**\n     * Returns the currently set tick format function, which defaults to null.\n     */\n    tickFormat(): ((domainValue: Domain, index: number) => string) | null;\n\n    /**\n     * Sets the tick format function and returns the axis.\n     *\n     * @param format A function mapping a value from the axis Domain to a formatted string\n     * for display purposes. When invoked, the format function is also passed a second argument representing the zero-based index\n     * of the tick label in the array of generated tick labels.\n     */\n    tickFormat(format: (domainValue: Domain, index: number) => string): this;\n\n    /**\n     * Reset the tick format function. A null format indicates that the scale’s\n     * default formatter should be used, which is generated by calling scale.tickFormat.\n     * In this case, the arguments specified by axis.tickArguments\n     * are likewise passed to scale.tickFormat.\n     *\n     * @param format null\n     */\n    tickFormat(format: null): this;\n\n    /**\n     * Get the current inner tick size, which defaults to 6.\n     */\n    tickSize(): number;\n    /**\n     * Set the inner and outer tick size to the specified value and return the axis.\n     *\n     * @param size Tick size in pixels (Default is 6).\n     */\n    tickSize(size: number): this;\n\n    /**\n     * Get the current inner tick size, which defaults to 6.\n     * The inner tick size controls the length of the tick lines,\n     * offset from the native position of the axis.\n     */\n    tickSizeInner(): number;\n\n    /**\n     * Set the inner tick size to the specified value and return the axis.\n     * The inner tick size controls the length of the tick lines,\n     * offset from the native position of the axis.\n     *\n     * @param size Tick size in pixels (Default is 6).\n     */\n    tickSizeInner(size: number): this;\n\n    /**\n     * Get the current outer tick size, which defaults to 6.\n     * The outer tick size controls the length of the square ends of the domain path,\n     * offset from the native position of the axis. Thus, the “outer ticks” are not actually\n     * ticks but part of the domain path, and their position is determined by the associated\n     * scale’s domain extent. Thus, outer ticks may overlap with the first or last inner tick.\n     * An outer tick size of 0 suppresses the square ends of the domain path,\n     * instead producing a straight line.\n     */\n    tickSizeOuter(): number;\n\n    /**\n     * Set the current outer tick size and return the axis.\n     * The outer tick size controls the length of the square ends of the domain path,\n     * offset from the native position of the axis. Thus, the “outer ticks” are not actually\n     * ticks but part of the domain path, and their position is determined by the associated\n     * scale’s domain extent. Thus, outer ticks may overlap with the first or last inner tick.\n     * An outer tick size of 0 suppresses the square ends of the domain path,\n     * instead producing a straight line.\n     *\n     * @param size Tick size in pixels (Default is 6).\n     */\n    tickSizeOuter(size: number): this;\n\n    /**\n     * Get the current padding, which defaults to 3.\n     */\n    tickPadding(): number;\n\n    /**\n     * Set the current padding and return the axis.\n     *\n     * @param padding Padding in pixels (Default is 3).\n     */\n    tickPadding(padding: number): this;\n\n    /**\n     * Returns the current offset which defaults to 0 on devices with a devicePixelRatio greater than 1, and 0.5px otherwise.\n     * This default offset ensures crisp edges on low-resolution devices.\n     */\n    offset(): number;\n\n    /**\n     * Sets the offset to the specified value in pixels and returns the axis.\n     * Defaults to 0 on devices with a devicePixelRatio greater than 1, and 0.5px otherwise.\n     * This default offset ensures crisp edges on low-resolution devices.\n     */\n    offset(offset: number): this;\n}\n\n/**\n * Constructs a new top-oriented axis generator for the given scale, with empty tick arguments,\n * a tick size of 6 and padding of 3. In this orientation, ticks are drawn above the horizontal domain path.\n *\n * @param scale The scale to be used for axis generation.\n */\nexport function axisTop<Domain extends AxisDomain>(scale: AxisScale<Domain>): Axis<Domain>;\n\n/**\n * Constructs a new right-oriented axis generator for the given scale, with empty tick arguments,\n * a tick size of 6 and padding of 3. In this orientation, ticks are drawn to the right of the vertical domain path.\n *\n * @param scale The scale to be used for axis generation.\n */\nexport function axisRight<Domain extends AxisDomain>(scale: AxisScale<Domain>): Axis<Domain>;\n\n/**\n * Constructs a new bottom-oriented axis generator for the given scale, with empty tick arguments,\n * a tick size of 6 and padding of 3. In this orientation, ticks are drawn below the horizontal domain path.\n *\n * @param scale The scale to be used for axis generation.\n */\nexport function axisBottom<Domain extends AxisDomain>(scale: AxisScale<Domain>): Axis<Domain>;\n\n/**\n * Constructs a new left-oriented axis generator for the given scale, with empty tick arguments,\n * a tick size of 6 and padding of 3. In this orientation, ticks are drawn to the left of the vertical domain path.\n *\n * @param scale The scale to be used for axis generation.\n */\nexport function axisLeft<Domain extends AxisDomain>(scale: AxisScale<Domain>): Axis<Domain>;\n\n// Types from d3-brush\n// Last module patch version validated against: 3.0.0\n\n/**\n * Type alias for a BrushSelection. For a two-dimensional brush, it must be defined as [[x0, y0], [x1, y1]],\n * where x0 is the minimum x-value, y0 is the minimum y-value, x1 is the maximum x-value, and y1 is the maximum y-value.\n * For an x-brush, it must be defined as [x0, x1]; for a y-brush, it must be defined as [y0, y1].\n */\nexport type BrushSelection = [[number, number], [number, number]] | [number, number];\n\n/**\n * A D3 brush behavior\n *\n * The generic refers to the type of the datum for the group element on which brush behavior is defined.\n */\nexport interface BrushBehavior<Datum> {\n    /**\n     * Applies the brush to the specified group, which must be a selection of SVG G elements.\n     * This function is typically not invoked directly, and is instead invoked via selection.call.\n     *\n     * For details see: {@link https://github.com/d3/d3-brush#_brush}\n     *\n     * @param group A D3 selection of SVG G elements.\n     * @param args Optional arguments to be passed in.\n     */\n    (group: Selection<SVGGElement, Datum, any, any>, ...args: any[]): void;\n    /**\n     * Clear the active selection of the brush on the specified SVG G element(s) selection.\n     *\n     * @param group A selection or a transition of SVG G elements\n     * @param selection The selection must be defined as an array of numbers, or null to clear the brush selection.\n     * For a two-dimensional brush, it must be defined as [[x0, y0], [x1, y1]], where x0 is the minimum x-value, y0 is the minimum y-value, x1 is the maximum x-value, and y1 is the maximum y-value.\n     * For an x-brush, it must be defined as [x0, x1]; for a y-brush, it must be defined as [y0, y1].\n     * The selection may also be specified as a function which returns such an array;\n     * if a function, it is invoked for each selected element, being passed the current datum d and index i, with the this context as the current DOM element.\n     * The returned array defines the brush selection for that element.\n     * @param event\n     */\n    move(\n        group: Selection<SVGGElement, Datum, any, any> | TransitionLike<SVGGElement, Datum>,\n        selection: null | BrushSelection | ValueFn<SVGGElement, Datum, BrushSelection>,\n        event?: Event,\n    ): void;\n\n    /**\n     * Clear the active selection of the brush on the specified SVG G element(s) selection.\n     *\n     * @param group A D3 selection of SVG G elements.\n     * @param event\n     */\n    clear(group: Selection<SVGGElement, Datum, any, any>, event?: Event): void;\n\n    /**\n     * Returns the current extent accessor.\n     */\n    extent(): ValueFn<SVGGElement, Datum, [[number, number], [number, number]]>;\n    /**\n     * Set the brushable extent to the specified array of points and returns this brush.\n     *\n     * The brush extent determines the size of the invisible overlay and also constrains the brush selection;\n     * the brush selection cannot go outside the brush extent.\n     *\n     * @param extent array of points [[x0, y0], [x1, y1]], where [x0, y0] is the top-left corner\n     * and [x1, y1] is the bottom-right corner.\n     */\n    extent(extent: [[number, number], [number, number]]): this;\n    /**\n     * Set the brushable extent to the specified array of points returned by the accessor function\n     * evaluated for each element in the selection/transition and returns this brush.\n     *\n     * The brush extent determines the size of the invisible overlay and also constrains the brush selection;\n     * the brush selection cannot go outside the brush extent.\n     *\n     * @param extent An extent accessor function which is evaluated for each selected element,\n     * in order, being passed the current datum (d), the current index (i), and the current group (nodes),\n     * with this as the current DOM element. The function returns an array of points [[x0, y0], [x1, y1]],\n     * where [x0, y0] is the top-left corner and [x1, y1] is the bottom-right corner.\n     */\n    extent(extent: ValueFn<SVGGElement, Datum, [[number, number], [number, number]]>): this;\n\n    /**\n     * Returns the current filter function.\n     */\n    filter(): (this: SVGGElement, event: any, d: Datum) => boolean;\n    /**\n     * Sets the filter to the specified filter function and returns the brush.\n     *\n     * If the filter returns falsey, the initiating event is ignored and no brush gesture is started.\n     * Thus, the filter determines which input events are ignored. The default filter ignores mousedown events on secondary buttons,\n     * since those buttons are typically intended for other purposes, such as the context menu.\n     *\n     * @param filterFn A filter function which is evaluated for each selected element,\n     * in order, being passed the current event `event` and datum `d`, with the `this` context as the current DOM element.\n     * The function returns a boolean value.\n     */\n    filter(filterFn: (this: SVGGElement, event: any, d: Datum) => boolean): this;\n\n    /**\n     * Returns the current touch support detector, which defaults to a function returning true,\n     * if the \"ontouchstart\" event is supported on the current element.\n     */\n    touchable(): ValueFn<SVGGElement, Datum, boolean>;\n    /**\n     * Sets the touch support detector to the specified boolean value and returns the brush.\n     *\n     * Touch event listeners are only registered if the detector returns truthy for the corresponding element when the brush is applied.\n     * The default detector works well for most browsers that are capable of touch input, but not all; Chrome’s mobile device emulator, for example,\n     * fails detection.\n     *\n     * @param touchable A boolean value. true when touch event listeners should be applied to the corresponding element, otherwise false.\n     */\n    touchable(touchable: boolean): this;\n    /**\n     * Sets the touch support detector to the specified function and returns the drag behavior.\n     *\n     * Touch event listeners are only registered if the detector returns truthy for the corresponding element when the brush is applied.\n     * The default detector works well for most browsers that are capable of touch input, but not all; Chrome’s mobile device emulator, for example,\n     * fails detection.\n     *\n     * @param touchable A touch support detector function, which returns true when touch event listeners should be applied to the corresponding element.\n     * The function is evaluated for each selected element to which the brush was applied, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element. The function returns a boolean value.\n     */\n    touchable(touchable: ValueFn<SVGGElement, Datum, boolean>): this;\n\n    /**\n     * Returns the current key modifiers flag.\n     */\n    keyModifiers(): boolean;\n    /**\n     * Sets the key modifiers flag and returns the brush.\n     *\n     * The key modifiers flag determines whether the brush listens to key events during brushing.\n     * The default value is true.\n     *\n     * @param modifiers New value for key modifiers flag.\n     */\n    keyModifiers(modifiers: boolean): this;\n\n    /**\n     * Returns the current handle size, which defaults to six.\n     */\n    handleSize(): number;\n    /**\n     * Sets the size of the brush handles to the specified number and returns the brush.\n     *\n     * This method must be called before applying the brush to a selection;\n     * changing the handle size does not affect brushes that were previously rendered.\n     * The default size is 6.\n     *\n     * @param size Size of the handle.\n     */\n    handleSize(size: number): this;\n\n    /**\n     * Returns the first currently-assigned listener matching the specified typenames, if any.\n     *\n     * @param typenames The typenames is a string containing one or more typename separated by whitespace.\n     * Each typename is a type, optionally followed by a period (.) and a name, such as \"brush.foo\"\" and \"brush.bar\";\n     * the name allows multiple listeners to be registered for the same type. The type must be one of the following:\n     * start (at the start of a brush gesture, such as on mousedown), brush (when the brush moves, such as on mousemove), or\n     * end (at the end of a brush gesture, such as on mouseup.)\n     */\n    on(typenames: string): ((this: SVGGElement, event: any, d: Datum) => void) | undefined;\n    /**\n     * Removes the current event listeners for the specified typenames, if any.\n     *\n     * @param typenames The typenames is a string containing one or more typename separated by whitespace.\n     * Each typename is a type, optionally followed by a period (.) and a name, such as \"brush.foo\"\" and \"brush.bar\";\n     * the name allows multiple listeners to be registered for the same type. The type must be one of the following:\n     * start (at the start of a brush gesture, such as on mousedown), brush (when the brush moves, such as on mousemove), or\n     * end (at the end of a brush gesture, such as on mouseup.)\n     * @param listener Use null to remove the listener.\n     */\n    on(typenames: string, listener: null): this;\n    /**\n     * Sets the event listener for the specified typenames and returns the brush.\n     * If an event listener was already registered for the same type and name,\n     * the existing listener is removed before the new listener is added.\n     * When a specified event is dispatched, each listener will be invoked with the same context and arguments as selection.on listeners.\n     *\n     * @param typenames The typenames is a string containing one or more typename separated by whitespace.\n     * Each typename is a type, optionally followed by a period (.) and a name, such as \"brush.foo\"\" and \"brush.bar\";\n     * the name allows multiple listeners to be registered for the same type. The type must be one of the following:\n     * start (at the start of a brush gesture, such as on mousedown), brush (when the brush moves, such as on mousemove), or\n     * end (at the end of a brush gesture, such as on mouseup.)\n     * @param listener An event listener function which is evaluated for each selected element,\n     * in order, being passed the current event `event` and datum `d`, with the `this` context as the current DOM element.\n     */\n    on(typenames: string, listener: (this: SVGGElement, event: any, d: Datum) => void): this;\n}\n\n/**\n * Create a new two-dimensional brush.\n *\n * The generic \"Datum\" refers to the type of the data of the selected svg:g element to\n * which the returned BrushBehavior will be applied.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function brush<Datum>(): BrushBehavior<Datum>;\n/**\n * Creates a new one-dimensional brush along the x-dimension.\n *\n * The generic \"Datum\" refers to the type of the data of the selected svg:g element to\n * which the returned BrushBehavior will be applied.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function brushX<Datum>(): BrushBehavior<Datum>;\n/**\n * Creates a new one-dimensional brush along the y-dimension.\n *\n * The generic \"Datum\" refers to the type of the data of the selected svg:g element to\n * which the returned BrushBehavior will be applied.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function brushY<Datum>(): BrushBehavior<Datum>;\n\n/**\n * Return the current brush selection for the specified node. Internally, an element’s brush state is stored as element.__brush;\n * however, you should use this method rather than accessing it directly. If the given node has no selection, returns null.\n * Otherwise, the selection is defined as an array of numbers.\n *\n * @param node The node for which the brush selection should be returned.\n */\nexport function brushSelection(node: SVGGElement): BrushSelection | null;\n\n/**\n * D3 brush event\n *\n * The generic refers to the type of the datum for the group element on which brush was defined.\n */\nexport interface D3BrushEvent<Datum> {\n    /**\n     * The BrushBehavior associated with the event\n     */\n    target: BrushBehavior<Datum>;\n    /**\n     * The event type for the BrushEvent\n     */\n    type: \"start\" | \"brush\" | \"end\" | string; // Leave failsafe string type for cases like 'brush.foo'\n    /**\n     * The current brush selection associated with the event.\n     * This is null when the selection is empty.\n     */\n    selection: BrushSelection | null;\n    /**\n     * The underlying input event, such as mousemove or touchmove.\n     */\n    sourceEvent: any;\n    /**\n     * The mode of the brush.\n     */\n    mode: \"drag\" | \"space\" | \"handle\" | \"center\";\n}\n\n// Types from d3-chord\n// Last module patch version validated against: 3.0.1\n\n// ---------------------------------------------------------------------\n// Chord\n// ---------------------------------------------------------------------\n\n/**\n * A chord subgroup serving as source or target of a chord between two nodes i an j (where i may be equal to j).\n */\nexport interface ChordSubgroup {\n    /**\n     * Start angle of the chord subgroup in radians\n     */\n    startAngle: number;\n\n    /***\n     * End angle of the chord subgroup in radians\n     */\n    endAngle: number;\n\n    /**\n     * The flow value in matrix[i][j] from node i to node j\n     */\n    value: number;\n\n    /**\n     * The node index i\n     */\n    index: number;\n}\n\n/**\n * A chord represents the combined bidirectional flow between two nodes i and j (where i may be equal to j)\n */\nexport interface Chord {\n    /**\n     * Chord subgroup constituting the source of Chord\n     */\n    source: ChordSubgroup;\n    /**\n     * Chord subgroup constituting the Target of Chord\n     */\n    target: ChordSubgroup;\n}\n\n/**\n * A chord group for a given node i representing the combined outflow for node i,\n * corresponding to the elements matrix[i][0 … n - 1].\n */\nexport interface ChordGroup {\n    /**\n     * The start angle of the chord group in radians\n     */\n    startAngle: number;\n\n    /**\n     * The end angle of the chord group in radians\n     */\n    endAngle: number;\n\n    /**\n     * The total outgoing flow value for node i\n     */\n    value: number;\n\n    /**\n     * The node index i\n     */\n    index: number;\n}\n\n/**\n * An array of chords, where each chord represents the combined bidirectional flow between two nodes i and j (where i may be equal to j).\n * The chords are based on a (n x n) matrix of flows between nodes.\n *\n * The chords are typically passed to d3.ribbon to display the network relationships.\n * The returned array includes only chord objects for which the value matrix[i][j] or matrix[j][i] is non-zero.\n * Furthermore, the returned array only contains unique chords: a given chord ij represents the bidirectional flow from i to j and from j to i,\n * and does not contain a duplicate chord ji; i and j are chosen such that the chord’s source always represents the larger of matrix[i][j] and matrix[j][i].\n * In other words, chord.source.index equals chord.target.subindex, chord.source.subindex equals chord.target.index,\n * chord.source.value is greater than or equal to chord.target.value, and chord.source.value is always greater than zero.\n */\nexport interface Chords extends Array<Chord> {\n    /**\n     * An array of length n, where each group represents the combined outflow for node i,\n     * corresponding to the elements matrix[i][0 … n - 1]\n     */\n    groups: ChordGroup[];\n}\n\n/**\n * A D3 chord diagram Layout to visualize relationships or network flow with an aesthetically-pleasing circular layout.\n *\n * The relationships are represented as a square matrix of size n×n, where the matrix represents the directed flow amongst a network (a complete digraph) of n nodes.\n */\nexport interface ChordLayout {\n    /**\n     * Computes the chord layout for the specified square matrix of size n×n, where the matrix represents the directed flow amongst a network (a complete digraph) of n nodes.\n     *\n     * @param matrix An (n x n) matrix representing the directed flow amongst a network (a complete digraph) of n nodes.The given matrix must be an array of length n,\n     * where each element matrix[i] is an array of n numbers, where each matrix[i][j] represents the flow from the ith node in the network to the jth node.\n     * Each number matrix[i][j] must be nonnegative, though it can be zero if there is no flow from node i to node j.\n     */\n    (matrix: number[][]): Chords;\n\n    /**\n     * Returns the current pad angle in radians, which defaults to zero.\n     */\n    padAngle(): number;\n    /**\n     * Sets the pad angle between adjacent groups to the specified number in radians and returns this chord layout.\n     *\n     * The default is zero.\n     *\n     * @param angle Pad angle between adjacent groups in radians.\n     */\n    padAngle(angle: number): this;\n\n    /**\n     * Returns the current group comparator, which defaults to null.\n     */\n    sortGroups(): ((a: number, b: number) => number) | null;\n    /**\n     * Sets the group comparator to the specified function or null and returns this chord layout.\n     * If the group comparator is non-null, it is used to sort the groups by their total outflow.\n     * See also d3.ascending and d3.descending.\n     */\n    sortGroups(compare: null | ((a: number, b: number) => number)): this;\n\n    /**\n     * Returns the current subgroup comparator, which defaults to null.\n     */\n    sortSubgroups(): ((a: number, b: number) => number) | null;\n    /**\n     * Sets the subgroup comparator to the specified function or null and returns this chord layout.\n     * If the subgroup comparator is non-null, it is used to sort the subgroups corresponding to matrix[i][0 … n - 1] for a given group i by their total outflow.\n     * See also d3.ascending and d3.descending.\n     */\n    sortSubgroups(compare: null | ((a: number, b: number) => number)): this;\n\n    /**\n     * Returns the current chord comparator, which defaults to null.\n     */\n    sortChords(): ((a: number, b: number) => number) | null;\n    /**\n     * Sets the chord comparator to the specified function or null and returns this chord layout.\n     * If the chord comparator is non-null, it is used to sort the chords by their combined flow; this only affects the z-order of the chords.\n     * See also d3.ascending and d3.descending.\n     */\n    sortChords(compare: null | ((a: number, b: number) => number)): this;\n}\n\n/**\n * Constructs a new chord diagram layout with the default settings.\n */\nexport function chord(): ChordLayout;\n\n/**\n * A chord layout for directional flows. The chord from i to j is generated from the value in matrix[i][j] only.\n */\nexport function chordDirected(): ChordLayout;\n\n/**\n * A transposed chord layout. Useful to highlight outgoing (rather than incoming) flows.\n */\nexport function chordTranspose(): ChordLayout;\n\n// ---------------------------------------------------------------------\n// Ribbon\n// ---------------------------------------------------------------------\n\n/**\n * A minimal interface to support the default accessors used by RibbonGenerator for properties of\n * source and target objects of a Ribbon.\n *\n * (Corresponds to ChordSubgroup)\n */\nexport interface RibbonSubgroup {\n    /**\n     * Start angle of the ribbon subgroup in radians\n     */\n    startAngle: number;\n    /**\n     * End angle of the ribbon subgroup in radians\n     */\n    endAngle: number;\n    /**\n     * Radius of the ribbon subgroup\n     */\n    radius: number;\n}\n\n/**\n * A minimal interface to support the default source and target accessors used by RibbonGenerator.\n * (Corresponds to Chord)\n */\nexport interface Ribbon {\n    /**\n     * Ribbon subgroup constituting the source of the Ribbon\n     */\n    source: RibbonSubgroup;\n    /**\n     * Ribbon subgroup constituting the target of the Ribbon\n     */\n    target: RibbonSubgroup;\n}\n\n/**\n * A ribbon generator to support rendering of chords in a chord diagram.\n *\n * The first generic corresponds to the type of the \"this\" context within which the ribbon generator and its accessor functions will be invoked.\n *\n * The second generic corresponds to the datum type representing a chord for which the ribbon is to be generated. The default type is Ribbon.\n *\n * The third generic corresponds to the datum type of the chord subgroup, i.e. source or target of the cord. The default type is RibbonSubgroup.\n */\nexport interface RibbonGenerator<This, RibbonDatum, RibbonSubgroupDatum> {\n    /**\n     * Generates a ribbon for the given arguments.\n     *\n     * IMPORTANT: If the ribbon generator has been configured with a rendering context,\n     * then the ribbon is rendered to this context as a sequence of path method calls and this function returns void.\n     *\n     * The \"this\" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.\n     * All arguments passed into this function, will be passed to the accessor functions of the generator.\n     *\n     * @param d The datum representing the chord for which the ribbon is to be generated.\n     */\n    (this: This, d: RibbonDatum, ...args: any[]): void;\n    /**\n     * Generates a ribbon for the given arguments.\n     *\n     * IMPORTANT: If the rendering context of the ribbon generator is null,\n     * then the ribbon is returned as a path data string.\n     *\n     * The \"this\" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.\n     * All arguments passed into this function, will be passed to the accessor functions of the generator.\n     *\n     * @param d The datum representing the chord for which the ribbon is to be generated.\n     */\n    (this: This, d: RibbonDatum, ...args: any[]): string | null;\n\n    /**\n     * Returns the current source accessor, which defaults to a function returning the \"source\" property of the first argument passed into the accessor.\n     */\n    source(): (this: This, d: RibbonDatum, ...args: any[]) => RibbonSubgroupDatum;\n    /**\n     * Sets the source accessor to the specified function and returns this ribbon generator.\n     *\n     * @param source An accessor function returning the source datum of the chord. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that were passed into the ribbon generator.\n     */\n    source(source: (this: This, d: RibbonDatum, ...args: any[]) => RibbonSubgroupDatum): this;\n\n    /**\n     * Returns the current target accessor, which defaults to a function returning the \"target\" property of the first argument passed into the accessor.\n     */\n    target(): (this: This, d: RibbonDatum, ...args: any[]) => RibbonSubgroupDatum;\n    /**\n     * Sets the target accessor to the specified function and returns this ribbon generator.\n     *\n     * @param target An accessor function returning the target datum of the chord. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that were passed into the ribbon generator.\n     */\n    target(target: (this: This, d: RibbonDatum, ...args: any[]) => RibbonSubgroupDatum): this;\n\n    /**\n     * Returns the current radius accessor, which defaults to a function returning the \"radius\" property (assumed to be a number) of the source or\n     * target object returned by the source or target accessor, respectively.\n     */\n    radius(): (this: This, d: RibbonSubgroupDatum, ...args: any[]) => number;\n    /**\n     * Sets the radius to a fixed number and returns this ribbon generator.\n     *\n     * @param radius A fixed numeric value for the radius.\n     */\n    radius(radius: number): this;\n    /**\n     * Sets the radius accessor to the specified function and returns this ribbon generator.\n     *\n     * @param radius An accessor function which is invoked for the source and target of the chord. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives as the first argument the source or target object returned by the respective source or target accessor function of the generator.\n     * It is also passed any additional arguments that were passed into the generator, with the exception of the first element representing the chord datum itself.\n     * The function returns the radius value.\n     */\n    radius(radius: (this: This, d: RibbonSubgroupDatum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current source radius accessor, which defaults to a function returning the \"radius\" property (assumed to be a number) of the source or\n     * target object returned by the source or target accessor, respectively.\n     */\n    sourceRadius(): (this: This, d: RibbonSubgroupDatum, ...args: any[]) => number;\n    /**\n     * Sets the source radius to a fixed number and returns this ribbon generator.\n     *\n     * @param radius A fixed numeric value for the source radius.\n     */\n    sourceRadius(radius: number): this;\n    /**\n     * Sets the source radius accessor to the specified function and returns this ribbon generator.\n     *\n     * @param radius An accessor function which is invoked for the source and target of the chord. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives as the first argument the source or target object returned by the respective source or target accessor function of the generator.\n     * It is also passed any additional arguments that were passed into the generator, with the exception of the first element representing the chord datum itself.\n     * The function returns the source radius value.\n     */\n    sourceRadius(radius: (this: This, d: RibbonSubgroupDatum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current target radius accessor, which defaults to a function returning the \"radius\" property (assumed to be a number) of the source or\n     * target object returned by the source or target accessor, respectively.\n     */\n    targetRadius(): (this: This, d: RibbonSubgroupDatum, ...args: any[]) => number;\n    /**\n     * Sets the target radius to a fixed number and returns this ribbon generator.\n     *\n     * @param radius A fixed numeric value for the target radius.\n     */\n    targetRadius(radius: number): this;\n    /**\n     * Sets the target radius accessor to the specified function and returns this ribbon generator.\n     *\n     * @param radius An accessor function which is invoked for the source and target of the chord. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives as the first argument the source or target object returned by the respective source or target accessor function of the generator.\n     * It is also passed any additional arguments that were passed into the generator, with the exception of the first element representing the chord datum itself.\n     * The function returns the target radius value.\n     */\n    targetRadius(radius: (this: This, d: RibbonSubgroupDatum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current start angle accessor, which defaults to a function returning the \"startAngle\" property (assumed to be a number in radians) of the source or\n     * target object returned by the source or target accessor, respectively.\n     */\n    startAngle(): (this: This, d: RibbonSubgroupDatum, ...args: any[]) => number;\n    /**\n     * Sets the start angle to a fixed number in radians and returns this ribbon generator.\n     *\n     * @param angle A fixed numeric value for the start angle in radians.\n     */\n    startAngle(angle: number): this;\n    /**\n     * Sets the start angle accessor to the specified function and returns this ribbon generator.\n     *\n     * @param angle An accessor function which is invoked for the source and target of the chord. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives as the first argument the source or target object returned by the respective source or target accessor function of the generator.\n     * It is also passed any additional arguments that were passed into the generator, with the exception of the first element representing the chord datum itself.\n     * The function returns the start angle in radians.\n     */\n    startAngle(angle: (this: This, d: RibbonSubgroupDatum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current end angle accessor, which defaults to a function returning the \"endAngle\" property (assumed to be a number in radians) of the source or\n     * target object returned by the source or target accessor, respectively.\n     */\n    endAngle(): (this: This, d: RibbonSubgroupDatum, ...args: any[]) => number;\n    /**\n     * Sets the end angle to a fixed number in radians and returns this ribbon generator.\n     *\n     * @param angle A fixed numeric value for the end angle in radians.\n     */\n    endAngle(angle: number): this;\n    /**\n     * Sets the end angle accessor to the specified function and returns this ribbon generator.\n     *\n     * @param angle An accessor function which is invoked for the source and target of the chord. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives as the first argument the source or target object returned by the respective source or target accessor function of the generator.\n     * It is also passed any additional arguments that were passed into the generator, with the exception of the first element representing the chord datum itself.\n     * The function returns the end angle in radians.\n     */\n    endAngle(angle: (this: This, d: RibbonSubgroupDatum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current pad angle accessor, which defaults to a function returning 0.\n     */\n    padAngle(): (this: This, d: RibbonSubgroupDatum, ...args: any[]) => number;\n    /**\n     * Sets the pad angle to a fixed number in radians and returns this ribbon generator.\n     *\n     * @param angle A fixed numeric value for the pad angle in radians.\n     */\n    padAngle(angle: number): this;\n    /**\n     * Sets the pad angle accessor to the specified function and returns this ribbon generator.\n     *\n     * @param angle An accessor function which is invoked for the source and target of the chord. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives as the first argument the source or target object returned by the respective source or target accessor function of the generator.\n     * It is also passed any additional arguments that were passed into the generator, with the exception of the first element representing the chord datum itself.\n     * The function returns the pad angle in radians.\n     */\n    padAngle(angle: (this: This, d: RibbonSubgroupDatum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current rendering context, which defaults to null.\n     */\n    context(): CanvasRenderingContext2D | null;\n    /**\n     * Sets the context and returns this ribbon generator.\n     * If the context is not null, then the generated ribbon is rendered to this context as a sequence of path method calls.\n     * Otherwise, a path data string representing the generated ribbon is returned.\n     * See also d3-path.\n     */\n    context(context: CanvasRenderingContext2D | null): this;\n}\n\nexport interface RibbonArrowGenerator<This, RibbonDatum, RibbonSubgroupDatum>\n    extends RibbonGenerator<This, RibbonDatum, RibbonSubgroupDatum>\n{\n    headRadius(): (this: This, d: RibbonSubgroupDatum, ...args: any[]) => number;\n\n    headRadius(radius: number): this;\n\n    headRadius(radius: (this: This, d: RibbonSubgroupDatum, ...args: any[]) => number): this;\n}\n\n/**\n * Creates a new ribbon generator with the default settings.\n */\nexport function ribbon(): RibbonGenerator<any, Ribbon, RibbonSubgroup>;\n/**\n * Creates a new ribbon generator with the default settings.\n *\n * Accessor functions must be configured for the ribbon generator, should the datum types differ from the defaults.\n *\n * The first generic corresponds to the datum type representing a chord for which the ribbon is to be generated. The default type is Chord.\n *\n * The second generic corresponds to the datum type of the chord subgroup, i.e. source or target of the cord. The default type is ChordSubgroup.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function ribbon<Datum, SubgroupDatum>(): RibbonGenerator<any, Datum, SubgroupDatum>;\n/**\n * Creates a new ribbon generator with the default settings.\n *\n * Accessor functions must be configured for the ribbon generator, should the datum types differ from the defaults.\n *\n * The first generic corresponds to the type of the \"this\" context within which the ribbon generator and its accessor functions will be invoked.\n *\n * The second generic corresponds to the datum type representing a chord for which the ribbon is to be generated. The default type is Chord.\n *\n * The third generic corresponds to the datum type of the chord subgroup, i.e. source or target of the cord. The default type is ChordSubgroup.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function ribbon<This, Datum, SubgroupDatum>(): RibbonGenerator<This, Datum, SubgroupDatum>;\n\n/**\n * Creates a new arrow ribbon generator with the default settings.\n */\nexport function ribbonArrow(): RibbonArrowGenerator<any, Ribbon, RibbonSubgroup>;\n/**\n * Creates a new arrow ribbon generator with the default settings.\n *\n * Accessor functions must be configured for the ribbon generator, should the datum types differ from the defaults.\n *\n * The first generic corresponds to the datum type representing a chord for which the ribbon is to be generated. The default type is Chord.\n *\n * The second generic corresponds to the datum type of the chord subgroup, i.e. source or target of the cord. The default type is ChordSubgroup.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function ribbonArrow<Datum, SubgroupDatum>(): RibbonArrowGenerator<any, Datum, SubgroupDatum>;\n/**\n * Creates a new arrow ribbon generator with the default settings.\n *\n * Accessor functions must be configured for the ribbon generator, should the datum types differ from the defaults.\n *\n * The first generic corresponds to the type of the \"this\" context within which the ribbon generator and its accessor functions will be invoked.\n *\n * The second generic corresponds to the datum type representing a chord for which the ribbon is to be generated. The default type is Chord.\n *\n * The third generic corresponds to the datum type of the chord subgroup, i.e. source or target of the cord. The default type is ChordSubgroup.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function ribbonArrow<This, Datum, SubgroupDatum>(): RibbonArrowGenerator<This, Datum, SubgroupDatum>;\n\n// Types from d3-color\n// Last module patch version validated against: 3.1.0\n\n// ---------------------------------------------------------------------------\n// Shared Type Definitions and Interfaces\n// ---------------------------------------------------------------------------\n\n/**\n * Type allowing for color objects from a specified color space\n */\nexport type ColorSpaceObject = RGBColor | HSLColor | LabColor | HCLColor | CubehelixColor;\n\n/**\n * A helper interface of methods common to color objects (including colors defined outside the d3-color standard module,\n * e.g. in d3-hsv). This interface\n */\nexport interface ColorCommonInstance {\n    /**\n     * Returns true if and only if the color is displayable on standard hardware.\n     * For example, this returns false for an RGB color if any channel value is less than zero or greater than 255, or if the opacity is not in the range [0, 1].\n     */\n    displayable(): boolean;\n    /**\n     * Returns a string representing this color according to the CSS Object Model specification,\n     * such as rgb(247, 234, 186) or rgba(247, 234, 186, 0.2).\n     * If this color is not displayable, a suitable displayable color is returned instead.\n     * For example, RGB channel values greater than 255 are clamped to 255.\n     */\n    toString(): string;\n    /**\n     * Returns a brighter copy of this color. If k is specified, it controls how much brighter the returned color should be.\n     * If k is not specified, it defaults to 1. The behavior of this method is dependent on the implementing color space.\n     *\n     * @param k A color space dependent number to determine, how much brighter the returned color should be.\n     */\n    brighter(k?: number): this;\n    /**\n     * Returns a darker copy of this color. If k is specified, it controls how much darker the returned color should be.\n     * If k is not specified, it defaults to 1. The behavior of this method is dependent on the implementing color space.\n     *\n     * @param k A color space dependent number to determine, how much darker the returned color should be.\n     */\n    darker(k?: number): this;\n    /**\n     * Returns the RGB equivalent of this color. For RGB colors, that’s \"this\".\n     */\n    rgb(): RGBColor;\n    /**\n     * Returns a hexadecimal string representing this color.\n     * If this color is not displayable, a suitable displayable color is returned instead.\n     * For example, RGB channel values greater than 255 are clamped to 255.\n     */\n    hex(): string;\n}\n\n/**\n * A Color object which serves as a base class for\n * colorspace-specific sub-class implementations.\n */\nexport interface Color {\n    /**\n     * Returns true if and only if the color is displayable on standard hardware.\n     * For example, this returns false for an RGB color if any channel value is less than zero or greater than 255, or if the opacity is not in the range [0, 1].\n     */\n    displayable(): boolean; // Note: While this method is used in prototyping for colors of specific colorspaces, it should not be called directly, as 'this.rgb' would not be implemented on Color\n    /**\n     * Returns a string representing this color according to the CSS Object Model specification,\n     * such as rgb(247, 234, 186) or rgba(247, 234, 186, 0.2).\n     * If this color is not displayable, a suitable displayable color is returned instead.\n     * For example, RGB channel values greater than 255 are clamped to 255.\n     */\n    toString(): string; // Note: While this method is used in prototyping for colors of specific colorspaces, it should not be called directly, as 'this.rgb' would not be implemented on Color\n    /**\n     * Returns a hexadecimal string representing this color in RGB space, such as #f7eaba.\n     * If this color is not displayable, a suitable displayable color is returned instead.\n     * For example, RGB channel values greater than 255 are clamped to 255.\n     */\n    formatHex(): string;\n    /**\n     * Returns a hexadecimal string representing this color in RGBA space, such as #f7eaba90.\n     * If this color is not displayable, a suitable displayable color is returned instead.\n     * For example, RGB channel values greater than 255 are clamped to 255.\n     */\n    formatHex8(): string;\n    /**\n     * Returns a string representing this color according to the CSS Color Module Level 3 specification, such as hsl(257, 50%, 80%) or hsla(257, 50%, 80%, 0.2).\n     * If this color is not displayable, a suitable displayable color is returned instead by clamping S and L channel values to the interval [0, 100].\n     */\n    formatHsl(): string;\n    /**\n     * Returns a string representing this color according to the CSS Object Model specification, such as rgb(247, 234, 186) or rgba(247, 234, 186, 0.2).\n     * If this color is not displayable, a suitable displayable color is returned instead by clamping RGB channel values to the interval [0, 255].\n     */\n    formatRgb(): string;\n    /**\n     * @deprecated Use color.formatHex.\n     */\n    hex(): string;\n}\n\n/**\n * A Color factory object, which may also be used with instanceof to test if an object is a color instance.\n */\nexport interface ColorFactory extends Function {\n    /**\n     * Parses the specified CSS Color Module Level 3 specifier string, returning an RGB or HSL color.\n     * If the specifier was not valid, null is returned.\n     *\n     * @param cssColorSpecifier A CSS Color Module Level 3 specifier string.\n     */\n    (cssColorSpecifier: string): RGBColor | HSLColor | null;\n    /**\n     * Converts the provided color instance and returns an RGB or HSL color.\n     *\n     * @param color A permissible color space instance.\n     */\n    (color: ColorSpaceObject | ColorCommonInstance): RGBColor | HSLColor;\n    /**\n     * Prototype of the factory, which can be used for instanceof testing\n     */\n    readonly prototype: Color;\n}\n\n/**\n * An RGB color object.\n */\nexport interface RGBColor extends Color {\n    /**\n     * Value of red channel\n     */\n    r: number;\n    /**\n     * Value of green channel\n     */\n    g: number;\n    /**\n     * Value of blue channel\n     */\n    b: number;\n    /**\n     * Opacity value\n     */\n    opacity: number;\n    /**\n     * Returns a brighter copy of this color. If k is specified, it controls how much brighter the returned color should be.\n     * If k is not specified, it defaults to 1.\n     *\n     * @param k A color space dependent number to determine, how much brighter the returned color should be.\n     */\n    brighter(k?: number): this;\n    /**\n     * Returns a darker copy of this color. If k is specified, it controls how much darker the returned color should be.\n     * If k is not specified, it defaults to 1.\n     *\n     * @param k A color space dependent number to determine, how much darker the returned color should be.\n     */\n    darker(k?: number): this;\n    /**\n     * Returns the RGB equivalent of this color.\n     */\n    rgb(): this;\n    /**\n     * Returns a copy of this color.\n     *\n     * @param values If values is specified, any enumerable own properties of values are assigned to the new returned color.\n     */\n    copy(\n        values?: {\n            r?: number | undefined;\n            g?: number | undefined;\n            b?: number | undefined;\n            opacity?: number | undefined;\n        },\n    ): this;\n    /**\n     * Returns a new RGB color where the r, g, and b channels are clamped to the range [0, 255] and rounded to the nearest integer value,\n     * and the opacity is clamped to the range [0, 1].\n     */\n    clamp(): this;\n}\n\n/**\n * An RGB color factory object, which may also be used with instanceof to test if an object\n * is an RGB color instance.\n */\nexport interface RGBColorFactory extends Function {\n    /**\n     * Constructs a new RGB color based on the specified channel values and opacity.\n     *\n     * @param r Red channel value.\n     * @param g Green channel value.\n     * @param b Blue channel value.\n     * @param opacity Optional opacity value, defaults to 1.\n     */\n    (r: number, g: number, b: number, opacity?: number): RGBColor;\n    /**\n     * Parses the specified CSS Color Module Level 3 specifier string, returning an RGB color.\n     * If the specifier was not valid, null is returned.\n     *\n     * @param cssColorSpecifier A CSS Color Module Level 3 specifier string.\n     */\n    (cssColorSpecifier: string): RGBColor;\n    /**\n     * Converts the provided color instance and returns an RGB color. The color instance is converted to the RGB color space using color.rgb.\n     * Note that unlike color.rgb this method always returns a new instance, even if color is already an RGB color.\n     *\n     * @param color A permissible color space instance.\n     */\n    // tslint:disable-next-line:unified-signatures\n    (color: ColorSpaceObject | ColorCommonInstance): RGBColor;\n    /**\n     * Prototype of the factory, which can be used for instanceof testing\n     */\n    readonly prototype: RGBColor;\n}\n\n/**\n * An HSL color object.\n */\nexport interface HSLColor extends Color {\n    /**\n     * Hue channel value.\n     */\n    h: number;\n    /**\n     * Saturation channel value.\n     */\n    s: number;\n    /**\n     * Lightness channel value.\n     */\n    l: number;\n    /**\n     * Opacity value.\n     */\n    opacity: number;\n    /**\n     * Returns a brighter copy of this color. If k is specified, it controls how much brighter the returned color should be.\n     * If k is not specified, it defaults to 1.\n     *\n     * @param k A color space dependent number to determine, how much brighter the returned color should be.\n     */\n    brighter(k?: number): this;\n    /**\n     * Returns a darker copy of this color. If k is specified, it controls how much darker the returned color should be.\n     * If k is not specified, it defaults to 1.\n     *\n     * @param k A color space dependent number to determine, how much darker the returned color should be.\n     */\n    darker(k?: number): this;\n    /**\n     * Returns the RGB color equivalent of this color.\n     */\n    rgb(): RGBColor;\n    /**\n     * Returns a copy of this color.\n     *\n     * @param values If values is specified, any enumerable own properties of values are assigned to the new returned color.\n     */\n    copy(\n        values?: {\n            h?: number | undefined;\n            s?: number | undefined;\n            l?: number | undefined;\n            opacity?: number | undefined;\n        },\n    ): this;\n    /**\n     * Returns a new HSL color where the h channel is clamped to the range [0, 360), and the s, l, and opacity channels are clamped to the range [0, 1].\n     */\n    clamp(): this;\n}\n\n/**\n * An HSL color factory object, which may also be used with instanceof to test if an object\n * is an HSL color instance.\n */\nexport interface HSLColorFactory extends Function {\n    /**\n     * Constructs a new HSL color based on the specified channel values and opacity.\n     *\n     * @param h Hue channel value.\n     * @param s Saturation channel value.\n     * @param l Lightness channel value.\n     * @param opacity Optional opacity value, defaults to 1.\n     */\n    (h: number, s: number, l: number, opacity?: number): HSLColor;\n    /**\n     * Parses the specified CSS Color Module Level 3 specifier string, returning an HSL color.\n     * If the specifier was not valid, null is returned.\n     *\n     * @param cssColorSpecifier A CSS Color Module Level 3 specifier string.\n     */\n    (cssColorSpecifier: string): HSLColor;\n    /**\n     * Converts the provided color instance and returns an HSL color.\n     * The color instance is converted to the RGB color space using color.rgb and then converted to HSL.\n     * (Colors already in the HSL color space skip the conversion to RGB.)\n     *\n     * @param color A permissible color space instance.\n     */\n    // tslint:disable-next-line:unified-signatures\n    (color: ColorSpaceObject | ColorCommonInstance): HSLColor;\n    /**\n     * Prototype of the factory, which can be used for instanceof testing\n     */\n    readonly prototype: HSLColor;\n}\n\n/**\n * A Lab (CIELAB) color object.\n */\nexport interface LabColor extends Color {\n    /**\n     * Lightness typically in the range [0, 100].\n     */\n    l: number;\n    /**\n     * Position between red/magenta and green typically in [-160, +160].\n     */\n    a: number;\n    /**\n     * Position between yellow and blue typically in [-160, +160].\n     */\n    b: number;\n    /**\n     * Opacity value\n     */\n    opacity: number;\n    /**\n     * Returns a brighter copy of this color. If k is specified, it controls how much brighter the returned color should be.\n     * If k is not specified, it defaults to 1.\n     *\n     * @param k A color space dependent number to determine, how much brighter the returned color should be.\n     */\n    brighter(k?: number): this;\n    /**\n     * Returns a darker copy of this color. If k is specified, it controls how much darker the returned color should be.\n     * If k is not specified, it defaults to 1.\n     *\n     * @param k A color space dependent number to determine, how much darker the returned color should be.\n     */\n    darker(k?: number): this;\n    /**\n     * Returns the RGB color equivalent of this color.\n     */\n    rgb(): RGBColor;\n    /**\n     * Returns a copy of this color.\n     *\n     * @param values If values is specified, any enumerable own properties of values are assigned to the new returned color.\n     */\n    copy(\n        values?: {\n            l?: number | undefined;\n            a?: number | undefined;\n            b?: number | undefined;\n            opacity?: number | undefined;\n        },\n    ): this;\n}\n\n/**\n * A Lab (CIELAB) color factory object, which may also be used with instanceof to test if an object\n * is a Lab color instance.\n */\nexport interface LabColorFactory extends Function {\n    /**\n     * Constructs a new CIELAB color based on the specified channel values and opacity.\n     *\n     * @param l Lightness typically in the range [0, 100].\n     * @param a Position between red/magenta and green typically in [-160, +160].\n     * @param b Position between yellow and blue typically in [-160, +160].\n     * @param opacity Optional opacity value, defaults to 1.\n     */\n    (l: number, a: number, b: number, opacity?: number): LabColor;\n    /**\n     * Parses the specified CSS Color Module Level 3 specifier string, returning a Lab color.\n     * If the specifier was not valid, null is returned.\n     *\n     * @param cssColorSpecifier A CSS Color Module Level 3 specifier string.\n     */\n    (cssColorSpecifier: string): LabColor;\n    /**\n     * Converts the provided color instance and returns a Lab color.\n     * The color instance is converted to the RGB color space using color.rgb and then converted to CIELAB.\n     * (Colors already in the Lab color space skip the conversion to RGB,\n     * and colors in the HCL color space are converted directly to CIELAB.)\n     *\n     * @param color A permissible color space instance.\n     */\n    // tslint:disable-next-line:unified-signatures\n    (color: ColorSpaceObject | ColorCommonInstance): LabColor;\n    /**\n     * Prototype of the factory, which can be used for instanceof testing\n     */\n    readonly prototype: LabColor;\n}\n\n/**\n * A gray color factory for Lab (CIELAB) colors.\n */\nexport type GrayColorFactory =\n    /**\n     * Constructs a new CIELAB color with the specified l value and a = b = 0.\n     *\n     * @param l Lightness typically in the range [0, 100].\n     * @param opacity Optional opacity value, defaults to 1.\n     */\n    (l: number, opacity?: number) => LabColor;\n\n/**\n * An HCL (CIELCH) color object.\n */\nexport interface HCLColor extends Color {\n    /**\n     * Hue channel value typically in [0, 360).\n     */\n    h: number;\n    /**\n     * Chroma channel value typically in [0, 230].\n     */\n    c: number;\n    /**\n     * Luminance channel value typically in the range [0, 100].\n     */\n    l: number;\n    /**\n     * Opacity value\n     */\n    opacity: number;\n    /**\n     * Returns a brighter copy of this color. If k is specified, it controls how much brighter the returned color should be.\n     * If k is not specified, it defaults to 1.\n     *\n     * @param k A color space dependent number to determine, how much brighter the returned color should be.\n     */\n    brighter(k?: number): this;\n    /**\n     * Returns a darker copy of this color. If k is specified, it controls how much darker the returned color should be.\n     * If k is not specified, it defaults to 1.\n     *\n     * @param k A color space dependent number to determine, how much darker the returned color should be.\n     */\n    darker(k?: number): this;\n    /**\n     * Returns the RGB color equivalent of this color.\n     */\n    rgb(): RGBColor;\n    /**\n     * Returns a copy of this color.\n     *\n     * @param values If values is specified, any enumerable own properties of values are assigned to the new returned color.\n     */\n    copy(\n        values?: {\n            h?: number | undefined;\n            c?: number | undefined;\n            l?: number | undefined;\n            opacity?: number | undefined;\n        },\n    ): this;\n}\n\n/**\n * An HCL (CIELCH) color factory object, which may also be used with instanceof to test if an object\n * is an HCL color instance.\n */\nexport interface HCLColorFactory extends Function {\n    /**\n     * Constructs a new HCL color based on the specified channel values and opacity.\n     *\n     * @param h Hue channel value typically in [0, 360).\n     * @param c Chroma channel value typically in [0, 230].\n     * @param l Luminance channel value typically in the range [0, 100].\n     * @param opacity Optional opacity value, defaults to 1.\n     */\n    (h: number, c: number, l: number, opacity?: number): HCLColor;\n    /**\n     * Parses the specified CSS Color Module Level 3 specifier string, returning an HCL color.\n     * If the specifier was not valid, null is returned.\n     *\n     * @param cssColorSpecifier A CSS Color Module Level 3 specifier string.\n     */\n    (cssColorSpecifier: string): HCLColor;\n    /**\n     * Converts the provided color instance and returns an HCL color.\n     * The color instance is converted to the RGB color space using color.rgb and then converted to HCL.\n     * (Colors already in the HCL color space skip the conversion to RGB,\n     * and colors in the Lab color space are converted directly to HCL.)\n     *\n     * @param color A permissible color space instance.\n     */\n    // tslint:disable-next-line:unified-signatures\n    (color: ColorSpaceObject | ColorCommonInstance): HCLColor;\n    /**\n     * Prototype of the factory, which can be used for instanceof testing\n     */\n    readonly prototype: HCLColor;\n}\n\n/**\n * An LCH (CIELCH) color factory function to create an HCL color object.\n */\nexport interface LCHColorFactory {\n    /**\n     * Constructs a new HCL color based on the specified channel values and opacity.\n     *\n     * @param l Luminance channel value typically in the range [0, 100].\n     * @param c Chroma channel value typically in [0, 230].\n     * @param h Hue channel value typically in [0, 360).\n     * @param opacity Optional opacity value, defaults to 1.\n     */\n    (l: number, c: number, h: number, opacity?: number): HCLColor;\n    /**\n     * Parses the specified CSS Color Module Level 3 specifier string, returning an HCL color.\n     * If the specifier was not valid, null is returned.\n     *\n     * @param cssColorSpecifier A CSS color Module Level 3 specifier string.\n     */\n    (cssColorSpecifier: string): HCLColor;\n    /**\n     * Converts the provided color instance and returns an HCL color.\n     * The color instance is converted to the RGB color space using color.rgb and then converted to HCL.\n     * (Colors already in the HCL color space skip the conversion to RGB,\n     * and colors in the Lab color space are converted directly to HCL.)\n     *\n     * @param color A permissible color space instance.\n     */\n    // tslint:disable-next-line:unified-signatures\n    (color: ColorSpaceObject | ColorCommonInstance): HCLColor;\n}\n\n/**\n * Dave Green’s Cubehelix color object.\n */\nexport interface CubehelixColor extends Color {\n    /**\n     * Hue channel value.\n     */\n    h: number;\n    /**\n     * Saturation channel value.\n     */\n    s: number;\n    /**\n     * Lightness channel value.\n     */\n    l: number;\n    /**\n     * Opacity value.\n     */\n    opacity: number;\n    /**\n     * Returns a brighter copy of this color. If k is specified, it controls how much brighter the returned color should be.\n     * If k is not specified, it defaults to 1.\n     *\n     * @param k A color space dependent number to determine, how much brighter the returned color should be.\n     */\n    brighter(k?: number): this;\n    /**\n     * Returns a darker copy of this color. If k is specified, it controls how much darker the returned color should be.\n     * If k is not specified, it defaults to 1.\n     *\n     * @param k A color space dependent number to determine, how much darker the returned color should be.\n     */\n    darker(k?: number): this;\n    /**\n     * Returns the RGB color equivalent of this color.\n     */\n    rgb(): RGBColor;\n    /**\n     * Returns a copy of this color.\n     *\n     * @param values If values is specified, any enumerable own properties of values are assigned to the new returned color.\n     */\n    copy(\n        values?: {\n            h?: number | undefined;\n            s?: number | undefined;\n            l?: number | undefined;\n            opacity?: number | undefined;\n        },\n    ): this;\n}\n\n/**\n * A color factory object for Dave Green's Cubehelix colors, which may also be used with instanceof to test if an object\n * is a Cubehelix color instance.\n */\nexport interface CubehelixColorFactory extends Function {\n    /**\n     * Constructs a new Cubehelix color based on the specified channel values and opacity.\n     *\n     * @param h Hue channel value.\n     * @param s Saturation channel value.\n     * @param l Lightness channel value.\n     * @param opacity Optional opacity value, defaults to 1.\n     */\n    (h: number, s: number, l: number, opacity?: number): CubehelixColor;\n    /**\n     * Parses the specified CSS Color Module Level 3 specifier string, returning an Cubehelix color.\n     * If the specifier was not valid, null is returned.\n     *\n     * @param cssColorSpecifier A CSS Color Module Level 3 specifier string.\n     */\n    (cssColorSpecifier: string): CubehelixColor;\n    /**\n     * Converts the provided color instance and returns a Cubehelix color.\n     * The color instance is specified, it is converted to the RGB color space using color.rgb and then converted to Cubehelix.\n     * (Colors already in the Cubehelix color space skip the conversion to RGB.)\n     *\n     * @param color A permissible color space instance.\n     */\n    // tslint:disable-next-line:unified-signatures\n    (color: ColorSpaceObject | ColorCommonInstance): CubehelixColor;\n    /**\n     * Prototype of the factory, which can be used for instanceof testing\n     */\n    readonly prototype: CubehelixColor;\n}\n\n// --------------------------------------------------------------------------\n// Color object factories\n// --------------------------------------------------------------------------\n\n/**\n * A Color factory object, which may also be used with instanceof to test if an object is a color instance.\n */\nexport const color: ColorFactory;\n\n/**\n * An RGB color factory object, which may also be used with instanceof to test if an object\n * is an RGB color instance.\n */\nexport const rgb: RGBColorFactory;\n\n/**\n * An HSL color factory object, which may also be used with instanceof to test if an object\n * is an HSL color instance.\n */\nexport const hsl: HSLColorFactory;\n\n/**\n * A Lab (CIELAB) color factory object, which may also be used with instanceof to test if an object\n * is a Lab color instance.\n */\nexport const lab: LabColorFactory;\n\n/**\n * A gray color factory for Lab (CIELAB) colors.\n */\nexport const gray: GrayColorFactory;\n\n/**\n * An HCL (CIELCH) color factory object, which may also be used with instanceof to test if an object\n * is an HCL color instance.\n */\nexport const hcl: HCLColorFactory;\n\n/**\n * An LCH (CIELCH) color factory function to create an HCL color object.\n */\nexport const lch: LCHColorFactory;\n\n/**\n * A color factory object for Dave Green's Cubehelix colors, which may also be used with instanceof to test if an object\n * is a Cubehelix color instance.\n */\nexport const cubehelix: CubehelixColorFactory;\n\n// Types from d3-contour\n// Last module patch version validated against: 3.0.1\n\n/**\n * An extended GeoJSON MultiPolygon representing a contour.\n */\nexport interface ContourMultiPolygon extends MultiPolygon {\n    /**\n     * Threshold value of the contour.\n     */\n    value: number;\n}\n\n/**\n * A contour generator which computes contour polygons by applying marching squares to a rectangular array of numeric values.\n *\n * For each threshold value, the contour generator constructs a GeoJSON MultiPolygon geometry object representing the area\n * where the input values are greater than or equal to the threshold value.\n * The geometry is in planar coordinates, where ⟨i + 0.5, j + 0.5⟩ corresponds to element i + jn in the input values array.\n */\nexport interface Contours {\n    /**\n     * Computes the contours for the given array of values, returning an array of GeoJSON MultiPolygon geometry objects.\n     * Each geometry object represents the area where the input values are greater than or equal to the corresponding threshold value;\n     * the threshold value for each geometry object is exposed as geometry.value.\n     *\n     * The returned geometry objects are typically passed to d3.geoPath to display,\n     * using null or d3.geoIdentity as the associated projection\n     *\n     * @param values Array of input values. The input values must be an array of length n×m where [n, m] is the contour generator’s size;\n     * furthermore, each values[i + jn] must represent the value at the position ⟨i, j⟩.\n     */\n    (values: number[]): ContourMultiPolygon[];\n\n    /**\n     * Computes a single contour, returning a GeoJSON MultiPolygon geometry object.\n     * This geometry object represents the area where the input values are greater than or equal to the given threshold value;\n     * the threshold value for the geometry object is exposed as geometry.value.\n     *\n     * @param values  Array of input values. The input values must be an array of length n×m where [n, m] is the contour generator’s size;\n     * furthermore, each values[i + jn] must represent the value at the position ⟨i, j⟩.\n     * @param threshold Threshold value.\n     */\n    contour(values: number[], threshold: number): ContourMultiPolygon;\n\n    /**\n     * Return the expected size of the input values grid, which defaults to [1,1].\n     */\n    size(): [number, number];\n    /**\n     * Sets the expected size of the input values grid to the contour generator and returns the contour generator.\n     *\n     * @param size Size of the input values grid specified as an array [n, m]\n     * where n is the number of columns in the grid and m is the number of rows; n and m must be positive integers.\n     */\n    size(size: [number, number]): this;\n\n    /**\n     * Returns the current smoothing flag, which defaults to true.\n     */\n    smooth(): boolean;\n    /**\n     * Sets whether or not the generated contour polygons are smoothed using linear interpolation and returns the contour generator.\n     *\n     * @param smooth Flag to enable linear interpolation. The default is \"true\".\n     */\n    smooth(smooth: boolean): this;\n\n    /**\n     * Returns the current threshold generator, which by default implements Sturges’ formula.\n     */\n    thresholds(): ThresholdCountGenerator<number> | ThresholdNumberArrayGenerator<number>;\n    /**\n     * Sets the threshold generator to the specified function or array and returns this contour generator.\n     * Thresholds are defined as an array of values [x0, x1, …].\n     * The first generated contour corresponds to the area where the input values are greater than or equal to x0;\n     * the second contour corresponds to the area where the input values are greater than or equal to x1, and so on.\n     * Thus, there is exactly one generated MultiPolygon geometry object for each specified threshold value; the threshold value is exposed as geometry.value.\n     * If a count is specified instead of an array of thresholds, then the input values’ extent will be uniformly divided into approximately count bins; see d3.ticks.\n     */\n    thresholds(\n        thresholds: number | number[] | ThresholdCountGenerator<number> | ThresholdNumberArrayGenerator<number>,\n    ): this;\n}\n\n/**\n * Construct a new contour generator with the default settings.\n */\nexport function contours(): Contours;\n\n/**\n * A contour generator for density estimates.\n *\n * The generic refers to the data type of an element in the data array\n * used with the density contour generator. If omitted, the default setting assumes that,\n * the elements of the data array used with the density contour generator are two-element arrays.\n * The first element corresponds to the x-dimension, the second to the y-dimension.\n */\nexport interface ContourDensity<Datum = [number, number]> {\n    /**\n     * Estimates the density contours for the given array of data, returning an array of GeoJSON MultiPolygon geometry objects.\n     * Each geometry object represents the area where the estimated number of points per square pixel is greater than or equal to\n     * the corresponding threshold value; the threshold value for each geometry object is exposed as geometry.value.\n     * The returned geometry objects are typically passed to d3.geoPath to display, using null or d3.geoIdentity as the associated projection.\n     * See also d3.contours.\n     *\n     * The x- and y-coordinate for each data point are computed using density.x and density.y.\n     * The generated contours are only accurate within the estimator’s defined size.\n     *\n     * @param data Array of input data.\n     */\n    (data: Datum[]): ContourMultiPolygon[];\n\n    /**\n     * Returns the current x-coordinate accessor.\n     * The default x-coordinate accessor is a functions which accepts as input a two-element array of numbers\n     * and returns the element at index 0.\n     */\n    x(): (d: Datum) => number;\n    /**\n     * Sets the x-coordinate accessor and returns the density contour estimator.\n     *\n     * @param x An x-coordinate accessor function, which accepts as input an element of the input data array and returns the\n     * x-coordinate.\n     */\n    x(x: (d: Datum) => number): this;\n\n    /**\n     * Returns the current y-coordinate accessor.\n     * The default y-coordinate accessor is a functions which accepts as input a two-element array of numbers\n     * and returns the element at index 1.\n     */\n    y(): (d: Datum) => number;\n    /**\n     * Sets the y-coordinate accessor and returns the density contour estimator.\n     *\n     * @param y An y-coordinate accessor function, which accepts as input an element of the input data array and returns the\n     * y-coordinate.\n     */\n    y(y: (d: Datum) => number): this;\n\n    /**\n     * Returns the current point weight accessor.\n     */\n    weight(): (d: Datum) => number;\n\n    /**\n     * Sets the point weight accessor and returns the density contour estimator.\n     *\n     * @param weight A point weight accessor function.\n     */\n    weight(weight: (d: Datum) => number): this;\n\n    /**\n     * Returns the current size, which defaults to [960, 500].\n     */\n    size(): [number, number];\n    /**\n     * Sets the size of the density estimator to the specified bounds and returns the density contour estimator.\n     *\n     * @param size The size is specified as an array [width, height], where width is the maximum x-value and height is the maximum y-value.\n     */\n    size(size: [number, number]): this;\n\n    /**\n     * Returns the current cell size, which defaults to 4.\n     */\n    cellSize(): number;\n    /**\n     * Sets the size of individual cells in the underlying bin grid to the specified positive integer and returns the density contour estimator.\n     *\n     * The cell size is rounded down to the nearest power of two. Smaller cells produce more detailed contour polygons, but are more expensive to compute.\n     *\n     * @param cellSize Cell size, a positive integer.\n     */\n    cellSize(cellSize: number): this;\n\n    /**\n     * Returns the current threshold generator, which by default generates about twenty nicely-rounded density thresholds.\n     */\n    thresholds(): ThresholdCountGenerator<number> | ThresholdNumberArrayGenerator<number>;\n    /**\n     * Sets the threshold generator to the specified function or array and returns this contour generator.\n     * Thresholds are defined as an array of values [x0, x1, …].\n     * The first generated density contour corresponds to the area where the estimated density is greater than or equal to x0;\n     * the second contour corresponds to the area where the estimated density is greater than or equal to x1, and so on.\n     * Thus, there is exactly one generated MultiPolygon geometry object for each specified threshold value; the threshold value is exposed as geometry.value.\n     * The first value x0 should typically be greater than zero.\n     * If a count is specified instead of an array of thresholds, then approximately count uniformly-spaced nicely-rounded thresholds will be generated; see d3.ticks.\n     */\n    thresholds(\n        thresholds: number | number[] | ThresholdCountGenerator<number> | ThresholdNumberArrayGenerator<number>,\n    ): this;\n\n    /**\n     * Returns the current bandwidth, which defaults to 20.4939….\n     */\n    bandwidth(): number;\n    /**\n     * Sets the bandwidth (the standard deviation) of the Gaussian kernel and returns the density contour estimator.\n     *\n     * @param bandwidth Bandwidth (the standard deviation) of the Gaussian kernel.\n     * The specified bandwidth is currently rounded to the nearest supported value by this implementation, and must be nonnegative.\n     */\n    bandwidth(bandwidth: number): this;\n}\n\n/**\n * Construct a new contour generator for density estimates.\n *\n * The generic refers to the data type of an element in the data array\n * used with the density contour generator. If omitted, the default setting assumes that,\n * the elements of the data array used with the density contour generator are two-element arrays.\n * The first element corresponds to the x-dimension, the second to the y-dimension.\n *\n * Important: ensure that the x- and y-accessor functions are configured to\n * match the data type used for the generic Datum.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function contourDensity<Datum = [number, number]>(): ContourDensity<Datum>;\n\n// Types from d3-delaunay\n/**\n * Delaunay triangulation\n */\nexport class Delaunay<P> {\n    /**\n     * Returns the Delaunay triangulation for the given flat array [x0, y0, x1, y1, …] of points.\n     */\n    constructor(points: ArrayLike<number>);\n\n    /**\n     * Returns the Delaunay triangulation for the given array or iterable of points where each point is an array in the form: [x, y].\n     */\n    static from(points: ArrayLike<Delaunay.Point> | Iterable<Delaunay.Point>): Delaunay<Delaunay.Point>;\n    /**\n     * Returns the Delaunay triangulation for the given array or iterable of points.\n     * Otherwise, the getX and getY functions are invoked for each point in order, and must return the respective x- and y-coordinate for each point.\n     * If that is specified, the functions getX and getY are invoked with that as this.\n     * (See Array.from for reference.)\n     */\n    static from<P>(\n        points: ArrayLike<P> | Iterable<P>,\n        getX: Delaunay.GetCoordinate<P, ArrayLike<P> | Iterable<P>>,\n        getY: Delaunay.GetCoordinate<P, ArrayLike<P> | Iterable<P>>,\n        that?: any,\n    ): Delaunay<P>;\n\n    /**\n     * The coordinates of the points as an array [x0, y0, x1, y1, ...].\n     * Typically, this is a Float64Array, however you can use any array-like type in the constructor.\n     */\n    points: ArrayLike<number>;\n\n    /**\n     * The halfedge indices as an Int32Array [j0, j1, ...].\n     * For each index 0 <= i < halfedges.length, there is a halfedge from triangle vertex j = halfedges[i] to triangle vertex i.\n     */\n    halfedges: Int32Array;\n\n    /**\n     * An Int32Array of point indexes that form the convex hull in counterclockwise order.\n     * If the points are collinear, returns them ordered.\n     */\n    hull: Uint32Array;\n\n    /**\n     * The triangle vertex indices as an Uint32Array [i0, j0, k0, i1, j1, k1, ...].\n     * Each contiguous triplet of indices i, j, k forms a counterclockwise triangle.\n     * The coordinates of the triangle's points can be found by going through 'points'.\n     */\n    triangles: Uint32Array;\n\n    /**\n     * The incoming halfedge indexes as a Int32Array [e0, e1, e2, ...].\n     * For each point i, inedges[i] is the halfedge index e of an incoming halfedge.\n     * For coincident points, the halfedge index is -1; for points on the convex hull, the incoming halfedge is on the convex hull; for other points, the choice of incoming halfedge is arbitrary.\n     */\n    inedges: Int32Array;\n\n    /**\n     * Returns the index of the input point that is closest to the specified point ⟨x, y⟩.\n     * The search is started at the specified point i. If i is not specified, it defaults to zero.\n     */\n    find(x: number, y: number, i?: number): number;\n\n    /**\n     * Returns an iterable over the indexes of the neighboring points to the specified point i.\n     * The iterable is empty if i is a coincident point.\n     */\n    neighbors(i: number): IterableIterator<number>;\n\n    /**\n     * Renders the edges of the Delaunay triangulation to an SVG path string.\n     */\n    render(): string;\n    /**\n     * Renders the edges of the Delaunay triangulation to the specified context.\n     * The specified context must implement the context.moveTo and context.lineTo methods from the CanvasPathMethods API.\n     */\n    render(context: Delaunay.MoveContext & Delaunay.LineContext): void;\n\n    /**\n     * Renders the convex hull of the Delaunay triangulation to an SVG path string.\n     */\n    renderHull(): string;\n    /**\n     * Renders the convex hull of the Delaunay triangulation to the specified context.\n     * The specified context must implement the context.moveTo and context.lineTo methods from the CanvasPathMethods API.\n     */\n    renderHull(context: Delaunay.MoveContext & Delaunay.LineContext): void;\n\n    /**\n     * Renders triangle i of the Delaunay triangulation to an SVG path string.\n     */\n    renderTriangle(i: number): string;\n    /**\n     * Renders triangle i of the Delaunay triangulation to the specified context.\n     * The specified context must implement the context.moveTo, context.lineTo and context.closePath methods from the CanvasPathMethods API.\n     */\n    renderTriangle(i: number, context: Delaunay.MoveContext & Delaunay.LineContext & Delaunay.ClosableContext): void;\n\n    /**\n     * Renders the input points of the Delaunay triangulation to an SVG path string as circles with radius 2.\n     */\n    renderPoints(): string;\n    /**\n     * Renders the input points of the Delaunay triangulation to an SVG path string as circles with the specified radius.\n     */\n    renderPoints(context: undefined, radius: number): string;\n    /**\n     * Renders the input points of the Delaunay triangulation to the specified context as circles with the specified radius.\n     * If radius is not specified, it defaults to 2.\n     * The specified context must implement the context.moveTo and context.arc methods from the CanvasPathMethods API.\n     */\n    renderPoints(context: Delaunay.MoveContext & Delaunay.ArcContext, radius?: number): void;\n\n    /**\n     * Returns the closed polygon [[x0, y0], [x1, y1], ..., [x0, y0]] representing the convex hull.\n     */\n    hullPolygon(): Delaunay.Polygon;\n\n    /**\n     * Returns the closed polygon [[x0, y0], [x1, y1], [x2, y2], [x0, y0]] representing the triangle i.\n     */\n    trianglePolygon(i: number): Delaunay.Triangle;\n    /**\n     * Returns an iterable over the polygons for each triangle, in order.\n     */\n    trianglePolygons(): IterableIterator<Delaunay.Triangle>;\n\n    /**\n     * Updates the triangulation after the points have been modified in-place.\n     */\n    update(): this;\n\n    /**\n     * Returns the Voronoi diagram for the associated points.\n     * When rendering, the diagram will be clipped to the specified bounds = [xmin, ymin, xmax, ymax].\n     * If bounds is not specified, it defaults to [0, 0, 960, 500].\n     * See To Infinity and Back Again for an interactive explanation of Voronoi cell clipping.\n     */\n    voronoi(bounds?: Delaunay.Bounds): Voronoi<P>;\n}\n\nexport namespace Delaunay {\n    /**\n     * A point represented as an array tuple [x, y].\n     */\n    type Point = [number, number];\n\n    /**\n     * A closed polygon [[x0, y0], [x1, y1], [x2, y2], [x0, y0]] representing a triangle.\n     */\n    type Triangle = Point[];\n\n    /**\n     * A closed polygon [[x0, y0], [x1, y1], ..., [x0, y0]].\n     */\n    type Polygon = Point[];\n\n    /**\n     * A rectangular area [x, y, width, height].\n     */\n    type Bounds = [number, number, number, number];\n\n    /**\n     * A function to extract a x- or y-coordinate from the specified point.\n     */\n    type GetCoordinate<P, PS> = (point: P, i: number, points: PS) => number;\n\n    /**\n     * An interface for the rect() method of the CanvasPathMethods API.\n     */\n    interface RectContext {\n        /**\n         * rect() method of the CanvasPathMethods API.\n         */\n        rect(x: number, y: number, width: number, height: number): void;\n    }\n\n    /**\n     * An interface for the moveTo() method of the CanvasPathMethods API.\n     */\n    interface MoveContext {\n        /**\n         * moveTo() method of the CanvasPathMethods API.\n         */\n        moveTo(x: number, y: number): void;\n    }\n\n    /**\n     * An interface for the lineTo() method of the CanvasPathMethods API.\n     */\n    interface LineContext {\n        /**\n         * lineTo() method of the CanvasPathMethods API.\n         */\n        lineTo(x: number, y: number): void;\n    }\n\n    /**\n     * An interface for the arc() method of the CanvasPathMethods API.\n     */\n    interface ArcContext {\n        /**\n         * arc() method of the CanvasPathMethods API.\n         */\n        arc(\n            x: number,\n            y: number,\n            radius: number,\n            startAngle: number,\n            endAngle: number,\n            counterclockwise?: boolean,\n        ): void;\n    }\n\n    /**\n     * An interface for the closePath() method of the CanvasPathMethods API.\n     */\n    interface ClosableContext {\n        /**\n         * closePath() method of the CanvasPathMethods API.\n         */\n        closePath(): void;\n    }\n}\n\n/**\n * Voronoi regions\n */\nexport class Voronoi<P> {\n    /**\n     * The Voronoi diagram’s associated Delaunay triangulation.\n     */\n    delaunay: Delaunay<P>;\n\n    /**\n     * The circumcenters of the Delaunay triangles [cx0, cy0, cx1, cy1, ...].\n     * Each contiguous pair of coordinates cx, cy is the circumcenter for the corresponding triangle.\n     * These circumcenters form the coordinates of the Voronoi cell polygons.\n     */\n    circumcenters: Float64Array;\n\n    /**\n     * An array [vx0, vy0, wx0, wy0, ...] where each non-zero quadruple describes an open (infinite) cell\n     * on the outer hull, giving the directions of two open half-lines.\n     */\n    vectors: Float64Array;\n\n    /**\n     * The bounds of the viewport [xmin, ymin, xmax, ymax] for rendering the Voronoi diagram.\n     * These values only affect the rendering methods (voronoi.render, voronoi.renderBounds, cell.render).\n     */\n    xmin: number;\n    ymin: number;\n    xmax: number;\n    ymax: number;\n\n    /**\n     * Returns true if the cell with the specified index i contains the specified point ⟨x, y⟩.\n     * (This method is not affected by the associated Voronoi diagram’s viewport bounds.)\n     */\n    contains(i: number, x: number, y: number): boolean;\n\n    /**\n     * Returns an iterable over the indexes of the cells that share a common edge with the specified cell i.\n     * Voronoi neighbors are always neighbors on the Delaunay graph, but the converse is false when the common edge has been clipped out by the Voronoi diagram’s viewport.\n     */\n    neighbors(i: number): Iterable<number>;\n\n    /**\n     * Renders the mesh of Voronoi cells to an SVG path string.\n     */\n    render(): string;\n    /**\n     * Renders the mesh of Voronoi cells to the specified context.\n     * The specified context must implement the context.moveTo and context.lineTo methods from the CanvasPathMethods API.\n     */\n    render(context: Delaunay.MoveContext & Delaunay.LineContext): void;\n\n    /**\n     * Renders the viewport extent to an SVG path string.\n     */\n    renderBounds(): string;\n    /**\n     * Renders the viewport extent to the specified context.\n     * The specified context must implement the context.rect method from the CanvasPathMethods API.\n     * Equivalent to context.rect(voronoi.xmin, voronoi.ymin, voronoi.xmax - voronoi.xmin, voronoi.ymax - voronoi.ymin).\n     */\n    renderBounds(context: Delaunay.RectContext): void;\n\n    /**\n     * Renders the cell with the specified index i to an SVG path string.\n     */\n    renderCell(i: number): string;\n    /**\n     * Renders the cell with the specified index i to the specified context.\n     * The specified context must implement the context.moveTo, context.lineTo, and context.closePath methods from the CanvasPathMethods API.\n     */\n    renderCell(i: number, context: Delaunay.MoveContext & Delaunay.LineContext & Delaunay.ClosableContext): void;\n\n    /**\n     * Returns an iterable over the non-empty polygons for each cell, with the cell index as property.\n     */\n    cellPolygons(): IterableIterator<Delaunay.Polygon & { index: number }>;\n\n    /**\n     * Returns the convex, closed polygon [[x0, y0], [x1, y1], ..., [x0, y0]] representing the cell for the specified point i.\n     */\n    cellPolygon(i: number): Delaunay.Polygon;\n\n    /**\n     * Updates the Voronoi diagram and underlying triangulation after the points have been modified in-place — useful for Lloyd’s relaxation.\n     */\n    update(): this;\n}\n\n// Types from d3-dispatch\n// Last module patch version validated against: 3.0.1\n\nexport interface Dispatch<T extends object> {\n    /**\n     * Like `function.apply`, invokes each registered callback for the specified type,\n     * passing the callback the specified arguments, with `that` as the `this` context.\n     *\n     * @param type A specified event type.\n     * @param that The `this` context for the callback.\n     * @param args Additional arguments to be passed to the callback.\n     * @throws \"unknown type\" on unknown event type.\n     */\n    apply(type: string, that?: T, args?: any[]): void;\n\n    /**\n     * Like `function.call`, invokes each registered callback for the specified type,\n     * passing the callback the specified arguments, with `that` as the `this` context.\n     * See dispatch.apply for more information.\n     *\n     * @param type A specified event type.\n     * @param that The `this` context for the callback.\n     * @param args Additional arguments to be passed to the callback.\n     * @throws \"unknown type\" on unknown event type.\n     */\n    call(type: string, that?: T, ...args: any[]): void;\n\n    /**\n     * Returns a copy of this dispatch object.\n     * Changes to this dispatch do not affect the returned copy and vice versa.\n     */\n    copy(): Dispatch<T>;\n\n    /**\n     * Returns the callback for the specified typenames, if any.\n     * If multiple typenames are specified, the first matching callback is returned.\n     */\n    on(typenames: string): ((this: T, ...args: any[]) => void) | undefined;\n    /**\n     * Adds or removes the callback for the specified typenames.\n     * If a callback function is specified, it is registered for the specified (fully-qualified) typenames.\n     * If a callback was already registered for the given typenames, the existing callback is removed before the new callback is added.\n     * The specified typenames is a string, such as start or end.foo.\n     * The type may be optionally followed by a period (.) and a name; the optional name allows multiple callbacks to be registered to receive events of the same type, such as start.foo and start.bar.\n     * To specify multiple typenames, separate typenames with spaces, such as start end or start.foo start.bar.\n     * To remove all callbacks for a given name foo, say dispatch.on(\".foo\", null).\n     */\n    on(typenames: string, callback: null | ((this: T, ...args: any[]) => void)): this;\n}\n\n/**\n * Creates a new dispatch for the specified event types. Each type is a string, such as \"start\" or \"end\".\n *\n * @param types The event types.\n * @throws \"illegal type\" on empty string or duplicated event types.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function dispatch<T extends object>(...types: string[]): Dispatch<T>;\n\n// Types from d3-drag\n// Last module patch version validated against: 3.0.0\n\n// --------------------------------------------------------------------------\n// Shared Type Definitions and Interfaces\n// --------------------------------------------------------------------------\n\n/**\n * DraggedElementBaseType serves as an alias for the 'minimal' data type which can be selected\n * without 'd3-drag' (and related code in 'd3-selection') trying to use properties internally which would otherwise not\n * be supported.\n */\nexport type DraggedElementBaseType = Element;\n\n/**\n * Container element type usable for mouse/touch functions\n */\nexport type DragContainerElement = HTMLElement | SVGSVGElement | SVGGElement; // HTMLElement includes HTMLCanvasElement\n\n/**\n * The subject datum should at a minimum expose x and y properties, so that the relative position\n * of the subject and the pointer can be preserved during the drag gesture.\n */\nexport interface SubjectPosition {\n    /**\n     * x-coordinate\n     */\n    x: number;\n    /**\n     * y-coordinate\n     */\n    y: number;\n}\n\n/**\n * A D3 Drag Behavior\n *\n * The first generic refers to the type of element to be dragged.\n * The second generic refers to the type of the datum of the dragged element.\n * The third generic refers to the type of the drag behavior subject.\n *\n * The subject of a drag gesture represents the thing being dragged.\n * It is computed when an initiating input event is received,\n * such as a mousedown or touchstart, immediately before the drag gesture starts.\n * The subject is then exposed as event.subject on subsequent drag events for this gesture.\n *\n * The default subject is the datum of the element in the originating selection (see drag)\n * that received the initiating input event; if this datum is undefined,\n * an object representing the coordinates of the pointer is created.\n * When dragging circle elements in SVG, the default subject is thus the datum of the circle being dragged.\n * With Canvas, the default subject is the canvas element’s datum (regardless of where on the canvas you click).\n * In this case, a custom subject accessor would be more appropriate,\n * such as one that picks the closest circle to the mouse within a given search radius.\n */\nexport interface DragBehavior<GElement extends DraggedElementBaseType, Datum, Subject> extends Function {\n    /**\n     * Applies the drag behavior to the selected elements.\n     * This function is typically not invoked directly, and is instead invoked via selection.call.\n     *\n     * For details see: {@link https://github.com/d3/d3-drag#_drag}\n     *\n     * @param selection A D3 selection of elements.\n     * @param args Optional arguments to be passed in.\n     */\n    (selection: Selection<GElement, Datum, any, any>, ...args: any[]): void;\n\n    /**\n     * Returns the current container accessor function.\n     */\n    container(): ValueFn<GElement, Datum, DragContainerElement>;\n    /**\n     * Sets the container accessor to the specified function and returns the drag behavior.\n     *\n     * The container of a drag gesture determines the coordinate system of subsequent drag events, affecting event.x and event.y.\n     * The element returned by the container accessor is subsequently passed to d3.pointer to determine the local coordinates of the pointer.\n     *\n     * The default container accessor returns the parent node of the element in the originating selection (see drag)\n     * that received the initiating input event. This is often appropriate when dragging SVG or HTML elements,\n     * since those elements are typically positioned relative to a parent. For dragging graphical elements with a Canvas,\n     * however, you may want to redefine the container as the initiating element itself, using \"this\" in the accessor\n     * function.\n     *\n     * @param accessor A container accessor function which is evaluated for each selected element,\n     * in order, being passed the current datum (d), the current index (i), and the current group (nodes),\n     * with this as the current DOM element. The function returns the container element.\n     */\n    container(accessor: ValueFn<GElement, Datum, DragContainerElement>): this;\n    /**\n     * Sets the container accessor to the specified object and returns the drag behavior.\n     *\n     * The container of a drag gesture determines the coordinate system of subsequent drag events, affecting event.x and event.y.\n     * The element returned by the container accessor is subsequently passed to d3.pointer to determine the local coordinates of the pointer.\n     *\n     * The default container accessor returns the parent node of the element in the originating selection (see drag)\n     * that received the initiating input event. This is often appropriate when dragging SVG or HTML elements,\n     * since those elements are typically positioned relative to a parent. For dragging graphical elements with a Canvas,\n     * however, you may want to redefine the container as the initiating element itself, such as drag.container(canvas).\n     *\n     * @param container Container element for the drag gesture.\n     */\n    container(container: DragContainerElement): this;\n\n    /**\n     * Returns the current filter function.\n     */\n    filter(): (this: GElement, event: any, d: Datum) => boolean;\n    /**\n     * Sets the event filter to the specified filter function and returns the drag behavior.\n     *\n     * If the filter returns falsey, the initiating event is ignored and no drag gesture is started.\n     * Thus, the filter determines which input events are ignored. The default filter ignores mousedown events on secondary buttons,\n     * since those buttons are typically intended for other purposes, such as the context menu.\n     *\n     * @param filterFn A filter function which is evaluated for each selected element,\n     * in order, being passed the current event (event) and datum d, with the this context as the current DOM element.\n     * The function returns a boolean value.\n     */\n    filter(filterFn: (this: GElement, event: any, d: Datum) => boolean): this;\n\n    /**\n     * Returns the current touch support detector, which defaults to a function returning true,\n     * if the \"ontouchstart\" event is supported on the current element.\n     */\n    touchable(): ValueFn<GElement, Datum, boolean>;\n    /**\n     * Sets the touch support detector to the specified boolean value and returns the drag behavior.\n     *\n     * Touch event listeners are only registered if the detector returns truthy for the corresponding element when the drag behavior is applied.\n     * The default detector works well for most browsers that are capable of touch input, but not all; Chrome’s mobile device emulator, for example,\n     * fails detection.\n     *\n     * @param touchable A boolean value. true when touch event listeners should be applied to the corresponding element, otherwise false.\n     */\n    touchable(touchable: boolean): this;\n    /**\n     * Sets the touch support detector to the specified function and returns the drag behavior.\n     *\n     * Touch event listeners are only registered if the detector returns truthy for the corresponding element when the drag behavior is applied.\n     * The default detector works well for most browsers that are capable of touch input, but not all; Chrome’s mobile device emulator, for example,\n     * fails detection.\n     *\n     * @param touchable A touch support detector function, which returns true when touch event listeners should be applied to the corresponding element.\n     * The function is evaluated for each selected element to which the drag behavior was applied, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element. The function returns a boolean value.\n     */\n    touchable(touchable: ValueFn<GElement, Datum, boolean>): this;\n\n    /**\n     *  Returns the current subject accessor functions.\n     */\n    subject(): (this: GElement, event: any, d: Datum) => Subject;\n    /**\n     * Sets the subject accessor to the specified function and returns the drag behavior.\n     *\n     * The subject of a drag gesture represents the thing being dragged.\n     * It is computed when an initiating input event is received,\n     * such as a mousedown or touchstart, immediately before the drag gesture starts.\n     * The subject is then exposed as event.subject on subsequent drag events for this gesture.\n     *\n     * The default subject is the datum of the element in the originating selection (see drag)\n     * that received the initiating input event; if this datum is undefined,\n     * an object representing the coordinates of the pointer is created.\n     * When dragging circle elements in SVG, the default subject is thus the datum of the circle being dragged.\n     * With Canvas, the default subject is the canvas element’s datum (regardless of where on the canvas you click).\n     * In this case, a custom subject accessor would be more appropriate,\n     * such as one that picks the closest circle to the mouse within a given search radius.\n     *\n     * The subject of a drag gesture may not be changed after the gesture starts.\n     *\n     * During the evaluation of the subject accessor, event is a beforestart drag event.\n     * Use event.sourceEvent to access the initiating input event and event.identifier to access the touch identifier.\n     * The event.x and event.y are relative to the container, and are computed using d3.pointer.\n     *\n     * @param accessor An extent accessor function which is evaluated for each selected element,\n     * in order, being passed the current event (`event`) and datum `d`, with the `this` context as the current DOM element.\n     * The returned subject should be an object that exposes x and y properties,\n     * so that the relative position of the subject and the pointer can be preserved during the drag gesture.\n     * If the subject is null or undefined, no drag gesture is started for this pointer;\n     * however, other starting touches may yet start drag gestures.\n     */\n    subject(accessor: (this: GElement, event: any, d: Datum) => Subject): this;\n\n    /**\n     * Return the current click distance threshold, which defaults to zero.\n     */\n    clickDistance(): number;\n    /**\n     * Set the maximum distance that the mouse can move between mousedown and mouseup that will trigger\n     * a subsequent click event. If at any point between mousedown and mouseup the mouse is greater than or equal to\n     * distance from its position on mousedown, the click event following mouseup will be suppressed.\n     *\n     * @param distance The distance threshold between mousedown and mouseup measured in client coordinates (event.clientX and event.clientY).\n     * The default is zero.\n     */\n    clickDistance(distance: number): this;\n\n    /**\n     * Return the first currently-assigned listener matching the specified typenames, if any.\n     *\n     * @param typenames The typenames is a string containing one or more typename separated by whitespace.\n     * Each typename is a type, optionally followed by a period (.) and a name, such as \"drag.foo\"\" and \"drag.bar\";\n     * the name allows multiple listeners to be registered for the same type. The type must be one of the following:\n     * start (after a new pointer becomes active [on mousedown or touchstart]), drag (after an active pointer moves [on mousemove or touchmove], or\n     * end (after an active pointer becomes inactive [on mouseup, touchend or touchcancel].)\n     */\n    on(typenames: string): ((this: GElement, event: any, d: Datum) => void) | undefined;\n    /**\n     * Remove the current event listeners for the specified typenames, if any, return the drag behavior.\n     *\n     * @param typenames The typenames is a string containing one or more typename separated by whitespace.\n     * Each typename is a type, optionally followed by a period (.) and a name, such as \"drag.foo\"\" and \"drag.bar\";\n     * the name allows multiple listeners to be registered for the same type. The type must be one of the following:\n     * start (after a new pointer becomes active [on mousedown or touchstart]), drag (after an active pointer moves [on mousemove or touchmove], or\n     * end (after an active pointer becomes inactive [on mouseup, touchend or touchcancel].)\n     * @param listener Use null to remove the listener.\n     */\n    on(typenames: string, listener: null): this;\n    /**\n     * Set the event listener for the specified typenames and return the drag behavior.\n     * If an event listener was already registered for the same type and name,\n     * the existing listener is removed before the new listener is added.\n     * When a specified event is dispatched, each listener will be invoked with the same context and arguments as selection.on listeners.\n     *\n     * Changes to registered listeners via drag.on during a drag gesture do not affect the current drag gesture.\n     * Instead, you must use event.on, which also allows you to register temporary event listeners for the current drag gesture.\n     * Separate events are dispatched for each active pointer during a drag gesture.\n     * For example, if simultaneously dragging multiple subjects with multiple fingers, a start event is dispatched for each finger,\n     * even if both fingers start touching simultaneously.\n     *\n     * @param typenames The typenames is a string containing one or more typename separated by whitespace.\n     * Each typename is a type, optionally followed by a period (.) and a name, such as \"drag.foo\"\" and \"drag.bar\";\n     * the name allows multiple listeners to be registered for the same type. The type must be one of the following:\n     * start (after a new pointer becomes active [on mousedown or touchstart]), drag (after an active pointer moves [on mousemove or touchmove], or\n     * end (after an active pointer becomes inactive [on mouseup, touchend or touchcancel].)\n     * @param listener An event listener function which is evaluated for each selected element,\n     * in order, being passed the current event (event) and datum d, with the this context as the current DOM element.\n     */\n    on(typenames: string, listener: (this: GElement, event: any, d: Datum) => void): this;\n}\n\n/**\n * Creates a new drag behavior. The returned behavior, drag, is both an object and a function, and is\n * typically applied to selected elements via selection.call.\n *\n * Use this signature when using the default subject accessor.\n *\n * The first generic refers to the type of element to be dragged.\n * The second generic refers to the type of the datum of the dragged element.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function drag<GElement extends DraggedElementBaseType, Datum>(): DragBehavior<\n    GElement,\n    Datum,\n    Datum | SubjectPosition\n>;\n/**\n * Creates a new drag behavior. The returned behavior, drag, is both an object and a function, and is\n * typically applied to selected elements via selection.call.\n *\n * Use this signature when using a custom subject accessor.\n *\n * The first generic refers to the type of element to be dragged.\n * The second generic refers to the type of the datum of the dragged element.\n * The third generic refers to the type of the drag behavior subject.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function drag<GElement extends DraggedElementBaseType, Datum, Subject>(): DragBehavior<GElement, Datum, Subject>;\n\n/**\n * D3 Drag event\n *\n * The first generic refers to the type of element to be dragged.\n * The second generic refers to the type of the datum of the dragged element.\n * The third generic refers to the type of the drag behavior subject.\n */\nexport interface D3DragEvent<GElement extends DraggedElementBaseType, Datum, Subject> {\n    /**\n     * The DragBehavior associated with the event\n     */\n    target: DragBehavior<GElement, Datum, Subject>;\n    /**\n     * The event type for the DragEvent\n     */\n    type: \"start\" | \"drag\" | \"end\" | string; // Leave failsafe string type for cases like 'drag.foo'\n    /**\n     * The drag subject, defined by drag.subject.\n     */\n    subject: Subject;\n    /**\n     * The new x-coordinate of the subject, relative to the container\n     */\n    x: number;\n    /**\n     * The new y-coordinate of the subject, relative to the container\n     */\n    y: number;\n    /**\n     * The change in x-coordinate since the previous drag event.\n     */\n    dx: number;\n    /**\n     * The change in y-coordinate since the previous drag event.\n     */\n    dy: number;\n    /**\n     * The string “mouse”, or a numeric touch identifier.\n     */\n    identifier: \"mouse\" | number;\n    /**\n     * The number of currently active drag gestures (on start and end, not including this one).\n     *\n     * The event.active field is useful for detecting the first start event and the last end event\n     * in a sequence of concurrent drag gestures: it is zero when the first drag gesture starts,\n     * and zero when the last drag gesture ends.\n     */\n    active: number;\n    /**\n     * The underlying input event, such as mousemove or touchmove.\n     */\n    sourceEvent: any;\n    /**\n     * Return the first currently-assigned listener matching the specified typenames, if any.\n     *\n     * Equivalent to drag.on, but only applies to the current drag gesture. Before the drag gesture starts,\n     * a copy of the current drag event listeners is made. This copy is bound to the current drag gesture\n     * and modified by event.on. This is useful for temporary listeners that only receive events for the current drag gesture.\n     *\n     * @param typenames The typenames is a string containing one or more typename separated by whitespace.\n     * Each typename is a type, optionally followed by a period (.) and a name, such as \"drag.foo\"\" and \"drag.bar\";\n     * the name allows multiple listeners to be registered for the same type. The type must be one of the following:\n     * start (after a new pointer becomes active [on mousedown or touchstart]), drag (after an active pointer moves [on mousemove or touchmove], or\n     * end (after an active pointer becomes inactive [on mouseup, touchend or touchcancel].)\n     */\n    on(typenames: string): ((this: GElement, event: any, d: Datum) => void) | undefined;\n    /**\n     * Remove the current event listeners for the specified typenames, if any, return the drag behavior.\n     *\n     * Equivalent to drag.on, but only applies to the current drag gesture. Before the drag gesture starts,\n     * a copy of the current drag event listeners is made. This copy is bound to the current drag gesture\n     * and modified by event.on. This is useful for temporary listeners that only receive events for the current drag gesture.\n     *\n     * @param typenames The typenames is a string containing one or more typename separated by whitespace.\n     * Each typename is a type, optionally followed by a period (.) and a name, such as \"drag.foo\"\" and \"drag.bar\";\n     * the name allows multiple listeners to be registered for the same type. The type must be one of the following:\n     * start (after a new pointer becomes active [on mousedown or touchstart]), drag (after an active pointer moves [on mousemove or touchmove], or\n     * end (after an active pointer becomes inactive [on mouseup, touchend or touchcancel].)\n     * @param listener Use null to remove the listener.\n     */\n    on(typenames: string, listener: null): this;\n    /**\n     * Set the event listener for the specified typenames and return the drag behavior.\n     * If an event listener was already registered for the same type and name,\n     * the existing listener is removed before the new listener is added.\n     * When a specified event is dispatched, each listener will be invoked with the same context and arguments as selection.on listeners.\n     *\n     * Equivalent to drag.on, but only applies to the current drag gesture. Before the drag gesture starts,\n     * a copy of the current drag event listeners is made. This copy is bound to the current drag gesture\n     * and modified by event.on. This is useful for temporary listeners that only receive events for the current drag gesture.\n     *\n     * @param typenames The typenames is a string containing one or more typename separated by whitespace.\n     * Each typename is a type, optionally followed by a period (.) and a name, such as \"drag.foo\"\" and \"drag.bar\";\n     * the name allows multiple listeners to be registered for the same type. The type must be one of the following:\n     * start (after a new pointer becomes active [on mousedown or touchstart]), drag (after an active pointer moves [on mousemove or touchmove], or\n     * end (after an active pointer becomes inactive [on mouseup, touchend or touchcancel].)\n     * @param listener An event listener function which is evaluated for each selected element,\n     * in order, being passed the current event (event) and datum d, with the this context as the current DOM element.\n     */\n    on(typenames: string, listener: (this: GElement, event: any, d: Datum) => void): this;\n}\n\n/**\n * Prevents native drag-and-drop and text selection on the specified window.\n * As an alternative to preventing the default action of mousedown events,\n * this method prevents undesirable default actions following mousedown. In supported browsers,\n * this means capturing dragstart and selectstart events, preventing the associated default actions,\n * and immediately stopping their propagation. In browsers that do not support selection events,\n * the user-select CSS property is set to none on the document element.\n * This method is intended to be called on mousedown, followed by d3.dragEnable on mouseup.\n *\n * @param window The window for which drag should be disabled.\n */\nexport function dragDisable(window: Window): void;\n\n/**\n * Allows native drag-and-drop and text selection on the specified window; undoes the effect of d3.dragDisable.\n * This method is intended to be called on mouseup, preceded by d3.dragDisable on mousedown.\n * If noclick is true, this method also temporarily suppresses click events.\n * The suppression of click events expires after a zero-millisecond timeout,\n * such that it only suppress the click event that would immediately follow the current mouseup event, if any.\n *\n * @param window The window for which drag should be (re-)enabled.\n * @param noClick An optional flag. If noclick is true, this method also temporarily suppresses click events.\n */\nexport function dragEnable(window: Window, noClick?: boolean): void;\n\n// Types from d3-dsv\n// Last module patch version validated against: 3.0.1\n\n// ------------------------------------------------------------------------------------------\n// Shared Types and Interfaces\n// ------------------------------------------------------------------------------------------\n\n/**\n * An object representing a DSV parsed row with values represented as strings.\n */\nexport type DSVRowString<Columns extends string = string> = {\n    [key in Columns]: string;\n};\n\n/**\n * An object in raw format before parsing, that is with only string values.\n */\nexport type DSVRaw<T extends object> = {\n    [key in keyof T]: string;\n};\n\n/**\n * An object representing a DSV parsed row with values represented as an arbitrary datatype, depending\n * on the performed parsed row mapping.\n *\n * @deprecated Use `object` instead.\n */\nexport interface DSVRowAny {\n    [key: string]: any;\n}\n\n/**\n * An array object representing all deserialized rows. The array is enhanced with a property listing\n * the names of the parsed columns.\n */\nexport interface DSVRowArray<Columns extends string = string> extends Array<DSVRowString<Columns>> {\n    /**\n     * List of column names.\n     */\n    columns: Columns[];\n}\n\n/**\n * An array object representing all parsed rows. The array is enhanced with a property listing\n * the names of the parsed columns.\n */\nexport interface DSVParsedArray<T> extends Array<T> {\n    /**\n     * List of column names.\n     */\n    columns: Array<keyof T>;\n}\n\n// ------------------------------------------------------------------------------------------\n// CSV Parsers and Formatters\n// ------------------------------------------------------------------------------------------\n\n// csvParse(...) ============================================================================\n\n/**\n * Parses the specified string, which must be in the comma-separated values format, returning an array of objects representing the parsed rows.\n *\n * Unlike csvParseRows, this method requires that the first line of the CSV content contains a comma-separated list of column names;\n * these column names become the attributes on the returned objects.\n *\n * The returned array also exposes a columns property containing the column names in input order (in contrast to Object.keys, whose iteration order is arbitrary).\n *\n * Equivalent to `dsvFormat(\",\").parse`.\n * Note: requires unsafe-eval content security policy.\n *\n * @param csvString A string, which must be in the comma-separated values format.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function csvParse<Columns extends string>(csvString: string): DSVRowArray<Columns>;\n/**\n * Parses the specified string, which must be in the comma-separated values format, returning an array of objects representing the parsed rows.\n *\n * Unlike csvParseRows, this method requires that the first line of the CSV content contains a comma-separated list of column names;\n * these column names become the attributes on the returned objects.\n *\n * The returned array also exposes a columns property containing the column names in input order (in contrast to Object.keys, whose iteration order is arbitrary).\n *\n * Equivalent to `dsvFormat(\",\").parse`.\n * Note: requires unsafe-eval content security policy.\n *\n * @param csvString A string, which must be in the comma-separated values format.\n * @param row A row conversion function which is invoked for each row, being passed an object representing the current row (d),\n * the index (i) starting at zero for the first non-header row, and the array of column names. If the returned value is null or undefined,\n * the row is skipped and will be omitted from the array returned by dsv.parse; otherwise, the returned value defines the corresponding row object.\n * In effect, row is similar to applying a map and filter operator to the returned rows.\n */\nexport function csvParse<ParsedRow extends object, Columns extends string>(\n    csvString: string,\n    row: (rawRow: DSVRowString<Columns>, index: number, columns: Columns[]) => ParsedRow | undefined | null,\n): DSVParsedArray<ParsedRow>;\n\n// csvParseRows(...) ========================================================================\n\n/**\n * Parses the specified string, which must be in the comma-separated values format, returning an array of arrays representing the parsed rows.\n *\n * Unlike csvParse, this method treats the header line as a standard row, and should be used whenever CSV content does not contain a header.\n * Each row is represented as an array rather than an object. Rows may have variable length.\n *\n * If a row conversion function is not specified, field values are strings. For safety, there is no automatic conversion to numbers, dates, or other types.\n * In some cases, JavaScript may coerce strings to numbers for you automatically (for example, using the + operator), but better is to specify a row conversion function.\n *\n * Equivalent to `dsvFormat(\",\").parseRows`.\n *\n * @param csvString A string, which must be in the comma-separated values format.\n */\nexport function csvParseRows(csvString: string): string[][];\n/**\n * Parses the specified string, which must be in the comma-separated values format, returning an array of arrays representing the parsed rows.\n *\n * Unlike csvParse, this method treats the header line as a standard row, and should be used whenever CSV content does not contain a header.\n * Each row is represented as an array rather than an object. Rows may have variable length.\n *\n * Equivalent to `dsvFormat(\",\").parseRows`.\n *\n * @param csvString A string, which must be in the comma-separated values format.\n * @param row A row conversion function which is invoked for each row, being passed an array representing the current row (d), the index (i)\n * starting at zero for the first row, and the array of column names. If the returned value is null or undefined,\n * the row is skipped and will be omitted from the array returned by dsv.parse; otherwise, the returned value defines the corresponding row object.\n * In effect, row is similar to applying a map and filter operator to the returned rows.\n */\nexport function csvParseRows<ParsedRow extends object>(\n    csvString: string,\n    row: (rawRow: string[], index: number) => ParsedRow | undefined | null,\n): ParsedRow[];\n\n// csvFormat(...) ============================================================================\n\n/**\n * Formats the specified array of object rows as comma-separated values, returning a string.\n * This operation is the inverse of csvParse. Each row will be separated by a newline (\\n),\n * and each column within each row will be separated by the comma-delimiter.\n * Values that contain either the comma-delimiter, a double-quote (\") or a newline will be escaped using double-quotes.\n *\n * If columns is not specified, the list of column names that forms the header row is determined by the union of all properties on all objects in rows;\n * the order of columns is nondeterministic.\n *\n * Equivalent to `dsvFormat(\",\").format`.\n *\n * @param rows Array of object rows.\n * @param columns An array of strings representing the column names.\n */\nexport function csvFormat<T extends object>(rows: readonly T[], columns?: ReadonlyArray<keyof T>): string;\n\n// csvFormatBody(...) ============================================================================\n\n/**\n * Equivalent to dsvFormat(\",\").formatBody.\n *\n * @param rows Array of object rows.\n * @param columns An array of strings representing the column names.\n */\nexport function csvFormatBody<T extends object>(rows: readonly T[], columns?: ReadonlyArray<keyof T>): string;\n\n// csvFormatRows(...) ========================================================================\n\n/**\n * Formats the specified array of array of string rows as comma-separated values, returning a string.\n * This operation is the reverse of csvParseRows. Each row will be separated by a newline (\\n),\n * and each column within each row will be separated by the comma-delimiter.\n * Values that contain either the comma-delimiter, a double-quote (\") or a newline will be escaped using double-quotes.\n *\n * To convert an array of objects to an array of arrays while explicitly specifying the columns, use array.map.\n * If you like, you can also array.concat this result with an array of column names to generate the first row.\n *\n * Equivalent to `dsvFormat(\",\").formatRows`.\n *\n * @param rows An array of array of string rows.\n */\nexport function csvFormatRows(rows: readonly string[][]): string;\n\n// csvFormatRow(...) ========================================================================\n\n/**\n * Equivalent to dsvFormat(\",\").formatRow.\n *\n * @param row An array of strings representing a row.\n */\nexport function csvFormatRow(row: readonly string[]): string;\n\n// csvFormatValue(...) ========================================================================\n\n/**\n * Equivalent to dsvFormat(\",\").formatValue.\n *\n * @param value A value.\n */\nexport function csvFormatValue(value: string): string;\n\n// ------------------------------------------------------------------------------------------\n// TSV Parsers and Formatters\n// ------------------------------------------------------------------------------------------\n\n// tsvParse(...) ============================================================================\n\n/**\n * Parses the specified string, which must be in the tab-separated values format, returning an array of objects representing the parsed rows.\n *\n * Unlike tsvParseRows, this method requires that the first line of the TSV content contains a tab-separated list of column names;\n * these column names become the attributes on the returned objects.\n *\n * The returned array also exposes a columns property containing the column names in input order (in contrast to Object.keys, whose iteration order is arbitrary).\n *\n * Equivalent to `dsvFormat(\"\\t\").parse`.\n * Note: requires unsafe-eval content security policy.\n *\n * @param tsvString A string, which must be in the tab-separated values format.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function tsvParse<Columns extends string>(tsvString: string): DSVRowArray<Columns>;\n/**\n * Parses the specified string, which must be in the tab-separated values format, returning an array of objects representing the parsed rows.\n *\n * Unlike tsvParseRows, this method requires that the first line of the TSV content contains a tab-separated list of column names;\n * these column names become the attributes on the returned objects.\n *\n * The returned array also exposes a columns property containing the column names in input order (in contrast to Object.keys, whose iteration order is arbitrary).\n *\n * Equivalent to `dsvFormat(\"\\t\").parse`.\n * Note: requires unsafe-eval content security policy.\n *\n * @param tsvString A string, which must be in the tab-separated values format.\n * @param row A row conversion function which is invoked for each row, being passed an object representing the current row (d),\n * the index (i) starting at zero for the first non-header row, and the array of column names. If the returned value is null or undefined,\n * the row is skipped and will be omitted from the array returned by dsv.parse; otherwise, the returned value defines the corresponding row object.\n * In effect, row is similar to applying a map and filter operator to the returned rows.\n */\nexport function tsvParse<ParsedRow extends object, Columns extends string>(\n    tsvString: string,\n    row: (rawRow: DSVRowString<Columns>, index: number, columns: Columns[]) => ParsedRow | undefined | null,\n): DSVParsedArray<ParsedRow>;\n\n// tsvParseRows(...) ========================================================================\n\n/**\n * Parses the specified string, which must be in the tab-separated values format, returning an array of arrays representing the parsed rows.\n *\n * Unlike tsvParse, this method treats the header line as a standard row, and should be used whenever TSV content does not contain a header.\n * Each row is represented as an array rather than an object. Rows may have variable length.\n *\n * If a row conversion function is not specified, field values are strings. For safety, there is no automatic conversion to numbers, dates, or other types.\n * In some cases, JavaScript may coerce strings to numbers for you automatically (for example, using the + operator), but better is to specify a row conversion function.\n *\n * Equivalent to `dsvFormat(\"\\t\").parseRows`.\n *\n * @param tsvString A string, which must be in the tab-separated values format.\n */\nexport function tsvParseRows(tsvString: string): string[][];\n/**\n * Parses the specified string, which must be in the tab-separated values format, returning an array of arrays representing the parsed rows.\n *\n * Unlike tsvParse, this method treats the header line as a standard row, and should be used whenever TSV content does not contain a header.\n * Each row is represented as an array rather than an object. Rows may have variable length.\n *\n * Equivalent to `dsvFormat(\"\\t\").parseRows`.\n *\n * @param tsvString A string, which must be in the tab-separated values format.\n * @param row A row conversion function which is invoked for each row, being passed an array representing the current row (d), the index (i)\n * starting at zero for the first row, and the array of column names. If the returned value is null or undefined,\n * the row is skipped and will be omitted from the array returned by dsv.parse; otherwise, the returned value defines the corresponding row object.\n * In effect, row is similar to applying a map and filter operator to the returned rows.\n */\nexport function tsvParseRows<ParsedRow extends object>(\n    tsvString: string,\n    row: (rawRow: string[], index: number) => ParsedRow | undefined | null,\n): ParsedRow[];\n\n// tsvFormat(...) ============================================================================\n\n/**\n * Formats the specified array of object rows as tab-separated values, returning a string.\n * This operation is the inverse of tsvParse. Each row will be separated by a newline (\\n),\n * and each column within each row will be separated by the tab-delimiter.\n * Values that contain either the tab-delimiter, a double-quote (\") or a newline will be escaped using double-quotes.\n *\n * If columns is not specified, the list of column names that forms the header row is determined by the union of all properties on all objects in rows;\n * the order of columns is nondeterministic.\n *\n * Equivalent to `dsvFormat(\"\\t\").format`.\n *\n * @param rows Array of object rows.\n * @param columns An array of strings representing the column names.\n */\nexport function tsvFormat<T extends object>(rows: readonly T[], columns?: ReadonlyArray<keyof T>): string;\n\n// tsvFormatBody(...) ============================================================================\n\n/**\n * Equivalent to dsvFormat(\"\\t\").formatBody.\n *\n * @param rows Array of object rows.\n * @param columns An array of strings representing the column names.\n */\nexport function tsvFormatBody<T extends object>(rows: readonly T[], columns?: ReadonlyArray<keyof T>): string;\n\n// tsvFormatRows(...) ========================================================================\n\n/**\n * Formats the specified array of array of string rows as tab-separated values, returning a string.\n * This operation is the reverse of tsvParseRows. Each row will be separated by a newline (\\n),\n * and each column within each row will be separated by the tab-delimiter.\n * Values that contain either the tab-delimiter, a double-quote (\") or a newline will be escaped using double-quotes.\n *\n * To convert an array of objects to an array of arrays while explicitly specifying the columns, use array.map.\n * If you like, you can also array.concat this result with an array of column names to generate the first row.\n *\n * Equivalent to `dsvFormat(\"\\t\").formatRows`.\n *\n * @param rows An array of array of string rows.\n */\nexport function tsvFormatRows(rows: readonly string[][]): string;\n\n// tsvFormatRow(...) ========================================================================\n\n/**\n * Equivalent to dsvFormat(\"\\t\").formatRow.\n *\n * @param row An array of strings representing a row.\n */\nexport function tsvFormatRow(row: readonly string[]): string;\n\n// tsvFormatValue(...) ========================================================================\n\n/**\n * Equivalent to dsvFormat(\"\\t\").formatValue.\n *\n * @param value A value.\n */\nexport function tsvFormatValue(value: string): string;\n\n// ------------------------------------------------------------------------------------------\n// DSV Generalized Parsers and Formatters\n// ------------------------------------------------------------------------------------------\n\n/**\n * A DSV parser and formatter\n */\nexport interface DSV {\n    /**\n     * Parses the specified string, which must be in the delimiter-separated values format with the appropriate delimiter, returning an array of objects representing the parsed rows.\n     *\n     * Unlike dsv.parseRows, this method requires that the first line of the DSV content contains a delimiter-separated list of column names;\n     * these column names become the attributes on the returned objects.\n     *\n     * The returned array also exposes a columns property containing the column names in input order (in contrast to Object.keys, whose iteration order is arbitrary).\n     *\n     * If the column names are not unique, only the last value is returned for each name; to access all values, use dsv.parseRows instead.\n     *\n     * Note: requires unsafe-eval content security policy.\n     *\n     * @param dsvString A string, which must be in the delimiter-separated values format with the appropriate delimiter.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    parse<Columns extends string>(dsvString: string): DSVRowArray<Columns>;\n    /**\n     * Parses the specified string, which must be in the delimiter-separated values format with the appropriate delimiter, returning an array of objects representing the parsed rows.\n     *\n     * Unlike dsv.parseRows, this method requires that the first line of the DSV content contains a delimiter-separated list of column names;\n     * these column names become the attributes on the returned objects.\n     *\n     * The returned array also exposes a columns property containing the column names in input order (in contrast to Object.keys, whose iteration order is arbitrary).\n     *\n     * If the column names are not unique, only the last value is returned for each name; to access all values, use dsv.parseRows instead.\n     *\n     * Note: requires unsafe-eval content security policy.\n     *\n     * @param dsvString A string, which must be in the delimiter-separated values format with the appropriate delimiter.\n     * @param row A row conversion function which is invoked for each row, being passed an object representing the current row (d),\n     * the index (i) starting at zero for the first non-header row, and the array of column names. If the returned value is null or undefined,\n     * the row is skipped and will be omitted from the array returned by dsv.parse; otherwise, the returned value defines the corresponding row object.\n     * In effect, row is similar to applying a map and filter operator to the returned rows.\n     */\n    parse<ParsedRow extends object, Columns extends string>(\n        dsvString: string,\n        row: (rawRow: DSVRowString<Columns>, index: number, columns: Columns[]) => ParsedRow | undefined | null,\n    ): DSVParsedArray<ParsedRow>;\n\n    /**\n     * Parses the specified string, which must be in the delimiter-separated values format with the appropriate delimiter, returning an array of arrays representing the parsed rows.\n     *\n     * Unlike dsv.parse, this method treats the header line as a standard row, and should be used whenever DSV content does not contain a header.\n     * Each row is represented as an array rather than an object. Rows may have variable length.\n     *\n     * If a row conversion function is not specified, field values are strings. For safety, there is no automatic conversion to numbers, dates, or other types.\n     * In some cases, JavaScript may coerce strings to numbers for you automatically (for example, using the + operator), but better is to specify a row conversion function.\n     *\n     * @param dsvString A string, which must be in the delimiter-separated values format with the appropriate delimiter.\n     */\n    parseRows(dsvString: string): string[][];\n    /**\n     * Parses the specified string, which must be in the delimiter-separated values format with the appropriate delimiter, returning an array of arrays representing the parsed rows.\n     *\n     * Unlike dsv.parse, this method treats the header line as a standard row, and should be used whenever DSV content does not contain a header.\n     * Each row is represented as an array rather than an object. Rows may have variable length.\n     *\n     * @param dsvString A string, which must be in the delimiter-separated values format with the appropriate delimiter.\n     * @param row A row conversion function which is invoked for each row, being passed an array representing the current row (d), the index (i)\n     * starting at zero for the first row, and the array of column names. If the returned value is null or undefined,\n     * the row is skipped and will be omitted from the array returned by dsv.parse; otherwise, the returned value defines the corresponding row object.\n     * In effect, row is similar to applying a map and filter operator to the returned rows.\n     */\n    parseRows<ParsedRow extends object>(\n        dsvString: string,\n        row: (rawRow: string[], index: number) => ParsedRow | undefined | null,\n    ): ParsedRow[];\n\n    /**\n     * Formats the specified array of object rows as delimiter-separated values, returning a string.\n     * This operation is the inverse of dsv.parse. Each row will be separated by a newline (\\n),\n     * and each column within each row will be separated by the delimiter (such as a comma, ,).\n     * Values that contain either the delimiter, a double-quote (\") or a newline will be escaped using double-quotes.\n     *\n     * If columns is not specified, the list of column names that forms the header row is determined by the union of all properties on all objects in rows;\n     * the order of columns is nondeterministic.\n     *\n     * @param rows Array of object rows.\n     * @param columns An array of strings representing the column names.\n     */\n    format<T extends object>(rows: readonly T[], columns?: ReadonlyArray<keyof T>): string;\n\n    /**\n     * Equivalent to dsv.format, but omits the header row.\n     * This is useful, for example, when appending rows to an existing file.\n     *\n     * @param rows Array of object rows.\n     * @param columns An array of strings representing the column names.\n     */\n    formatBody<T extends object>(rows: readonly T[], columns?: ReadonlyArray<keyof T>): string;\n\n    /**\n     * Formats the specified array of array of string rows as delimiter-separated values, returning a string.\n     * This operation is the reverse of dsv.parseRows. Each row will be separated by a newline (\\n),\n     * and each column within each row will be separated by the delimiter (such as a comma, ,).\n     * Values that contain either the delimiter, a double-quote (\") or a newline will be escaped using double-quotes.\n     *\n     * To convert an array of objects to an array of arrays while explicitly specifying the columns, use array.map.\n     * If you like, you can also array.concat this result with an array of column names to generate the first row.\n     *\n     * @param rows An array of array of string rows.\n     */\n    formatRows(rows: readonly string[][]): string;\n\n    /**\n     * Formats a single array row of strings as delimiter-separated values, returning a string.\n     * Each column within the row will be separated by the delimiter (such as a comma, ,).\n     * Values that contain either the delimiter, a double-quote (\") or a newline will be escaped using double-quotes.\n     *\n     * @param row An array of strings representing a row.\n     */\n    formatRow(row: readonly string[]): string;\n\n    /**\n     * Format a single value or string as a delimiter-separated value, returning a string.\n     * A value that contains either the delimiter, a double-quote (\") or a newline will be escaped using double-quotes.\n     *\n     * @param value A value.\n     */\n    formatValue(value: string): string;\n}\n\n/**\n * Constructs a new DSV parser and formatter for the specified delimiter.\n *\n * @param delimiter A delimiter character. The delimiter must be a single character (i.e., a single 16-bit code unit);\n * so, ASCII delimiters are fine, but emoji delimiters are not.\n */\nexport function dsvFormat(delimiter: string): DSV;\n\n/**\n * Infers the types of values on the object and coerces them accordingly, returning the mutated object.\n * This function is intended to be used as a row accessor function in conjunction with dsv.parse and dsv.parseRows.\n *\n * @param object An object (or array) representing a parsed row\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function autoType<ParsedRow extends object | undefined | null, Columns extends string>(\n    object: DSVRowString<Columns> | readonly string[],\n): ParsedRow;\n\n// Types from d3-ease\n// Last module patch version validated against: 3.0.1\n\n// --------------------------------------------------------------------------\n// Easing Functions\n// --------------------------------------------------------------------------\n\n/**\n * Linear easing; the identity function; linear(t) returns t.\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeLinear(normalizedTime: number): number;\n\n/**\n * Symmetric quadratic easing; scales quadIn for t in [0, 0.5] and quadOut for t in [0.5, 1]. Also equivalent to poly.exponent(2).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeQuad(normalizedTime: number): number;\n\n/**\n * Quadratic easing; equivalent to polyIn.exponent(2).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeQuadIn(normalizedTime: number): number;\n\n/**\n * Reverse quadratic easing; equivalent to 1 - quadIn(1 - t). Also equivalent to polyOut.exponent(2).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeQuadOut(normalizedTime: number): number;\n\n/**\n * Symmetric quadratic easing; scales quadIn for t in [0, 0.5] and quadOut for t in [0.5, 1]. Also equivalent to poly.exponent(2).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeQuadInOut(normalizedTime: number): number;\n\n/**\n * Symmetric cubic easing; scales cubicIn for t in [0, 0.5] and cubicOut for t in [0.5, 1]. Also equivalent to poly.exponent(3).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeCubic(normalizedTime: number): number;\n\n/**\n * Cubic easing; equivalent to polyIn.exponent(3).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeCubicIn(normalizedTime: number): number;\n\n/**\n * Reverse cubic easing; equivalent to 1 - cubicIn(1 - t). Also equivalent to polyOut.exponent(3).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeCubicOut(normalizedTime: number): number;\n\n/**\n * Symmetric cubic easing; scales cubicIn for t in [0, 0.5] and cubicOut for t in [0.5, 1]. Also equivalent to poly.exponent(3).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeCubicInOut(normalizedTime: number): number;\n\n/**\n * Polynomial easing function factory\n */\nexport interface PolynomialEasingFactory {\n    /**\n     * Calculate eased time.\n     * @param normalizedTime Normalized time typically in the range [0, 1]\n     */\n    (normalizedTime: number): number;\n    /**\n     * Returns a new polynomial easing with the specified exponent e.\n     * If the exponent is not specified, it defaults to 3, equivalent to cubic.\n     *\n     * @param e Exponent for polynomial easing.\n     */\n    exponent(e: number): PolynomialEasingFactory;\n}\n\n/**\n * Symmetric polynomial easing/easing factory; scales polyIn for t in [0, 0.5] and polyOut for t in [0.5, 1].\n * If the exponent is not specified, it defaults to 3, equivalent to cubic.\n */\nexport const easePoly: PolynomialEasingFactory;\n/**\n * Polynomial easing/easing factory; raises t to the specified exponent.\n * If the exponent is not specified, it defaults to 3, equivalent to cubicIn.\n */\nexport const easePolyIn: PolynomialEasingFactory;\n\n/**\n * Reverse polynomial easing/easing factory; equivalent to 1 - polyIn(1 - t).\n * If the exponent is not specified, it defaults to 3, equivalent to cubicOut.\n */\nexport const easePolyOut: PolynomialEasingFactory;\n\n/**\n * Symmetric polynomial easing/easing factory; scales polyIn for t in [0, 0.5] and polyOut for t in [0.5, 1].\n * If the exponent is not specified, it defaults to 3, equivalent to cubic.\n */\nexport const easePolyInOut: PolynomialEasingFactory;\n\n/**\n * Symmetric sinusoidal easing; scales sinIn for t in [0, 0.5] and sinOut for t in [0.5, 1].\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeSin(normalizedTime: number): number;\n\n/**\n * Sinusoidal easing; returns sin(t).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeSinIn(normalizedTime: number): number;\n\n/**\n * Reverse sinusoidal easing; equivalent to 1 - sinIn(1 - t).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeSinOut(normalizedTime: number): number;\n\n/**\n * Symmetric sinusoidal easing; scales sinIn for t in [0, 0.5] and sinOut for t in [0.5, 1].\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeSinInOut(normalizedTime: number): number;\n\n/**\n * Symmetric exponential easing; scales expIn for t in [0, 0.5] and expOut for t in [0.5, 1].\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeExp(normalizedTime: number): number;\n\n/**\n * Exponential easing; raises 2 to the exponent 10 * (t - 1).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeExpIn(normalizedTime: number): number;\n\n/**\n * Reverse exponential easing; equivalent to 1 - expIn(1 - t).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeExpOut(normalizedTime: number): number;\n\n/**\n * Symmetric exponential easing; scales expIn for t in [0, 0.5] and expOut for t in [0.5, 1].\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeExpInOut(normalizedTime: number): number;\n\n/**\n * Symmetric circular easing; scales circleIn for t in [0, 0.5] and circleOut for t in [0.5, 1].\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeCircle(normalizedTime: number): number;\n\n/**\n * Circular easing.\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeCircleIn(normalizedTime: number): number;\n\n/**\n * Reverse circular easing; equivalent to 1 - circleIn(1 - t).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeCircleOut(normalizedTime: number): number;\n\n/**\n * Symmetric circular easing; scales circleIn for t in [0, 0.5] and circleOut for t in [0.5, 1].\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeCircleInOut(normalizedTime: number): number;\n\n/**\n * Reverse bounce easing; equivalent to 1 - bounceIn(1 - t).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeBounce(normalizedTime: number): number;\n\n/**\n * Bounce easing, like a rubber ball.\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeBounceIn(normalizedTime: number): number;\n\n/**\n * Reverse bounce easing; equivalent to 1 - bounceIn(1 - t).\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeBounceOut(normalizedTime: number): number;\n\n/**\n * Symmetric bounce easing; scales bounceIn for t in [0, 0.5] and bounceOut for t in [0.5, 1].\n *\n * @param normalizedTime Normalized time typically in the range [0, 1]\n */\nexport function easeBounceInOut(normalizedTime: number): number;\n\n/**\n * Anticipatory easing function factory\n */\nexport interface BackEasingFactory {\n    /**\n     * Calculate eased time.\n     * @param normalizedTime Normalized time typically in the range [0, 1]\n     */\n    (normalizedTime: number): number;\n    /**\n     * Returns a new back easing with the specified overshoot s.\n     * The degree of overshoot is configurable; if not specified, it defaults to 1.70158.\n     *\n     * @param s Overshoot parameter\n     */\n    overshoot(s: number): BackEasingFactory;\n}\n\n/**\n * Symmetric anticipatory easing; scales backIn for t in [0, 0.5] and backOut for t in [0.5, 1].\n * The degree of overshoot is configurable; it not specified, it defaults to 1.70158.\n */\nexport const easeBack: BackEasingFactory;\n\n/**\n * Anticipatory easing, like a dancer bending their knees before jumping off the floor.\n * The degree of overshoot is configurable; it not specified, it defaults to 1.70158.\n */\nexport const easeBackIn: BackEasingFactory;\n\n/**\n * Reverse anticipatory easing; equivalent to 1 - backIn(1 - t).\n * The degree of overshoot is configurable; it not specified, it defaults to 1.70158.\n */\nexport const easeBackOut: BackEasingFactory;\n\n/**\n * Symmetric anticipatory easing; scales backIn for t in [0, 0.5] and backOut for t in [0.5, 1].\n * The degree of overshoot is configurable; it not specified, it defaults to 1.70158.\n */\nexport const easeBackInOut: BackEasingFactory;\n\n/**\n * Elastic easing function factory\n */\nexport interface ElasticEasingFactory {\n    /**\n     * Calculate eased time.\n     * @param normalizedTime Normalized time typically in the range [0, 1]\n     */\n    (normalizedTime: number): number;\n    /**\n     * Returns a new elastic easing with the specified amplitude a.\n     * Defaults to 1,if not specified.\n     *\n     * @param a Amplitude for elastic easing.\n     */\n    amplitude(a: number): ElasticEasingFactory;\n    /**\n     * Returns a new elastic easing with the specified amplitude a.\n     * Defaults to 0.3,if not specified.\n     *\n     * @param p Period for elastic easing.\n     */\n    period(p: number): ElasticEasingFactory;\n}\n\n/**\n * Reverse elastic easing; equivalent to 1 - elasticIn(1 - t).\n * The amplitude and period of the oscillation are configurable;\n * if not specified, they default to 1 and 0.3, respectively.\n */\nexport const easeElastic: ElasticEasingFactory;\n\n/**\n * Elastic easing, like a rubber band.\n * The amplitude and period of the oscillation are configurable;\n * if not specified, they default to 1 and 0.3, respectively.\n */\nexport const easeElasticIn: ElasticEasingFactory;\n\n/**\n * Reverse elastic easing; equivalent to 1 - elasticIn(1 - t).\n * The amplitude and period of the oscillation are configurable;\n * if not specified, they default to 1 and 0.3, respectively.\n */\nexport const easeElasticOut: ElasticEasingFactory;\n\n/**\n * Symmetric elastic easing; scales elasticIn for t in [0, 0.5] and elasticOut for t in [0.5, 1].\n * The amplitude and period of the oscillation are configurable;\n * if not specified, they default to 1 and 0.3, respectively.\n */\nexport const easeElasticInOut: ElasticEasingFactory;\n\n// Types from d3-fetch\n// Last module patch version validated against: 3.0.1\n\n/**\n * Fetches the binary file at the specified input URL and returns it as a Promise of a Blob.\n * If init is specified, it is passed along to the underlying call to fetch.\n *\n * @param url A valid URL string.\n * @param init An optional request initialization object.\n */\nexport function blob(url: string, init?: RequestInit): Promise<Blob>;\n\n/**\n * Fetches the binary file at the specified input URL and returns it as a Promise of an ArrayBuffer.\n * If init is specified, it is passed along to the underlying call to fetch.\n *\n * @param url A valid URL string.\n * @param init An optional request initialization object.\n */\nexport function buffer(url: string, init?: RequestInit): Promise<ArrayBuffer>;\n\n/**\n * Fetches the CSV file at the specified input URL and returns\n * a promise of an array of objects representing the parsed rows. The values of the properties of the parsed row\n * objects are represented as strings.\n *\n * If init is specified, it is passed along to the underlying call to fetch.\n *\n * The generic parameter describes the column names as a union of string literal types.\n *\n * @param url A valid URL string.\n * @param init An optional request initialization object.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function csv<Columns extends string>(\n    url: string,\n    init?: RequestInit,\n): Promise<DSVRowArray<Columns>>;\n/**\n * Fetches the CSV file at the specified input URL and returns\n * a promise of an array of objects representing the parsed rows.\n *\n * The specified row conversion function is used to map and filter row objects to a more-specific representation;\n * see dsv.csvParse for details.\n *\n * The first generic parameter describes the type of the object representation of a parsed row.\n * The second generic parameter describes the column names as a union of string literal types.\n *\n * @param url A valid URL string.\n * @param row A row conversion function which is invoked for each row, being passed an object representing the current row (d),\n * the index (i) starting at zero for the first non-header row, and the array of column names. If the returned value is null or undefined,\n * the row is skipped and will be omitted from the array returned by dsv.csvParse; otherwise, the returned value defines the corresponding row object.\n * In effect, row is similar to applying a map and filter operator to the returned rows.\n */\nexport function csv<ParsedRow extends object, Columns extends string = string>(\n    url: string,\n    row: (rawRow: DSVRowString<Columns>, index: number, columns: Columns[]) => ParsedRow | undefined | null,\n): Promise<DSVParsedArray<ParsedRow>>;\n/**\n * Fetches the CSV file at the specified input URL and returns\n * a promise of an array of objects representing the parsed rows.\n *\n * The init object is passed along to the underlying call to fetch.\n *\n * The specified row conversion function is used to map and filter row objects to a more-specific representation;\n * see dsv.csvParse for details.\n *\n * The first generic parameter describes the type of the object representation of a parsed row.\n * The second generic parameter describes the column names as a union of string literal types.\n *\n * @param url A valid URL string.\n * @param init An request initialization object.\n * @param row A row conversion function which is invoked for each row, being passed an object representing the current row (d),\n * the index (i) starting at zero for the first non-header row, and the array of column names. If the returned value is null or undefined,\n * the row is skipped and will be omitted from the array returned by dsv.csvParse; otherwise, the returned value defines the corresponding row object.\n * In effect, row is similar to applying a map and filter operator to the returned rows.\n */\nexport function csv<ParsedRow extends object, Columns extends string = string>(\n    url: string,\n    init: RequestInit,\n    row: (rawRow: DSVRowString<Columns>, index: number, columns: Columns[]) => ParsedRow | undefined | null,\n): Promise<DSVParsedArray<ParsedRow>>;\n\n/**\n * Fetches the DSV file with the specified delimiter character at the specified input URL and returns\n * a promise of an array of objects representing the parsed rows. The values of the properties of the parsed row\n * objects are represented as strings.\n *\n * If init is specified, it is passed along to the underlying call to fetch.\n *\n * The generic parameter describes the column names as a union of string literal types.\n *\n * @param delimiter The delimiter character used in the DSV file to be fetched.\n * @param url A valid URL string.\n * @param init An optional request initialization object.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function dsv<Columns extends string>(\n    delimiter: string,\n    url: string,\n    init?: RequestInit,\n): Promise<DSVRowArray<Columns>>;\n/**\n * Fetches the DSV file with the specified delimiter character at the specified input URL and returns\n * a promise of an array of objects representing the parsed rows.\n *\n * The specified row conversion function is used to map and filter row objects to a more-specific representation;\n * see dsv.parse for details.\n *\n * The first generic parameter describes the type of the object representation of a parsed row.\n * The second generic parameter describes the column names as a union of string literal types.\n *\n * @param delimiter The delimiter character used in the DSV file to be fetched.\n * @param url A valid URL string.\n * @param row A row conversion function which is invoked for each row, being passed an object representing the current row (d),\n * the index (i) starting at zero for the first non-header row, and the array of column names. If the returned value is null or undefined,\n * the row is skipped and will be omitted from the array returned by dsv.parse; otherwise, the returned value defines the corresponding row object.\n * In effect, row is similar to applying a map and filter operator to the returned rows.\n */\nexport function dsv<ParsedRow extends object, Columns extends string = string>(\n    delimiter: string,\n    url: string,\n    row: (rawRow: DSVRowString<Columns>, index: number, columns: Columns[]) => ParsedRow | undefined | null,\n): Promise<DSVParsedArray<ParsedRow>>;\n/**\n * Fetches the DSV file with the specified delimiter character at the specified input URL and returns\n * a promise of an array of objects representing the parsed rows.\n *\n * The init object is passed along to the underlying call to fetch.\n *\n * The specified row conversion function is used to map and filter row objects to a more-specific representation;\n * see dsv.parse for details.\n *\n * The first generic parameter describes the type of the object representation of a parsed row.\n * The second generic parameter describes the column names as a union of string literal types.\n *\n * @param delimiter The delimiter character used in the DSV file to be fetched.\n * @param url A valid URL string.\n * @param init An request initialization object.\n * @param row A row conversion function which is invoked for each row, being passed an object representing the current row (d),\n * the index (i) starting at zero for the first non-header row, and the array of column names. If the returned value is null or undefined,\n * the row is skipped and will be omitted from the array returned by dsv.parse; otherwise, the returned value defines the corresponding row object.\n * In effect, row is similar to applying a map and filter operator to the returned rows.\n */\nexport function dsv<ParsedRow extends object, Columns extends string = string>(\n    delimiter: string,\n    url: string,\n    init: RequestInit,\n    row: (rawRow: DSVRowString<Columns>, index: number, columns: Columns[]) => ParsedRow | undefined | null,\n): Promise<DSVParsedArray<ParsedRow>>;\n\n/**\n * Fetches the file at the specified input URL as text, parses it as HTML and returns a Promise of an HTML DOM Document.\n *\n * If init is specified, it is passed along to the underlying call to fetch.\n *\n * @param url A valid URL string.\n * @param init An optional request initialization object.\n */\nexport function html(url: string, init?: RequestInit): Promise<Document>;\n\n/**\n * Fetches the image at the specified input URL and returns a promise of an HTML image element.\n *\n * If init is specified, sets any additional properties on the image before loading.\n *\n * @param url A valid URL string.\n * @param init An optional object of image properties to set.\n */\nexport function image(url: string, init?: Partial<HTMLImageElement>): Promise<HTMLImageElement>;\n\n/**\n * Fetches the json file at the specified input URL and returns it as a Promise of a parsed JSON object.\n *\n * If init is specified, it is passed along to the underlying call to fetch.\n *\n * If the server returns a status code of [204 No Content](https://developer.mozilla.org/docs/Web/HTTP/Status/204)\n * or [205 Reset Content](https://developer.mozilla.org/docs/Web/HTTP/Status/205), the promise resolves to `undefined`.\n *\n * The generic parameter describes the type of the object parsed from the returned JSON.\n *\n * @param url A valid URL string.\n * @param init An optional request initialization object.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function json<ParsedJSONObject extends any>(\n    url: string,\n    init?: RequestInit,\n): Promise<ParsedJSONObject | undefined>;\n\n/**\n * Fetches the file at the specified input URL as text, parses it as SVG and returns a Promise of an SVG Document.\n *\n * If init is specified, it is passed along to the underlying call to fetch.\n *\n * @param url A valid URL string.\n * @param init An optional request initialization object.\n */\nexport function svg(url: string, init?: RequestInit): Promise<Document>;\n\n/**\n * Fetches the text file at the specified input URL and returns it as a Promise of a string.\n *\n * If init is specified, it is passed along to the underlying call to fetch.\n *\n * @param url A valid URL string.\n * @param init An optional request initialization object.\n */\nexport function text(url: string, init?: RequestInit): Promise<string>;\n\n/**\n * Fetches the TSV file at the specified input URL and returns\n * a promise of an array of objects representing the parsed rows.\n *\n * If init is specified, it is passed along to the underlying call to fetch.\n *\n * The generic parameter describes the column names as a union of string literal types.\n *\n * @param url A valid URL string.\n * @param init An optional request initialization object.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function tsv<Columns extends string>(\n    url: string,\n    init?: RequestInit,\n): Promise<DSVRowArray<Columns>>;\n/**\n * Fetches the TSV file at the specified input URL and returns\n * a promise of an array of objects representing the parsed rows. The values of the properties of the parsed row\n * objects are represented as strings.\n *\n * The specified row conversion function is used to map and filter row objects to a more-specific representation;\n * see dsv.tsvParse for details.\n *\n * The first generic parameter describes the type of the object representation of a parsed row.\n * The second generic parameter describes the column names as a union of string literal types.\n *\n * @param url A valid URL string.\n * @param row A row conversion function which is invoked for each row, being passed an object representing the current row (d),\n * the index (i) starting at zero for the first non-header row, and the array of column names. If the returned value is null or undefined,\n * the row is skipped and will be omitted from the array returned by dsv.tsvParse; otherwise, the returned value defines the corresponding row object.\n * In effect, row is similar to applying a map and filter operator to the returned rows.\n */\nexport function tsv<ParsedRow extends object, Columns extends string = string>(\n    url: string,\n    row: (rawRow: DSVRowString<Columns>, index: number, columns: Columns[]) => ParsedRow | undefined | null,\n): Promise<DSVParsedArray<ParsedRow>>;\n/**\n * Fetches the TSV file at the specified input URL and returns\n * a promise of an array of objects representing the parsed rows.\n *\n * The init object is passed along to the underlying call to fetch.\n *\n * The specified row conversion function is used to map and filter row objects to a more-specific representation;\n * see dsv.tsvParse for details.\n *\n * The first generic parameter describes the type of the object representation of a parsed row.\n * The second generic parameter describes the column names as a union of string literal types.\n *\n * @param url A valid URL string.\n * @param init An request initialization object.\n * @param row A row conversion function which is invoked for each row, being passed an object representing the current row (d),\n * the index (i) starting at zero for the first non-header row, and the array of column names. If the returned value is null or undefined,\n * the row is skipped and will be omitted from the array returned by dsv.tsvParse; otherwise, the returned value defines the corresponding row object.\n * In effect, row is similar to applying a map and filter operator to the returned rows.\n */\nexport function tsv<ParsedRow extends object, Columns extends string = string>(\n    url: string,\n    init: RequestInit,\n    row: (rawRow: DSVRowString<Columns>, index: number, columns: Columns[]) => ParsedRow | undefined | null,\n): Promise<DSVParsedArray<ParsedRow>>;\n\n/**\n * Fetches the file at the specified input URL as text, parses it as XML and returns a Promise of an XML Document.\n *\n * If init is specified, it is passed along to the underlying call to fetch.\n *\n * @param url A valid URL string.\n * @param init An optional request initialization object.\n */\nexport function xml(url: string, init?: RequestInit): Promise<XMLDocument>;\n\n// Types from d3-force\n// Last module patch version validated against: 3.0.0\n\n// -----------------------------------------------------------------------\n// Force Simulation\n// -----------------------------------------------------------------------\n\n/**\n * The base data structure for the datum of a Simulation Node.\n * The optional properties contained in this data structure are internally assigned\n * by the Simulation upon (re-)initialization.\n *\n * When defining a data type to use for node data, it should be an extension of this interface\n * and respect the already \"earmarked\" properties used by the simulation.\n *\n * IMPORTANT: Prior to initialization, the following properties are optional: index, x, y, vx, and vy.\n * After initialization they will be defined. The optional properties fx and fy are ONLY defined,\n * if the node's position has been fixed.\n */\nexport interface SimulationNodeDatum {\n    /**\n     * Node’s zero-based index into nodes array. This property is set during the initialization process of a simulation.\n     */\n    index?: number | undefined;\n    /**\n     * Node’s current x-position\n     */\n    x?: number | undefined;\n    /**\n     * Node’s current y-position\n     */\n    y?: number | undefined;\n    /**\n     * Node’s current x-velocity\n     */\n    vx?: number | undefined;\n    /**\n     * Node’s current y-velocity\n     */\n    vy?: number | undefined;\n    /**\n     * Node’s fixed x-position (if position was fixed)\n     */\n    fx?: number | null | undefined;\n    /**\n     * Node’s fixed y-position (if position was fixed)\n     */\n    fy?: number | null | undefined;\n}\n\n/**\n * The base data structure for the datum of a Simulation Link, as used by ForceLink.\n * The optional properties contained in this data structure are internally assigned\n * by when initializing with ForceLink.links(...)\n *\n * IMPORTANT: The source and target properties may be internally mutated in type during the\n * ForceLink initialization process (possibly being changed from a node index in the nodes array,\n * or a node id string to the simulation node object which was mapped in using the current\n * ForceLink.id(...) accessor function.)\n */\nexport interface SimulationLinkDatum<NodeDatum extends SimulationNodeDatum> {\n    /**\n     * Link’s source node.\n     * For convenience, a link’s source and target properties may be initialized using numeric or string identifiers rather than object references; see link.id.\n     * When the link force is initialized (or re-initialized, as when the nodes or links change), any link.source or link.target property which is not an object\n     * is replaced by an object reference to the corresponding node with the given identifier.\n     * After initialization, the source property represents the source node object.\n     */\n    source: NodeDatum | string | number;\n    /**\n     * Link’s source link\n     * For convenience, a link’s source and target properties may be initialized using numeric or string identifiers rather than object references; see link.id.\n     * When the link force is initialized (or re-initialized, as when the nodes or links change), any link.source or link.target property which is not an object\n     * is replaced by an object reference to the corresponding node with the given identifier.\n     * After initialization, the target property represents the target node object.\n     */\n    target: NodeDatum | string | number;\n    /**\n     * The zero-based index into the links array. Internally generated when calling ForceLink.links(...)\n     */\n    index?: number | undefined;\n}\n\n/**\n * A Force Simulation\n *\n * The first generic refers to the type of the datum associated with a node in the simulation.\n * The second generic refers to the type of the datum associated with a link in the simulation, if applicable.\n */\nexport interface Simulation<\n    NodeDatum extends SimulationNodeDatum,\n    LinkDatum extends SimulationLinkDatum<NodeDatum> | undefined,\n> {\n    /**\n     * Restart the simulation’s internal timer and return the simulation.\n     * In conjunction with simulation.alphaTarget or simulation.alpha, this method can be used to “reheat” the simulation during interaction,\n     * such as when dragging a node, or to resume the simulation after temporarily pausing it with simulation.stop.\n     */\n    restart(): this;\n\n    /**\n     * Stop the simulation’s internal timer, if it is running, and return the simulation. If the timer is already stopped, this method does nothing.\n     * This method is useful for running the simulation manually; see simulation.tick.\n     */\n    stop(): this;\n\n    /**\n     * Manually steps the simulation by the specified number of *iterations*, and returns the simulation. If *iterations* is not specified, it defaults to 1 (single step).\n     *\n     * For each iteration, it increments the current alpha by (alphaTarget - alpha) × alphaDecay; then invokes each registered force, passing the new alpha;\n     * then decrements each node’s velocity by velocity × velocityDecay; lastly increments each node’s position by velocity.\n     *\n     * This method does not dispatch events; events are only dispatched by the internal timer when the simulation is started automatically upon\n     * creation or by calling simulation.restart. The natural number of ticks when the simulation is started is\n     * ⌈log(alphaMin) / log(1 - alphaDecay)⌉; by default, this is 300.\n     */\n    tick(iterations?: number): this;\n\n    /**\n     * Returns the simulation’s array of nodes as specified to the constructor.\n     */\n    nodes(): NodeDatum[];\n    /**\n     * Set the simulation’s nodes to the specified array of objects, initialize their positions and velocities if necessary,\n     * and then re-initialize any bound forces; Returns the simulation.\n     *\n     * Each node must be an object. The following properties are assigned by the simulation:\n     * - index (the node’s zero-based index into nodes)\n     * - x (the node’s current x-position)\n     * - y (the node’s current y-position)\n     * - vx (the node’s current x-velocity)\n     * - vy (the node’s current y-velocity)\n     *\n     * The position [x,y] and velocity [vx,vy] may be subsequently modified by forces and by the simulation.\n     * If either vx or vy is NaN, the velocity is initialized to [0,0]. If either x or y is NaN, the position is initialized in a phyllotaxis arrangement,\n     * so chosen to ensure a deterministic, uniform distribution.\n     *\n     * To fix a node in a given position, you may specify two additional properties:\n     * - fx (the node’s fixed x-position)\n     * - fy (the node’s fixed y-position)\n     *\n     * At the end of each tick, after the application of any forces, a node with a defined node.fx has node.x reset to this value and node.vx set to zero;\n     * likewise, a node with a defined node.fy has node.y reset to this value and node.vy set to zero.\n     * To unfix a node that was previously fixed, set node.fx and node.fy to null, or delete these properties.\n     *\n     * If the specified array of nodes is modified, such as when nodes are added to or removed from the simulation,\n     * this method must be called again with the new (or changed) array to notify the simulation and bound forces of the change;\n     * the simulation does not make a defensive copy of the specified array.\n     */\n    nodes(nodesData: NodeDatum[]): this;\n\n    /**\n     * Return the current alpha of the simulation, which defaults to 1.\n     *\n     * alpha is roughly analogous to temperature in simulated annealing.\n     * It decreases over time as the simulation “cools down”.\n     * When alpha reaches alphaMin, the simulation stops; see simulation.restart.\n     */\n    alpha(): number;\n    /**\n     * Set the current alpha to the specified number in the range [0,1] and return this simulation.\n     * The default is 1.\n     *\n     * alpha is roughly analogous to temperature in simulated annealing.\n     * It decreases over time as the simulation “cools down”.\n     * When alpha reaches alphaMin, the simulation stops; see simulation.restart.\n     *\n     * @param alpha Current alpha of simulation.\n     */\n    alpha(alpha: number): this;\n\n    /**\n     * Return the current minimum alpha value, which defaults to 0.001.\n     */\n    alphaMin(): number;\n    /**\n     * Set the minimum alpha to the specified number in the range [0,1] and return this simulation.\n     * The default is 0.001. The simulation’s internal timer stops when the current alpha is less than the minimum alpha.\n     * The default alpha decay rate of ~0.0228 corresponds to 300 iterations.\n     *\n     * @param min Minimum alpha of simulation.\n     */\n    alphaMin(min: number): this;\n\n    /**\n     * Return the current alpha decay rate, which defaults to 0.0228… = 1 - pow(0.001, 1 / 300) where 0.001 is the default minimum alpha.\n     */\n    alphaDecay(): number;\n    /**\n     * Set the alpha decay rate to the specified number in the range [0,1] and return this simulation.\n     * The default is 0.0228… = 1 - pow(0.001, 1 / 300) where 0.001 is the default minimum alpha.\n     *\n     * The alpha decay rate determines how quickly the current alpha interpolates towards the desired target alpha;\n     * since the default target alpha is zero, by default this controls how quickly the simulation cools.\n     * Higher decay rates cause the simulation to stabilize more quickly, but risk getting stuck in a local minimum;\n     * lower values cause the simulation to take longer to run, but typically converge on a better layout.\n     * To have the simulation run forever at the current alpha, set the decay rate to zero;\n     * alternatively, set a target alpha greater than the minimum alpha.\n     *\n     * @param decay Alpha decay rate.\n     */\n    alphaDecay(decay: number): this;\n\n    /**\n     * Returns the current target alpha value, which defaults to 0.\n     */\n    alphaTarget(): number;\n    /**\n     * Set the current target alpha to the specified number in the range [0,1] and return this simulation.\n     * The default is 0.\n     *\n     * @param target Alpha target value.\n     */\n    alphaTarget(target: number): this;\n\n    /**\n     * Return the current target alpha value, which defaults to 0.4.\n     */\n    velocityDecay(): number;\n    /**\n     * Set the velocity decay factor to the specified number in the range [0,1] and return this simulation.\n     * The default is 0.4.\n     *\n     * The decay factor is akin to atmospheric friction; after the application of any forces during a tick,\n     * each node’s velocity is multiplied by 1 - decay. As with lowering the alpha decay rate,\n     * less velocity decay may converge on a better solution, but risks numerical instabilities and oscillation.\n     *\n     * @param decay Velocity Decay.\n     */\n    velocityDecay(decay: number): this;\n\n    /**\n     * Return the force with the specified name, or undefined if there is no such force.\n     * (By default, new simulations have no forces.)\n     *\n     * Given that it is in general not known, what type of force has been registered under\n     * a specified name, use the generic to cast the result to the appropriate type, if known.\n     *\n     * @param name Name of the registered force.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    force<F extends Force<NodeDatum, LinkDatum>>(name: string): F | undefined;\n    /**\n     * If force is specified, assigns the force for the specified name and returns this simulation.\n     * To remove the force with the given name, pass null as the force.\n     */\n    force(name: string, force: null | Force<NodeDatum, LinkDatum>): this;\n\n    /**\n     * Return the node closest to the position [x,y] with the given search radius.\n     * If radius is not specified, it defaults to infinity.\n     * If there is no node within the search area, returns undefined.\n     *\n     * @param x x-coordinate\n     * @param y y-coordinate\n     * @param radius Optional search radius. Defaults to infinity.\n     */\n    find(x: number, y: number, radius?: number): NodeDatum | undefined;\n\n    /**\n     * Returns this simulation’s current random source which defaults to a fixed-seed linear congruential generator.\n     * See also random.source.\n     */\n    randomSource(): () => number;\n    /**\n     * Sets the function used to generate random numbers; this should be a function that returns a number between 0 (inclusive) and 1 (exclusive).\n     *\n     * @param source The function used to generate random numbers.\n     */\n    randomSource(source: () => number): this;\n\n    /**\n     * Return the first currently-assigned listener matching the specified typenames, if any.\n     *\n     * @param typenames The typenames is a string containing one or more typename separated by whitespace. Each typename is a type,\n     * optionally followed by a period (.) and a name, such as \"tick.foo\" and \"tick.bar\"; the name allows multiple listeners to be registered for the same type.\n     * The type must be one of the following: \"tick\" (after each tick of the simulation’s internal timer) or\n     * \"end\" (after the simulation’s timer stops when alpha < alphaMin).\n     */\n    on(typenames: \"tick\" | \"end\" | string): ((this: Simulation<NodeDatum, LinkDatum>) => void) | undefined;\n    /**\n     * Sets the event listener for the specified typenames and returns this simulation.\n     * If an event listener was already registered for the same type and name, the existing listener is removed before the new listener is added.\n     * If listener is null, removes the current event listeners for the specified typenames, if any.\n     * When a specified event is dispatched, each listener will be invoked with the this context as the simulation.\n     */\n    on(typenames: \"tick\" | \"end\" | string, listener: null | ((this: this) => void)): this;\n}\n\n/**\n * Create a new simulation with the specified array of nodes and no forces.\n * If nodes is not specified, it defaults to the empty array.\n * The simulator starts automatically; use simulation.on to listen for tick events as the simulation runs.\n * If you wish to run the simulation manually instead, call simulation.stop, and then call simulation.tick as desired.\n *\n * Use this signature, when creating a simulation WITHOUT link force(s).\n *\n * The generic refers to the type of the data for a node.\n *\n * @param nodesData Optional array of nodes data, defaults to empty array.\n */\nexport function forceSimulation<NodeDatum extends SimulationNodeDatum>(\n    nodesData?: NodeDatum[],\n): Simulation<NodeDatum, undefined>;\n/**\n * Create a new simulation with the specified array of nodes and no forces.\n * If nodes is not specified, it defaults to the empty array.\n * The simulator starts automatically; use simulation.on to listen for tick events as the simulation runs.\n * If you wish to run the simulation manually instead, call simulation.stop, and then call simulation.tick as desired.\n *\n * Use this signature, when creating a simulation WITH link force(s).\n *\n * The first generic refers to the type of data for a node.\n * The second generic refers to the type of data for a link.\n *\n * @param nodesData Optional array of nodes data, defaults to empty array.\n */\nexport function forceSimulation<\n    NodeDatum extends SimulationNodeDatum,\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    LinkDatum extends SimulationLinkDatum<NodeDatum>,\n>(nodesData?: NodeDatum[]): Simulation<NodeDatum, LinkDatum>;\n\n// ----------------------------------------------------------------------\n// Forces\n// ----------------------------------------------------------------------\n\n/**\n * A force is simply a function that modifies nodes’ positions or velocities; in this context, a force can apply a classical physical force such as electrical charge or gravity,\n * or it can resolve a geometric constraint, such as keeping nodes within a bounding box or keeping linked nodes a fixed distance apart.\n *\n * Forces typically read the node’s current position [x,y] and then add to (or subtract from) the node’s velocity [vx,vy].\n * However, forces may also “peek ahead” to the anticipated next position of the node, [x + vx,y + vy]; this is necessary for resolving geometric constraints through iterative relaxation.\n * Forces may also modify the position directly, which is sometimes useful to avoid adding energy to the simulation, such as when recentering the simulation in the viewport.\n *\n * Forces may optionally implement force.initialize to receive the simulation’s array of nodes.\n */\nexport interface Force<\n    NodeDatum extends SimulationNodeDatum,\n    LinkDatum extends SimulationLinkDatum<NodeDatum> | undefined,\n> {\n    /**\n     * Apply this force, optionally observing the specified alpha.\n     * Typically, the force is applied to the array of nodes previously passed to force.initialize,\n     * however, some forces may apply to a subset of nodes, or behave differently.\n     * For example, d3.forceLink applies to the source and target of each link.\n     */\n    (alpha: number): void;\n    /**\n     * Supplies the array of nodes and random source to this force. This method is called when a force is bound to a simulation via simulation.force\n     * and when the simulation’s nodes change via simulation.nodes.\n     *\n     * A force may perform necessary work during initialization, such as evaluating per-node parameters, to avoid repeatedly performing work during each application of the force.\n     */\n    initialize?(nodes: NodeDatum[], random: () => number): void;\n}\n\n// Centering ------------------------------------------------------------\n\n/**\n * The centering force translates nodes uniformly so that the mean position of all nodes\n * (the center of mass if all nodes have equal weight) is at the given position [x,y].\n * This force modifies the positions of nodes on each application; it does not modify velocities,\n * as doing so would typically cause the nodes to overshoot and oscillate around the desired center.\n * This force helps keeps nodes in the center of the viewport, and unlike the positioning force,\n * it does not distort their relative positions.\n *\n * The generic refers to the type of data for a node.\n */\nexport interface ForceCenter<NodeDatum extends SimulationNodeDatum> extends Force<NodeDatum, any> {\n    /**\n     * Supplies the array of nodes and random source to this force. This method is called when a force is bound to a simulation via simulation.force\n     * and when the simulation’s nodes change via simulation.nodes.\n     *\n     * A force may perform necessary work during initialization, such as evaluating per-node parameters, to avoid repeatedly performing work during each application of the force.\n     */\n    initialize(nodes: NodeDatum[], random: () => number): void;\n\n    /**\n     * Return the current x-coordinate of the centering position, which defaults to zero.\n     */\n    x(): number;\n    /**\n     * Set the x-coordinate of the centering position.\n     *\n     * @param x x-coordinate.\n     */\n    x(x: number): this;\n\n    /**\n     * Return the current y-coordinate of the centering position, which defaults to zero.\n     */\n    y(): number;\n    /**\n     * Set the y-coordinate of the centering position.\n     *\n     * @param y y-coordinate.\n     */\n    y(y: number): this;\n\n    /**\n     * Returns the force’s current strength, which defaults to 1.\n     */\n    strength(): number;\n\n    /**\n     * Sets the centering force’s strength.\n     * A reduced strength of e.g. 0.05 softens the movements on interactive graphs in which new nodes enter or exit the graph.\n     * @param strength The centering force's strength.\n     */\n    strength(strength: number): this;\n}\n\n/**\n * Create a new centering force with the specified x- and y- coordinates.\n * If x and y are not specified, they default to [0,0].\n *\n * The centering force translates nodes uniformly so that the mean position of all nodes\n * (the center of mass if all nodes have equal weight) is at the given position [x,y].\n * This force modifies the positions of nodes on each application; it does not modify velocities,\n * as doing so would typically cause the nodes to overshoot and oscillate around the desired center.\n * This force helps keeps nodes in the center of the viewport, and unlike the positioning force,\n * it does not distort their relative positions.\n *\n * The generic refers to the type of data for a node.\n *\n * @param x An optional x-coordinate for the centering position, defaults to 0.\n * @param y An optional y-coordinate for the centering position, defaults to 0.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function forceCenter<NodeDatum extends SimulationNodeDatum>(x?: number, y?: number): ForceCenter<NodeDatum>;\n\n// Collision ------------------------------------------------------------\n\n/**\n * The collision force treats nodes as circles with a given radius, rather than points, and prevents nodes from overlapping.\n * More formally, two nodes a and b are separated so that the distance between a and b is at least radius(a) + radius(b).\n * To reduce jitter, this is by default a “soft” constraint with a configurable strength and iteration count.\n *\n * The generic refers to the type of data for a node.\n */\nexport interface ForceCollide<NodeDatum extends SimulationNodeDatum> extends Force<NodeDatum, any> {\n    /**\n     * Supplies the array of nodes and random source to this force. This method is called when a force is bound to a simulation via simulation.force\n     * and when the simulation’s nodes change via simulation.nodes.\n     *\n     * A force may perform necessary work during initialization, such as evaluating per-node parameters, to avoid repeatedly performing work during each application of the force.\n     */\n    initialize(nodes: NodeDatum[], random: () => number): void;\n\n    /**\n     * Returns the current radius accessor function.\n     */\n    radius(): (node: NodeDatum, i: number, nodes: NodeDatum[]) => number;\n    /**\n     * Sets the radius accessor to the specified number or function, re-evaluates the radius accessor for each node, and returns this force.\n     * The radius accessor is invoked for each node in the simulation, being passed the node and its zero-based index.\n     * The resulting number is then stored internally, such that the radius of each node is only recomputed when the\n     * force is initialized or when this method is called with a new radius, and not on every application of the force.\n     */\n    radius(radius: number | ((node: NodeDatum, i: number, nodes: NodeDatum[]) => number)): this;\n\n    /**\n     * Return the current strength, which defaults to 1.\n     */\n    strength(): number;\n    /**\n     * Set the force strength to the specified number in the range [0,1] and return this force.\n     * The default strength is 1.\n     *\n     * Overlapping nodes are resolved through iterative relaxation.\n     * For each node, the other nodes that are anticipated to overlap at the next tick (using the anticipated positions [x + vx,y + vy]) are determined;\n     * the node’s velocity is then modified to push the node out of each overlapping node.\n     * The change in velocity is dampened by the force’s strength such that the resolution of simultaneous overlaps can be blended together to find a stable solution.\n     *\n     * @param strength Strength.\n     */\n    strength(strength: number): this;\n\n    /**\n     * Return the current iteration count which defaults to 1.\n     */\n    iterations(): number;\n    /**\n     * Sets the number of iterations per application to the specified number and return this force.\n     *\n     * Increasing the number of iterations greatly increases the rigidity of the constraint and avoids partial overlap of nodes,\n     * but also increases the runtime cost to evaluate the force.\n     *\n     * @param iterations Number of iterations.\n     */\n    iterations(iterations: number): this;\n}\n\n/**\n * Creates a new circle collision force with the specified radius.\n * If radius is not specified, it defaults to the constant one for all nodes.\n */\nexport function forceCollide<NodeDatum extends SimulationNodeDatum>(\n    radius?: number | ((node: NodeDatum, i: number, nodes: NodeDatum[]) => number),\n): ForceCollide<NodeDatum>;\n\n// Link ----------------------------------------------------------------\n\n/**\n * The link force pushes linked nodes together or apart according to the desired link distance.\n * The strength of the force is proportional to the difference between the linked nodes’ distance and the target distance, similar to a spring force.\n *\n * The first generic refers to the type of data for a node.\n * The second generic refers to the type of data for a link.\n */\nexport interface ForceLink<NodeDatum extends SimulationNodeDatum, LinkDatum extends SimulationLinkDatum<NodeDatum>>\n    extends Force<NodeDatum, LinkDatum>\n{\n    /**\n     * Supplies the array of nodes and random source to this force. This method is called when a force is bound to a simulation via simulation.force\n     * and when the simulation’s nodes change via simulation.nodes.\n     *\n     * A force may perform necessary work during initialization, such as evaluating per-node parameters, to avoid repeatedly performing work during each application of the force.\n     */\n    initialize(nodes: NodeDatum[], random: () => number): void;\n\n    /**\n     * Return the current array of links, which defaults to the empty array.\n     */\n    links(): LinkDatum[];\n    /**\n     * Set the array of links associated with this force, recompute the distance and strength parameters for each link, and return this force.\n     *\n     * Each link is an object with the following properties:\n     * * source - the link’s source node; see simulation.nodes\n     * * target - the link’s target node; see simulation.nodes\n     * * index - the zero-based index into links, assigned by this method\n     *\n     * For convenience, a link’s source and target properties may be initialized using numeric or string identifiers rather than object references; see link.id.\n     * When the link force is initialized (or re-initialized, as when the nodes or links change), any link.source or link.target property which is not an object\n     * is replaced by an object reference to the corresponding node with the given identifier.\n     * If the specified array of links is modified, such as when links are added to or removed from the simulation,\n     * this method must be called again with the new (or changed) array to notify the force of the change;\n     * the force does not make a defensive copy of the specified array.\n     *\n     * @param links An array of link data.\n     */\n    links(links: LinkDatum[]): this;\n\n    /**\n     * Return the current node id accessor, which defaults to the numeric node.index.\n     */\n    id(): (node: NodeDatum, i: number, nodesData: NodeDatum[]) => string | number;\n    /**\n     * Set the node id accessor to the specified function and return this force.\n     *\n     * The default id accessor allows each link’s source and target to be specified as a zero-based index\n     * into the nodes array.\n     *\n     * The id accessor is invoked for each node whenever the force is initialized,\n     * as when the nodes or links change, being passed the node, the zero-based index of the node in the node array, and the node array.\n     *\n     * @param id A node id accessor function which is invoked for each node in the simulation,\n     * being passed the node, the zero-based index of the node in the node array, and the node array. It returns a string or number to represent the node id which can be used\n     * for matching link source and link target strings during the ForceLink initialization.\n     */\n    id(id: (node: NodeDatum, i: number, nodesData: NodeDatum[]) => string | number): this;\n\n    /**\n     * Return the current distance accessor, which defaults to implying a default distance of 30.\n     */\n    distance(): (link: LinkDatum, i: number, links: LinkDatum[]) => number;\n    /**\n     * Sets the distance accessor to the specified number or function, re-evaluates the distance accessor for each link, and returns this force.\n     * The distance accessor is invoked for each link, being passed the link and its zero-based index.\n     * The resulting number is then stored internally, such that the distance of each link is only recomputed when the\n     * force is initialized or when this method is called with a new distance, and not on every application of the force.\n     */\n    distance(distance: number | ((link: LinkDatum, i: number, links: LinkDatum[]) => number)): this;\n\n    /**\n     * Return the current strength accessor.\n     * For details regarding the default behavior see: {@link https://github.com/d3/d3-force#link_strength}\n     */\n    strength(): (link: LinkDatum, i: number, links: LinkDatum[]) => number;\n    /**\n     * Sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each link, and returns this force.\n     * The strength accessor is invoked for each link, being passed the link and its zero-based index.\n     * The resulting number is then stored internally, such that the strength of each link is only recomputed when the\n     * force is initialized or when this method is called with a new strength, and not on every application of the force.\n     */\n    strength(strength: number | ((link: LinkDatum, i: number, links: LinkDatum[]) => number)): this;\n\n    /**\n     * Return the current iteration count which defaults to 1.\n     */\n    iterations(): number;\n    /**\n     * Sets the number of iterations per application to the specified number and return this force.\n     *\n     * Increasing the number of iterations greatly increases the rigidity of the constraint and is useful for complex structures such as lattices,\n     * but also increases the runtime cost to evaluate the force.\n     *\n     * @param iterations Number of iterations.\n     */\n    iterations(iterations: number): this;\n}\n\n/**\n * Creates a new link force with the specified links and default parameters.\n * If links is not specified, it defaults to the empty array.\n */\nexport function forceLink<NodeDatum extends SimulationNodeDatum, LinksDatum extends SimulationLinkDatum<NodeDatum>>(\n    links?: LinksDatum[],\n): ForceLink<NodeDatum, LinksDatum>;\n\n// Many Body ----------------------------------------------------------------\n\n/**\n * The many-body (or n-body) force applies mutually amongst all nodes. It can be used to simulate gravity (attraction) if the strength is positive,\n * or electrostatic charge (repulsion) if the strength is negative. This implementation uses quadtrees and the Barnes–Hut approximation to greatly\n * improve performance; the accuracy can be customized using the theta parameter.\n *\n * Unlike links, which only affect two linked nodes, the charge force is global: every node affects every other node, even if they are on disconnected subgraphs.\n *\n * The generic refers to the type of data for a node.\n */\nexport interface ForceManyBody<NodeDatum extends SimulationNodeDatum> extends Force<NodeDatum, any> {\n    /**\n     * Supplies the array of nodes and random source to this force. This method is called when a force is bound to a simulation via simulation.force\n     * and when the simulation’s nodes change via simulation.nodes.\n     *\n     * A force may perform necessary work during initialization, such as evaluating per-node parameters, to avoid repeatedly performing work during each application of the force.\n     */\n    initialize(nodes: NodeDatum[], random: () => number): void;\n\n    /**\n     * Return the current strength accessor.\n     *\n     * For details regarding the default behavior see: {@link https://github.com/d3/d3-force#manyBody_strength}\n     */\n    strength(): (d: NodeDatum, i: number, data: NodeDatum[]) => number;\n    /**\n     * sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force.\n     * A positive value causes nodes to attract each other, similar to gravity, while a negative value causes nodes to repel each other, similar to electrostatic charge.\n     * The strength accessor is invoked for each node in the simulation, being passed the node and its zero-based index.\n     * The resulting number is then stored internally, such that the strength of each node is only recomputed when the\n     * force is initialized or when this method is called with a new strength, and not on every application of the force.\n     */\n    strength(strength: number | ((d: NodeDatum, i: number, data: NodeDatum[]) => number)): this;\n\n    /**\n     * Return the current value of the Barnes–Hut approximation criterion , which defaults to 0.9\n     */\n    theta(): number;\n    /**\n     * Set the Barnes–Hut approximation criterion to the specified number and returns this force.\n     *\n     * To accelerate computation, this force implements the Barnes–Hut approximation which takes O(n log n) per application\n     * where n is the number of nodes. For each application, a quadtree stores the current node positions;\n     * then for each node, the combined force of all other nodes on the given node is computed.\n     * For a cluster of nodes that is far away, the charge force can be approximated by treating the cluster as a single, larger node.\n     * The theta parameter determines the accuracy of the approximation:\n     * if the ratio w / l of the width w of the quadtree cell to the distance l from the node to the cell’s center of mass is less than theta,\n     * all nodes in the given cell are treated as a single node rather than individually.\n     *\n     * The default value is 0.9.\n     *\n     * @param theta Value for the theta parameter.\n     */\n    theta(theta: number): this;\n\n    /**\n     * Returns the current minimum distance over which this force is considered, which defaults to 1.\n     */\n    distanceMin(): number;\n    /**\n     * Sets the minimum distance between nodes over which this force is considered.\n     *\n     * A minimum distance establishes an upper bound on the strength of the force between two nearby nodes, avoiding instability.\n     * In particular, it avoids an infinitely-strong force if two nodes are exactly coincident; in this case, the direction of the force is random.\n     *\n     * The default value is 1.\n     *\n     * @param distance The minimum distance between nodes over which this force is considered.\n     */\n    distanceMin(distance: number): this;\n\n    /**\n     * Returns the current maximum distance over which this force is considered, which defaults to infinity.\n     */\n    distanceMax(): number;\n    /**\n     * Sets the maximum distance between nodes over which this force is considered.\n     *\n     * Specifying a finite maximum distance improves performance and produces a more localized layout.\n     *\n     * The default value is infinity.\n     *\n     * @param distance The maximum distance between nodes over which this force is considered.\n     */\n    distanceMax(distance: number): this;\n}\n\n/**\n * Creates a new many-body force with the default parameters.\n *\n * The many-body (or n-body) force applies mutually amongst all nodes. It can be used to simulate gravity (attraction) if the strength is positive,\n * or electrostatic charge (repulsion) if the strength is negative. This implementation uses quadtrees and the Barnes–Hut approximation to greatly\n * improve performance; the accuracy can be customized using the theta parameter.\n *\n * Unlike links, which only affect two linked nodes, the charge force is global: every node affects every other node, even if they are on disconnected subgraphs.\n *\n * The generic refers to the type of data for a node.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function forceManyBody<NodeDatum extends SimulationNodeDatum>(): ForceManyBody<NodeDatum>;\n\n// Positioning ----------------------------------------------------------------\n\n/**\n * The x-positioning force pushes nodes towards a desired position along the given dimension with a configurable strength.\n * The strength of the force is proportional to the one-dimensional distance between the node’s position and the target position.\n * While this force can be used to position individual nodes, it is intended primarily for global forces that apply to all (or most) nodes.\n *\n * The generic refers to the type of data for a node.\n */\nexport interface ForceX<NodeDatum extends SimulationNodeDatum> extends Force<NodeDatum, any> {\n    /**\n     * Supplies the array of nodes and random source to this force. This method is called when a force is bound to a simulation via simulation.force\n     * and when the simulation’s nodes change via simulation.nodes.\n     *\n     * A force may perform necessary work during initialization, such as evaluating per-node parameters, to avoid repeatedly performing work during each application of the force.\n     */\n    initialize(nodes: NodeDatum[], random: () => number): void;\n\n    /**\n     *  Returns the current strength accessor, which defaults to a constant strength for all nodes of 0.1.\n     */\n    strength(): (d: NodeDatum, i: number, data: NodeDatum[]) => number;\n    /**\n     * Sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force.\n     * The strength determines how much to increment the node’s x-velocity: (x - node.x) × strength.\n     * For example, a value of 0.1 indicates that the node should move a tenth of the way from its current x-position to the target x-position with each application.\n     * Higher values moves nodes more quickly to the target position, often at the expense of other forces or constraints.\n     * A value outside the range [0,1] is not recommended.\n     * The strength accessor is invoked for each node in the simulation, being passed the node and its zero-based index.\n     * The resulting number is then stored internally, such that the strength of each node is only recomputed when the\n     * force is initialized or when this method is called with a new strength, and not on every application of the force.\n     */\n    strength(strength: number | ((d: NodeDatum, i: number, data: NodeDatum[]) => number)): this;\n\n    /**\n     * Return the current x-accessor, which defaults to a function returning 0 for all nodes.\n     */\n    x(): (d: NodeDatum, i: number, data: NodeDatum[]) => number;\n    /**\n     * Sets the x-coordinate accessor to the specified number or function, re-evaluates the x-accessor for each node, and returns this force.\n     * The x-accessor is invoked for each node in the simulation, being passed the node and its zero-based index.\n     * The resulting number is then stored internally, such that the target x-coordinate of each node is only recomputed\n     * when the force is initialized or when this method is called with a new x, and not on every application of the force.\n     */\n    x(x: number | ((d: NodeDatum, i: number, data: NodeDatum[]) => number)): this;\n}\n\n/**\n * Creates a new positioning force along the x-axis towards the given position x.\n * If x is not specified, it defaults to 0.\n */\nexport function forceX<NodeDatum extends SimulationNodeDatum>(\n    x?: number | ((d: NodeDatum, i: number, data: NodeDatum[]) => number),\n): ForceX<NodeDatum>;\n\n/**\n * The y-positioning force pushes nodes towards a desired position along the given dimension with a configurable strength.\n * The strength of the force is proportional to the one-dimensional distance between the node’s position and the target position.\n * While this force can be used to position individual nodes, it is intended primarily for global forces that apply to all (or most) nodes.\n *\n * The generic refers to the type of data for a node.\n */\nexport interface ForceY<NodeDatum extends SimulationNodeDatum> extends Force<NodeDatum, any> {\n    /**\n     * Supplies the array of nodes and random source to this force. This method is called when a force is bound to a simulation via simulation.force\n     * and when the simulation’s nodes change via simulation.nodes.\n     *\n     * A force may perform necessary work during initialization, such as evaluating per-node parameters, to avoid repeatedly performing work during each application of the force.\n     */\n    initialize(nodes: NodeDatum[], random: () => number): void;\n\n    /**\n     *  Returns the current strength accessor, which defaults to a constant strength for all nodes of 0.1.\n     */\n    strength(): (d: NodeDatum, i: number, data: NodeDatum[]) => number;\n    /**\n     * Sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force.\n     * The strength determines how much to increment the node’s y-velocity: (y - node.y) × strength.\n     * For example, a value of 0.1 indicates that the node should move a tenth of the way from its current y-position to the target y-position with each application.\n     * Higher values moves nodes more quickly to the target position, often at the expense of other forces or constraints.\n     * A value outside the range [0,1] is not recommended.\n     * The strength accessor is invoked for each node in the simulation, being passed the node and its zero-based index.\n     * The resulting number is then stored internally, such that the strength of each node is only recomputed when the\n     * force is initialized or when this method is called with a new strength, and not on every application of the force.\n     */\n    strength(strength: number | ((d: NodeDatum, i: number, data: NodeDatum[]) => number)): this;\n\n    /**\n     * Return the current y-accessor, which defaults to a function returning 0 for all nodes.\n     */\n    y(): (d: NodeDatum, i: number, data: NodeDatum[]) => number;\n    /**\n     * Sets the y-coordinate accessor to the specified number or function, re-evaluates the y-accessor for each node, and returns this force.\n     * The y-accessor is invoked for each node in the simulation, being passed the node and its zero-based index.\n     * The resulting number is then stored internally, such that the target y-coordinate of each node is only recomputed\n     * when the force is initialized or when this method is called with a new y, and not on every application of the force.\n     */\n    y(y: number | ((d: NodeDatum, i: number, data: NodeDatum[]) => number)): this;\n}\n\n/**\n * Creates a new positioning force along the y-axis towards the given position y.\n * If y is not specified, it defaults to 0.\n */\nexport function forceY<NodeDatum extends SimulationNodeDatum>(\n    y?: number | ((d: NodeDatum, i: number, data: NodeDatum[]) => number),\n): ForceY<NodeDatum>;\n\n/**\n * The radial force is similar to the x- and y-positioning forces, except it pushes nodes towards the closest point on a given circle.\n * The circle is of the specified radius centered at ⟨x,y⟩. If x and y are not specified, they default to ⟨0,0⟩.\n * The strength of the force is proportional to the one-dimensional distance between the node’s position and the target position.\n * While this force can be used to position individual nodes, it is intended primarily for global forces that apply to all (or most) nodes.\n *\n * The generic refers to the type of data for a node.\n */\nexport interface ForceRadial<NodeDatum extends SimulationNodeDatum> extends Force<NodeDatum, any> {\n    /**\n     * Assigns the array of nodes and random source to this force. This method is called when a force is bound to a simulation via simulation.force\n     * and when the simulation’s nodes change via simulation.nodes.\n     *\n     * A force may perform necessary work during initialization, such as evaluating per-node parameters, to avoid repeatedly performing work during each application of the force.\n     */\n    initialize(nodes: NodeDatum[], random: () => number): void;\n\n    /**\n     *  Returns the current strength accessor, which defaults to a constant strength for all nodes of 0.1.\n     */\n    strength(): (d: NodeDatum, i: number, data: NodeDatum[]) => number;\n    /**\n     * Sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force.\n     * The strength determines how much to increment the node’s x- and y-velocity.\n     * For example, a value of 0.1 indicates that the node should move a tenth of the way from its current position to the closest point on the circle with each application.\n     * Higher values moves nodes more quickly to the target position, often at the expense of other forces or constraints.\n     * A value outside the range [0,1] is not recommended.\n     * The strength accessor is invoked for each node in the simulation, being passed the node and its zero-based index.\n     * The resulting number is then stored internally, such that the strength of each node is only recomputed when the\n     * force is initialized or when this method is called with a new strength, and not on every application of the force.\n     */\n    strength(strength: number | ((d: NodeDatum, i: number, data: NodeDatum[]) => number)): this;\n\n    /**\n     * Return the current radius accessor for the circle.\n     */\n    radius(): (d: NodeDatum, i: number, data: NodeDatum[]) => number;\n    /**\n     * Sets the circle radius to the specified number or function, re-evaluates the radius accessor for each node, and returns this force.\n     * The radius accessor is invoked for each node in the simulation, being passed the node and its zero-based index.\n     * The resulting number is then stored internally, such that the target radius of each node is only recomputed when\n     * the force is initialized or when this method is called with a new radius, and not on every application of the force.\n     */\n    radius(radius: number | ((d: NodeDatum, i: number, data: NodeDatum[]) => number)): this;\n\n    /**\n     * Return the current x-accessor for the circle center, which defaults to a function returning 0 for all nodes.\n     */\n    x(): (d: NodeDatum, i: number, data: NodeDatum[]) => number;\n    /**\n     * Sets the x-coordinate of the circle center to the specified number and returns this force.\n     */\n    x(x: number | ((d: NodeDatum, i: number, data: NodeDatum[]) => number)): this;\n\n    /**\n     * Return the current y-accessor for the circle center, which defaults to a function returning 0 for all nodes.\n     */\n    y(): (d: NodeDatum, i: number, data: NodeDatum[]) => number;\n    /**\n     * Sets the y-coordinate of the circle center to the specified number and returns this force.\n     */\n    y(y: number | ((d: NodeDatum, i: number, data: NodeDatum[]) => number)): this;\n}\n\n/**\n * Create a new radial positioning force towards a circle of the specified radius centered at ⟨x,y⟩.\n * If x and y are not specified, they default to ⟨0,0⟩.\n *\n * The strength of the force is proportional to the one-dimensional distance between the node’s position and the target position.\n * While this force can be used to position individual nodes, it is intended primarily for global forces that apply to all (or most) nodes.\n *\n * The generic refers to the type of data for a node.\n */\nexport function forceRadial<NodeDatum extends SimulationNodeDatum>(\n    radius: number | ((d: NodeDatum, i: number, data: NodeDatum[]) => number),\n    x?: number | ((d: NodeDatum, i: number, data: NodeDatum[]) => number),\n    y?: number | ((d: NodeDatum, i: number, data: NodeDatum[]) => number),\n): ForceRadial<NodeDatum>;\n\n// Types from d3-format\n// Last module patch version validated against: 3.0.1\n\n/**\n * Specification of locale to use when creating a new FormatLocaleObject\n */\nexport interface FormatLocaleDefinition {\n    /**\n     * The decimal point (e.g., \".\")\n     */\n    decimal: string;\n    /**\n     * The group separator (e.g., \",\"). Note that the thousands property is a misnomer, as\n     * the grouping definition allows groups other than thousands.\n     */\n    thousands: string;\n    /**\n     * The array of group sizes (e.g., [3]), cycled as needed.\n     */\n    grouping: number[];\n    /**\n     * The currency prefix and suffix (e.g., [\"$\", \"\"]).\n     */\n    currency: [string, string];\n    /**\n     * An optional array of ten strings to replace the numerals 0-9.\n     */\n    numerals?: string[] | undefined;\n    /**\n     * An optional symbol to replace the `percent` suffix; the percent suffix (defaults to \"%\").\n     */\n    percent?: string | undefined;\n    /**\n     * Optional; the minus sign (defaults to \"−\").\n     */\n    minus?: string | undefined;\n    /**\n     * Optional; the not-a-number value (defaults \"NaN\").\n     */\n    nan?: string | undefined;\n}\n\n/**\n * A Format Locale Object\n */\nexport interface FormatLocaleObject {\n    /**\n     * Returns a new format function for the given string specifier. The returned function\n     * takes a number as the only argument, and returns a string representing the formatted number.\n     *\n     * @param specifier A Specifier string.\n     * @throws Error on invalid format specifier.\n     */\n    format(specifier: string): (n: number | { valueOf(): number }) => string;\n\n    /**\n     * Returns a new format function for the given string specifier. The returned function\n     * takes a number as the only argument, and returns a string representing the formatted number.\n     * The returned function will convert values to the units of the appropriate SI prefix for the\n     * specified numeric reference value before formatting in fixed point notation.\n     *\n     * @param specifier A Specifier string.\n     * @param value The reference value to determine the appropriate SI prefix.\n     * @throws Error on invalid format specifier.\n     */\n    formatPrefix(specifier: string, value: number): (n: number | { valueOf(): number }) => string;\n}\n\n/**\n * A Format Specifier\n *\n * For details see: {@link https://github.com/d3/d3-format#locale_format}\n */\nexport interface FormatSpecifierObject {\n    /**\n     * fill can be any character. The presence of a fill character is signaled by the align character following it.\n     */\n    fill?: string | undefined;\n    /**\n     * Alignment used for format, as set by choosing one of the following:\n     *\n     * '>' - Forces the field to be right-aligned within the available space. (Default behavior).\n     * '<' - Forces the field to be left-aligned within the available space.\n     * '^' - Forces the field to be centered within the available space.\n     * '=' - Like '>', but with any sign and symbol to the left of any padding.\n     */\n    align?: string | undefined;\n    /**\n     * The sign can be:\n     *\n     * '-' - nothing for positive and a minus sign for negative. (Default behavior.)\n     * '+' - a plus sign for positive and a minus sign for negative.\n     * '(' - nothing for positive and parentheses for negative.\n     * ' ' (space) - a space for positive and a minus sign for negative.\n     */\n    sign?: string | undefined;\n    /**\n     * The symbol can be:\n     *\n     * '$' - apply currency symbols per the locale definition.\n     * '#' - for binary, octal, or hexadecimal notation, prefix by 0b, 0o, or 0x, respectively.\n     * '' (none) - no symbol. (Default behavior.)\n     */\n    symbol?: string | undefined;\n    /**\n     * The zero (0) option enables zero-padding; this implicitly sets fill to 0 and align to =.\n     */\n    zero?: string | undefined;\n    /**\n     * The width defines the minimum field width;\n     * if not specified, then the width will be determined by the content.\n     */\n    width?: string | undefined;\n    /**\n     * The comma (,) option enables the use of a group separator, such as a comma for thousands.\n     */\n    comma?: string | undefined;\n    /**\n     * Depending on the type, the precision either indicates the number of digits that follow the decimal point (types 'f' and '%'),\n     * or the number of significant digits (types '' (none), 'e', 'g', 'r', 's' and 'p'). If the precision is not specified,\n     * it defaults to 6 for all types except '' (none), which defaults to 12.\n     * Precision is ignored for integer formats (types 'b', 'o', 'd', 'x', 'X' and 'c').\n     *\n     * See precisionFixed and precisionRound for help picking an appropriate precision.\n     */\n    precision?: string | undefined;\n    /**\n     * The '~' option trims insignificant trailing zeros across all format types.\n     * This is most commonly used in conjunction with types 'r', 'e', 's' and '%'.\n     */\n    trim?: string | undefined;\n    /**\n     * The available type values are:\n     *\n     * 'e' - exponent notation.\n     * 'f' - fixed point notation.\n     * 'g' - either decimal or exponent notation, rounded to significant digits.\n     * 'r' - decimal notation, rounded to significant digits.\n     * 's' - decimal notation with an SI prefix, rounded to significant digits.\n     * '%' - multiply by 100, and then decimal notation with a percent sign.\n     * 'p' - multiply by 100, round to significant digits, and then decimal notation with a percent sign.\n     * 'b' - binary notation, rounded to integer.\n     * 'o' - octal notation, rounded to integer.\n     * 'd' - decimal notation, rounded to integer.\n     * 'x' - hexadecimal notation, using lower-case letters, rounded to integer.\n     * 'X' - hexadecimal notation, using upper-case letters, rounded to integer.\n     * 'c' - converts the integer to the corresponding unicode character before printing.\n     *\n     * The type '' (none) is also supported as shorthand for '~g' (with a default precision of 12 instead of 6), and\n     * the type 'n' is shorthand for ',g'. For the 'g', 'n' and '' (none) types,\n     * decimal notation is used if the resulting string would have precision or fewer digits; otherwise, exponent notation is used.\n     */\n    type?: string | undefined;\n}\n\n/**\n * Create a new locale-based object which exposes format(...) and formatPrefix(...)\n * methods for the specified locale.\n *\n * @param locale A Format locale definition.\n */\nexport function formatLocale(locale: FormatLocaleDefinition): FormatLocaleObject;\n\n/**\n * Create a new locale-based object which exposes format(...) and formatPrefix(...)\n * methods for the specified locale definition. The specified locale definition will be\n * set as the new default locale definition.\n *\n * @param defaultLocale A Format locale definition to be used as default.\n */\nexport function formatDefaultLocale(defaultLocale: FormatLocaleDefinition): FormatLocaleObject;\n\n/**\n * Returns a new format function for the given string specifier. The returned function\n * takes a number as the only argument, and returns a string representing the formatted number.\n *\n * Uses the current default locale.\n *\n * The general form of a specifier is [[fill]align][sign][symbol][0][width][,][.precision][~][type].\n * For reference, an explanation of the segments of the specifier string, refer to the FormatSpecifier interface properties.\n *\n * @param specifier A Specifier string.\n * @throws Error on invalid format specifier.\n */\nexport function format(specifier: string): (n: number | { valueOf(): number }) => string;\n\n/**\n * Returns a new format function for the given string specifier. The returned function\n * takes a number as the only argument, and returns a string representing the formatted number.\n * The returned function will convert values to the units of the appropriate SI prefix for the\n * specified numeric reference value before formatting in fixed point notation.\n *\n * Uses the current default locale.\n *\n * The general form of a specifier is [[fill]align][sign][symbol][0][width][,][.precision][~][type].\n * For reference, an explanation of the segments of the specifier string, refer to the FormatSpecifier interface properties.\n *\n * @param specifier A Specifier string.\n * @param value The reference value to determine the appropriate SI prefix.\n * @throws Error on invalid format specifier.\n */\nexport function formatPrefix(specifier: string, value: number): (n: number | { valueOf(): number }) => string;\n\n/**\n * A Format Specifier\n *\n * For details see: {@link https://github.com/d3/d3-format#locale_format}\n */\nexport class FormatSpecifier {\n    /**\n     * Given the specified specifier object, returning an object with exposed fields that correspond to the format specification mini-language and a toString method that reconstructs the specifier.\n     * @param specifier A specifier object.\n     */\n    constructor(specifier: FormatSpecifierObject);\n    /**\n     * fill can be any character. The presence of a fill character is signaled by the align character following it.\n     */\n    fill: string;\n    /**\n     * Alignment used for format, as set by choosing one of the following:\n     *\n     * '>' - Forces the field to be right-aligned within the available space. (Default behavior).\n     * '<' - Forces the field to be left-aligned within the available space.\n     * '^' - Forces the field to be centered within the available space.\n     * '=' - Like '>', but with any sign and symbol to the left of any padding.\n     */\n    align: \">\" | \"<\" | \"^\" | \"=\";\n    /**\n     * The sign can be:\n     *\n     * '-' - nothing for positive and a minus sign for negative. (Default behavior.)\n     * '+' - a plus sign for positive and a minus sign for negative.\n     * '(' - nothing for positive and parentheses for negative.\n     * ' ' (space) - a space for positive and a minus sign for negative.\n     */\n    sign: \"-\" | \"+\" | \"(\" | \" \";\n    /**\n     * The symbol can be:\n     *\n     * '$' - apply currency symbols per the locale definition.\n     * '#' - for binary, octal, or hexadecimal notation, prefix by 0b, 0o, or 0x, respectively.\n     * '' (none) - no symbol. (Default behavior.)\n     */\n    symbol: \"$\" | \"#\" | \"\";\n    /**\n     * The zero (0) option enables zero-padding; this implicitly sets fill to 0 and align to =.\n     */\n    zero: boolean;\n    /**\n     * The width defines the minimum field width;\n     * if not specified, then the width will be determined by the content.\n     */\n    width: number | undefined;\n    /**\n     * The comma (,) option enables the use of a group separator, such as a comma for thousands.\n     */\n    comma: boolean;\n    /**\n     * Depending on the type, the precision either indicates the number of digits that follow the decimal point (types 'f' and '%'),\n     * or the number of significant digits (types '' (none), 'e', 'g', 'r', 's' and 'p'). If the precision is not specified,\n     * it defaults to 6 for all types except '' (none), which defaults to 12.\n     * Precision is ignored for integer formats (types 'b', 'o', 'd', 'x', 'X' and 'c').\n     *\n     * See precisionFixed and precisionRound for help picking an appropriate precision.\n     */\n    precision: number | undefined;\n    /**\n     * The '~' option trims insignificant trailing zeros across all format types.\n     * This is most commonly used in conjunction with types 'r', 'e', 's' and '%'.\n     */\n    trim: boolean;\n    /**\n     * The available type values are:\n     *\n     * 'e' - exponent notation.\n     * 'f' - fixed point notation.\n     * 'g' - either decimal or exponent notation, rounded to significant digits.\n     * 'r' - decimal notation, rounded to significant digits.\n     * 's' - decimal notation with an SI prefix, rounded to significant digits.\n     * '%' - multiply by 100, and then decimal notation with a percent sign.\n     * 'p' - multiply by 100, round to significant digits, and then decimal notation with a percent sign.\n     * 'b' - binary notation, rounded to integer.\n     * 'o' - octal notation, rounded to integer.\n     * 'd' - decimal notation, rounded to integer.\n     * 'x' - hexadecimal notation, using lower-case letters, rounded to integer.\n     * 'X' - hexadecimal notation, using upper-case letters, rounded to integer.\n     * 'c' - converts the integer to the corresponding unicode character before printing.\n     *\n     * The type '' (none) is also supported as shorthand for '~g' (with a default precision of 12 instead of 6), and\n     * the type 'n' is shorthand for ',g'. For the 'g', 'n' and '' (none) types,\n     * decimal notation is used if the resulting string would have precision or fewer digits; otherwise, exponent notation is used.\n     */\n    type: \"e\" | \"f\" | \"g\" | \"r\" | \"s\" | \"%\" | \"p\" | \"b\" | \"o\" | \"d\" | \"x\" | \"X\" | \"c\" | \"\" | \"n\";\n    /**\n     * Return the object as a specifier string.\n     */\n    toString(): string;\n}\n\n/**\n * Parses the specified specifier, returning an object with exposed fields that correspond to the\n * format specification mini-language and a toString method that reconstructs the specifier.\n *\n * The general form of a specifier is [[fill]align][sign][symbol][0][width][,][.precision][~][type].\n * For reference, an explanation of the segments of the specifier string, refer to the FormatSpecifier interface properties.\n *\n * @param specifier A specifier string.\n * @throws Error on invalid format specifier.\n */\nexport function formatSpecifier(specifier: string): FormatSpecifier;\n\n/**\n * Returns a suggested decimal precision for fixed point notation given the specified numeric step value.\n *\n * @param step The step represents the minimum absolute difference between values that will be formatted.\n * (This assumes that the values to be formatted are also multiples of step.)\n */\nexport function precisionFixed(step: number): number;\n\n/**\n * Returns a suggested decimal precision for use with locale.formatPrefix given the specified\n * numeric step and reference value.\n *\n * @param step The step represents the minimum absolute difference between values that will be formatted.\n * (This assumes that the values to be formatted are also multiples of step.)\n * @param value Reference value determines which SI prefix will be used.\n */\nexport function precisionPrefix(step: number, value: number): number;\n\n/**\n * Returns a suggested decimal precision for format types that round to significant digits\n * given the specified numeric step and max values.\n *\n * @param step The step represents the minimum absolute difference between values that will be formatted.\n * (This assumes that the values to be formatted are also multiples of step.)\n * @param max max represents the largest absolute value that will be formatted.\n */\nexport function precisionRound(step: number, max: number): number;\n\n// Types from d3-geo\n// Last module patch version validated against: 3.0.1\n\n// ----------------------------------------------------------------------\n// Shared Interfaces and Types\n// ----------------------------------------------------------------------\n\n/**\n * A basic geometry for a sphere, which is supported by d3-geo\n * beyond the GeoJSON geometries.\n */\nexport interface GeoSphere {\n    /**\n     * Sphere geometry type\n     */\n    type: \"Sphere\";\n}\n\n/**\n * Type Alias for GeoJSON Geometry Object and GeoSphere additional\n * geometry supported by d3-geo\n */\nexport type GeoGeometryObjects = GeoJSON.GeometryObject | GeoSphere;\n\n/**\n * A GeoJSON-style GeometryCollection which supports GeoJSON geometry objects\n * and additionally GeoSphere.\n *\n * The generic refers to the type(s) of d3-geo geometry objects contained in the collection.\n */\nexport interface ExtendedGeometryCollection<GeometryType extends GeoGeometryObjects = GeoGeometryObjects> {\n    type: string;\n    bbox?: number[] | undefined;\n    crs?: {\n        type: string;\n        properties: any;\n    } | undefined;\n    geometries: GeometryType[];\n}\n\n/**\n * A GeoJSON-style Feature which support features built on GeoJSON GeometryObjects\n * or GeoSphere.\n *\n * The first generic refers to the type(s) of d3-geo geometry objects underlying the ExtendedFeature.\n * Unless explicitly ruled out, the geometry value is nullable.\n *\n * The second generic refers to the data type of the properties of the ExtendedFeature. Unless explicitly ruled out,\n * the properties value is nullable.\n */\nexport interface ExtendedFeature<\n    GeometryType extends GeoGeometryObjects | null = GeoGeometryObjects | null,\n    Properties extends GeoJSON.GeoJsonProperties = GeoJSON.GeoJsonProperties,\n> extends GeoJSON.GeoJsonObject {\n    geometry: GeometryType;\n    properties: Properties;\n    id?: string | number | undefined;\n}\n\n/**\n * A GeoJSON-style FeatureCollection which supports GeoJSON features\n * and features built on GeoSphere\n *\n * The generic refers to the type of ExtendedFeature contained in the ExtendedFeatureCollection.\n */\nexport interface ExtendedFeatureCollection<FeatureType extends ExtendedFeature = ExtendedFeature>\n    extends GeoJSON.GeoJsonObject\n{\n    features: FeatureType[];\n}\n\n/**\n * Type Alias for permissible objects which can be used with d3-geo\n * methods\n */\nexport type GeoPermissibleObjects =\n    | GeoGeometryObjects\n    | ExtendedGeometryCollection\n    | ExtendedFeature\n    | ExtendedFeatureCollection;\n\n// ----------------------------------------------------------------------\n// Spherical Math\n// ----------------------------------------------------------------------\n\n/**\n * Returns the spherical area of the specified GeoJSON object in steradians.\n * This is the spherical equivalent of path.area.\n */\nexport function geoArea(\n    object: ExtendedFeature | ExtendedFeatureCollection | GeoGeometryObjects | ExtendedGeometryCollection,\n): number;\n\n/**\n * Returns the spherical bounding box for the specified GeoJSON object.\n * The bounding box is represented by a two-dimensional array: [[left, bottom], [right, top]],\n * where left is the minimum longitude, bottom is the minimum latitude, right is maximum longitude, and top is the maximum latitude.\n * All coordinates are given in degrees.\n * (Note that in projected planar coordinates, the minimum latitude is typically the maximum y-value, and the maximum latitude is typically the minimum y-value.)\n * This is the spherical equivalent of path.bounds.\n */\nexport function geoBounds(\n    object: ExtendedFeature | ExtendedFeatureCollection | GeoGeometryObjects | ExtendedGeometryCollection,\n): [[number, number], [number, number]];\n\n/**\n * Returns the spherical centroid of the specified GeoJSON object.\n * This is the spherical equivalent of path.centroid.\n */\nexport function geoCentroid(\n    object: ExtendedFeature | ExtendedFeatureCollection | GeoGeometryObjects | ExtendedGeometryCollection,\n): [number, number];\n\n/**\n * Returns true if and only if the specified GeoJSON object contains the specified point, or false if the object does not contain the point.\n * The point must be specified as a two-element array [longitude, latitude] in degrees.\n * For Point and MultiPoint geometries, an exact test is used; for a Sphere, true is always returned; for other geometries, an epsilon threshold is applied.\n */\nexport function geoContains(\n    object: ExtendedFeature | ExtendedFeatureCollection | GeoGeometryObjects | ExtendedGeometryCollection,\n    point: [number, number],\n): boolean;\n\n/**\n * Returns the great-arc distance in radians between the two points a and b.\n * Each point must be specified as a two-element array [longitude, latitude] in degrees.\n *\n * @param a Point specified as a two-element array [longitude, latitude] in degrees.\n * @param b Point specified as a two-element array [longitude, latitude] in degrees.\n */\nexport function geoDistance(a: [number, number], b: [number, number]): number;\n\n/**\n * Returns the great-arc length of the specified GeoJSON object in radians.\n * For polygons, returns the perimeter of the exterior ring plus that of any interior rings.\n * This is the spherical equivalent of path.measure.\n */\nexport function geoLength(\n    object: ExtendedFeature | ExtendedFeatureCollection | GeoGeometryObjects | ExtendedGeometryCollection,\n): number;\n\n/**\n * Returns an interpolator function given two points a and b.\n * Each point must be specified as a two-element array [longitude, latitude] in degrees.\n *\n * @param a Point specified as a two-element array [longitude, latitude] in degrees.\n * @param b Point specified as a two-element array [longitude, latitude] in degrees.\n */\nexport function geoInterpolate(a: [number, number], b: [number, number]): (t: number) => [number, number];\n\n/**\n * A Geo Rotation\n */\nexport interface GeoRotation {\n    /**\n     * Returns a new array [longitude, latitude] in degrees representing the rotated point of the given point.\n     *\n     * @param point The point must be specified as a two-element array [longitude, latitude] in degrees.\n     */\n    (point: [number, number]): [number, number];\n\n    /**\n     * Returns a new array [longitude, latitude] in degrees representing the point of the given rotated point; the inverse of rotation.\n     *\n     * @param point The rotated point must be specified as a two-element array [longitude, latitude] in degrees.\n     */\n    invert(point: [number, number]): [number, number];\n}\n\n/**\n * Returns a rotation function for the given angles.\n *\n * @param angles  A two- or three-element array of numbers [lambda, phi, gamma] specifying the rotation angles in degrees about each spherical axis.\n * (These correspond to yaw, pitch and roll.) If the rotation angle gamma is omitted, it defaults to 0.\n */\nexport function geoRotation(angles: [number, number] | [number, number, number]): GeoRotation;\n\n// ----------------------------------------------------------------------\n// Spherical Shapes\n// ----------------------------------------------------------------------\n\n// geoCircle ============================================================\n\n/**\n * A new circle generator\n *\n * The first generic corresponds to the \"this\"-context within which the geo circle generator will be invoked.\n *\n * The second generic corresponds to the type of the Datum which will be passed into the geo circle generator.\n */\nexport interface GeoCircleGenerator<This = any, Datum = any> {\n    /**\n     * Returns a new GeoJSON geometry object of type “Polygon” approximating a circle on the surface of a sphere,\n     * with the current center, radius and precision. Any arguments are passed to the accessors.\n     */\n    (this: This, d?: Datum, ...args: any[]): GeoJSON.Polygon;\n\n    /**\n     * Returns the current center accessor, which defaults to a function returning [0, 0].\n     */\n    center(): (this: This, d: Datum, ...args: any[]) => [number, number];\n    /**\n     * Sets the circle center to the specified point [longitude, latitude] in degrees, and returns this circle generator.\n     * The center may also be specified as a function; this function will be invoked whenever a circle is generated, being passed any arguments passed to the circle generator.\n     */\n    center(center: [number, number] | ((this: This, d: Datum, ...args: any[]) => [number, number])): this;\n\n    /**\n     * Returns the current radius accessor, which defaults to a function returning 90.\n     */\n    radius(): (this: This, d: Datum, ...args: any[]) => number;\n    /**\n     * Sets the circle radius to the specified angle in degrees, and returns this circle generator.\n     * The radius may also be specified as a function; this function will be invoked whenever a circle is generated, being passed any arguments passed to the circle generator.\n     */\n    radius(radius: number | ((this: This, d: Datum, ...args: any[]) => number)): this;\n\n    /**\n     * Returns the current precision accessor, which defaults to a function returning 6.\n     */\n    precision(): (this: This, d: Datum, ...args: any[]) => number;\n    /**\n     * Sets the circle precision to the specified angle in degrees, and returns this circle generator.\n     * The precision may also be specified as a function; this function will be invoked whenever a circle is generated, being passed any arguments passed to the circle generator.\n     */\n    precision(precision: number | ((this: This, d: Datum, ...args: any[]) => number)): this;\n}\n\n/**\n * Returns a new geo circle generator\n */\nexport function geoCircle(): GeoCircleGenerator;\n/**\n * Returns a new geo circle generator\n *\n * The generic corresponds to the data type of the first argument passed into the geo circle generator and its accessor functions.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function geoCircle<Datum>(): GeoCircleGenerator<any, Datum>;\n/**\n * Returns a new geo circle generator\n *\n * The first generic corresponds to the \"this\" context within which the geo circle generator and its accessors will be invoked.\n *\n * The second generic corresponds to the data type of the first argument passed into the geo circle generator and its accessor functions.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function geoCircle<This, Datum>(): GeoCircleGenerator<This, Datum>;\n\n// geoGraticule ============================================================\n\n/**\n * A Feature generator for graticules: a uniform grid of meridians and parallels for showing projection distortion.\n * The default graticule has meridians and parallels every 10° between ±80° latitude; for the polar regions, there are meridians every 90°.\n */\nexport interface GeoGraticuleGenerator {\n    /**\n     * Returns a GeoJSON MultiLineString geometry object representing all meridians and parallels for this graticule.\n     */\n    (): GeoJSON.MultiLineString;\n\n    /**\n     * Returns an array of GeoJSON LineString geometry objects, one for each meridian or parallel for this graticule.\n     */\n    lines(): GeoJSON.LineString[];\n\n    /**\n     * Returns a GeoJSON Polygon geometry object representing the outline of this graticule, i.e. along the meridians and parallels defining its extent.\n     */\n    outline(): GeoJSON.Polygon;\n\n    /**\n     * Returns the current minor extent, which defaults to ⟨⟨-180°, -80° - ε⟩, ⟨180°, 80° + ε⟩⟩.\n     */\n    extent(): [[number, number], [number, number]];\n    /**\n     * Sets the major and minor extents of this graticule.\n     *\n     * @param extent Extent to use for major and minor extent of graticule.\n     */\n    extent(extent: [[number, number], [number, number]]): this;\n\n    /**\n     * Returns the current major extent, which defaults to ⟨⟨-180°, -90° + ε⟩, ⟨180°, 90° - ε⟩⟩.\n     */\n    extentMajor(): [[number, number], [number, number]];\n    /**\n     * Sets the major extent of this graticule.\n     *\n     * @param extent Major extent of graticule.\n     */\n    extentMajor(extent: [[number, number], [number, number]]): this;\n\n    /**\n     * Returns the current minor extent, which defaults to  ⟨⟨-180°, -80° - ε⟩, ⟨180°, 80° + ε⟩⟩.\n     */\n    extentMinor(): [[number, number], [number, number]];\n    /**\n     * Sets the minor extent of this graticule.\n     *\n     * @param extent Minor extent of graticule.\n     */\n    extentMinor(extent: [[number, number], [number, number]]): this;\n\n    /**\n     * Returns the current minor step, which defaults to ⟨10°, 10°⟩.\n     */\n    step(): [number, number];\n    /**\n     * Sets the major and minor step for this graticule\n     *\n     * @param step Major and minor step to use for this graticule.\n     */\n    step(step: [number, number]): this;\n\n    /**\n     * Returns the current major step, which defaults to ⟨90°, 360°⟩.\n     */\n    stepMajor(): [number, number];\n    /**\n     * Sets the major step for this graticule.\n     *\n     * @param step Major step.\n     */\n    stepMajor(step: [number, number]): this;\n\n    /**\n     * Returns the current major step, which defaults to ⟨10°, 10°⟩.\n     */\n    stepMinor(): [number, number];\n    /**\n     * Sets the minor step for this graticule.\n     *\n     * @param step Minor step.\n     */\n    stepMinor(step: [number, number]): this;\n\n    /**\n     * Returns the current precision, which defaults to 2.5°.\n     */\n    precision(): number;\n    /**\n     * Sets the precision for this graticule, in degrees.\n     *\n     * @param angle Precision in degrees.\n     */\n    precision(angle: number): this;\n}\n\n/**\n * Constructs a feature generator for creating graticules: a uniform grid of meridians and parallels for showing projection distortion.\n * The default graticule has meridians and parallels every 10° between ±80° latitude; for the polar regions, there are meridians every 90°.\n */\nexport function geoGraticule(): GeoGraticuleGenerator;\n\n/**\n * A convenience method for directly generating the default 10° global graticule as a GeoJSON MultiLineString geometry object.\n */\nexport function geoGraticule10(): GeoJSON.MultiLineString;\n\n// ----------------------------------------------------------------------\n// Projections\n// ----------------------------------------------------------------------\n\n/**\n * A D3 geo stream. D3 transforms geometry using a sequence of function calls, rather than materializing intermediate representations, to minimize overhead.\n * Streams must implement several methods to receive input geometry. Streams are inherently stateful; the meaning of a point depends on whether the point is inside of a line,\n * and likewise a line is distinguished from a ring by a polygon. Despite the name “stream”, these method calls are currently synchronous.\n */\nexport interface GeoStream {\n    /**\n     * Indicates the end of a line or ring. Within a polygon, indicates the end of a ring.\n     * Unlike GeoJSON, the redundant closing coordinate of a ring is not indicated via point, and instead is implied via lineEnd within a polygon.\n     */\n    lineEnd(): void;\n\n    /**\n     * Indicates the start of a line or ring. Within a polygon, indicates the start of a ring. The first ring of a polygon is the exterior ring, and is typically clockwise.\n     * Any subsequent rings indicate holes in the polygon, and are typically counterclockwise.\n     */\n    lineStart(): void;\n\n    /**\n     * Indicates a point with the specified coordinates x and y (and optionally z). The coordinate system is unspecified and implementation-dependent;\n     * for example, projection streams require spherical coordinates in degrees as input. Outside the context of a polygon or line,\n     * a point indicates a point geometry object (Point or MultiPoint). Within a line or polygon ring, the point indicates a control point.\n     *\n     * @param x x-coordinate of point.\n     * @param y y-coordinate of point.\n     * @param z Optional z-coordinate of point.\n     */\n    point(x: number, y: number, z?: number): void;\n\n    /**\n     * Indicates the end of a polygon.\n     */\n    polygonEnd(): void;\n\n    /**\n     * Indicates the start of a polygon. The first line of a polygon indicates the exterior ring, and any subsequent lines indicate interior holes.\n     */\n    polygonStart(): void;\n\n    /**\n     * Indicates the sphere (the globe; the unit sphere centered at ⟨0,0,0⟩).\n     */\n    sphere?(): void;\n}\n\n// geoStream(...) =======================================================\n\n/**\n * Streams the specified GeoJSON object to the specified projection stream.\n * While both features and geometry objects are supported as input, the stream interface only describes the geometry, and thus additional feature properties are not visible to streams.\n */\nexport function geoStream(\n    object: ExtendedFeature | ExtendedFeatureCollection | GeoGeometryObjects | ExtendedGeometryCollection,\n    stream: GeoStream,\n): void;\n\n// ----------------------------------------------------------------------\n// Projections\n// ----------------------------------------------------------------------\n\n/**\n * Raw projections are point transformation functions that are used to implement custom projections; they typically passed to d3.geoProjection or d3.geoProjectionMutator.\n * They are exposed here to facilitate the derivation of related projections.\n * Raw projections take spherical coordinates [lambda, phi] in radians (not degrees!) and return a point [x, y], typically in the unit square centered around the origin.\n */\nexport interface GeoRawProjection {\n    /**\n     * Projects the specified point [lambda, phi] in radians, returning a new point [x, y] in unitless coordinates.\n     * @param lambda Spherical lambda coordinate in radians.\n     * @param phi Spherical phi coordinate in radians.\n     */\n    (lambda: number, phi: number): [number, number];\n\n    /**\n     * Inverts the projected point [x, y] in unitless coordinates, returning an unprojected point in spherical coordinates [lambda, phi] in radians.\n     * @param x x-coordinate (unitless).\n     * @param y y-coordinate (unitless).\n     */\n    invert?(x: number, y: number): [number, number];\n}\n\n/**\n * An object implementing a stream method\n */\nexport interface GeoStreamWrapper {\n    /**\n     * Returns a projection stream for the specified output stream. Any input geometry is projected before being streamed to the output stream.\n     * A typical projection involves several geometry transformations: the input geometry is first converted to radians, rotated on three axes,\n     * clipped to the small circle or cut along the antimeridian, and lastly projected to the plane with adaptive resampling, scale and translation.\n     *\n     * @param stream An input stream\n     */\n    stream(stream: GeoStream): GeoStream;\n}\n\n/**\n * A Geographic Projection to transform spherical polygonal geometry to planar polygonal geometry.\n * D3 provides implementations of several classes of standard projections:\n *\n * - Azimuthal\n * - Composite\n * - Conic\n * - Cylindrical\n *\n * For many more projections, see d3-geo-projection. You can implement custom projections using d3.geoProjection or d3.geoProjectionMutator.\n */\nexport interface GeoProjection extends GeoStreamWrapper {\n    /**\n     * Returns a new array [x, y] (typically in pixels) representing the projected point of the given point.\n     * The point must be specified as a two-element array [longitude, latitude] in degrees.\n     * May return null if the specified point has no defined projected position, such as when the point is outside the clipping bounds of the projection.\n     *\n     * @param point A point specified as a two-dimensional array [longitude, latitude] in degrees.\n     */\n    (point: [number, number]): [number, number] | null;\n\n    /**\n     * Returns a new array [longitude, latitude] in degrees representing the unprojected point of the given projected point.\n     * May return null if the specified point has no defined projected position, such as when the point is outside the clipping bounds of the projection.\n     *\n     * @param point The projected point, specified as a two-element array [x, y] (typically in pixels).\n     */\n    invert?(point: [number, number]): [number, number] | null;\n\n    /**\n     * Returns the current spherical clipping function.\n     * Pre-clipping occurs in geographic coordinates. Cutting along the antimeridian line,\n     * or clipping along a small circle are the most common strategies.\n     */\n    preclip(): (stream: GeoStream) => GeoStream;\n    /**\n     * Sets the projection’s spherical clipping to the specified function and returns the projection.\n     * Pre-clipping occurs in geographic coordinates. Cutting along the antimeridian line, or clipping along a small circle are the most common strategies.\n     *\n     * @param preclip A spherical clipping function. Clipping functions are implemented as transformations of a projection stream.\n     * Pre-clipping operates on spherical coordinates, in radians.\n     */\n    preclip(preclip: (stream: GeoStream) => GeoStream): this;\n\n    /**\n     * Returns the current cartesian clipping function.\n     * Post-clipping occurs on the plane, when a projection is bounded to a certain extent such as a rectangle.\n     */\n    postclip(): (stream: GeoStream) => GeoStream;\n    /**\n     * Sets the projection’s cartesian clipping to the specified function and returns the projection.\n     *\n     * @param postclip A cartesian clipping function. Clipping functions are implemented as transformations of a projection stream.\n     * Post-clipping operates on planar coordinates, in pixels.\n     */\n    postclip(postclip: (stream: GeoStream) => GeoStream): this;\n\n    /**\n     * Returns the current clip angle which defaults to null.\n     *\n     * null switches to antimeridian cutting rather than small-circle clipping.\n     */\n    clipAngle(): number | null;\n    /**\n     * Sets the projection’s clipping circle radius to the specified angle in degrees and returns the projection.\n     * If angle is null, switches to antimeridian cutting rather than small-circle clipping.\n     */\n    clipAngle(angle: null | number): this;\n\n    /**\n     * Returns the current viewport clip extent which defaults to null.\n     */\n    clipExtent(): [[number, number], [number, number]] | null;\n    /**\n     * Sets the projection’s viewport clip extent to the specified bounds in pixels and returns the projection.\n     * The extent bounds are specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left-side of the viewport, y₀ is the top, x₁ is the right and y₁ is the bottom.\n     * If extent is null, no viewport clipping is performed.\n     */\n    clipExtent(extent: null | [[number, number], [number, number]]): this;\n\n    /**\n     * Returns the current scale factor; the default scale is projection-specific.\n     *\n     * The scale factor corresponds linearly to the distance between projected points; however, absolute scale factors are not equivalent across projections.\n     */\n    scale(): number;\n    /**\n     * Sets the projection’s scale factor to the specified value and returns the projection.\n     * The scale factor corresponds linearly to the distance between projected points; however, absolute scale factors are not equivalent across projections.\n     *\n     * @param scale Scale factor to be used for the projection; the default scale is projection-specific.\n     */\n    scale(scale: number): this;\n\n    /**\n     * Returns the current translation offset which defaults to [480, 250] and places ⟨0°,0°⟩ at the center of a 960×500 area.\n     * The translation offset determines the pixel coordinates of the projection’s center.\n     */\n    translate(): [number, number];\n    /**\n     * Sets the projection’s translation offset to the specified two-element array [tx, ty] and returns the projection.\n     * The translation offset determines the pixel coordinates of the projection’s center. The default translation offset places ⟨0°,0°⟩ at the center of a 960×500 area.\n     *\n     * @param point A two-element array [tx, ty] specifying the translation offset. The default translation offset of defaults to [480, 250] places ⟨0°,0°⟩ at the center of a 960×500 area.\n     */\n    translate(point: [number, number]): this;\n\n    /**\n     * Returns the current center of the projection, which defaults to ⟨0°,0°⟩.\n     */\n    center(): [number, number];\n    /**\n     * Sets the projection’s center to the specified center,\n     * a two-element array of longitude and latitude in degrees and returns the projection.\n     * The default is ⟨0°,0°⟩.\n     *\n     * @param point A point specified as a two-dimensional array [longitude, latitude] in degrees.\n     */\n    center(point: [number, number]): this;\n\n    /**\n     * Returns the projection’s current angle, which defaults to 0°.\n     */\n    angle(): number;\n    /**\n     * Sets the projection’s post-projection planar rotation angle to the specified angle in degrees and returns the projection.\n     * @param angle The new rotation angle of the projection.\n     */\n    angle(angle: number): this;\n\n    /**\n     * Returns true if x-reflection is enabled, which defaults to false.\n     */\n    reflectX(): boolean;\n    /**\n     * Sets whether or not the x-dimension is reflected (negated) in the output.\n     * @param reflect Whether or not the x-dimension is reflected (negated) in the output.\n     */\n    reflectX(reflect: boolean): this;\n\n    /**\n     * Returns true if y-reflection is enabled, which defaults to false.\n     */\n    reflectY(): boolean;\n    /**\n     * Sets whether or not the y-dimension is reflected (negated) in the output.\n     * @param reflect Whether or not the y-dimension is reflected (negated) in the output.\n     */\n    reflectY(reflect: boolean): this;\n\n    /**\n     * Returns the current rotation [lambda, phi, gamma] specifying the rotation angles in degrees about each spherical axis.\n     * (These correspond to yaw, pitch and roll.) which defaults [0, 0, 0].\n     */\n    rotate(): [number, number, number];\n\n    /**\n     * Sets the projection’s three-axis rotation to the specified angles, which must be a two- or three-element array of numbers.\n     *\n     * @param angles  A two- or three-element array of numbers [lambda, phi, gamma] specifying the rotation angles in degrees about each spherical axis.\n     * (These correspond to yaw, pitch and roll.) If the rotation angle gamma is omitted, it defaults to 0.\n     */\n    rotate(angles: [number, number] | [number, number, number]): this;\n\n    /**\n     * Returns the projection’s current resampling precision which defaults to square root of 0.5.\n     * This value corresponds to the Douglas–Peucker distance.\n     */\n    precision(): number;\n    /**\n     * Sets the threshold for the projection’s adaptive resampling to the specified value in pixels and returns the projection.\n     * This value corresponds to the Douglas–Peucker distance.\n     *\n     * @param precision A numeric value in pixels to use as the threshold for the projection’s adaptive resampling.\n     */\n    precision(precision: number): this;\n\n    /**\n     * Sets the projection’s scale and translate to fit the specified GeoJSON object in the center of the given extent.\n     * The extent is specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left side of the bounding box, y₀ is the top, x₁ is the right and y₁ is the bottom.\n     * Returns the projection.\n     */\n    fitExtent(\n        extent: [[number, number], [number, number]],\n        object: ExtendedFeature | ExtendedFeatureCollection | GeoGeometryObjects | ExtendedGeometryCollection,\n    ): this;\n\n    /**\n     * A convenience method for projection.fitExtent where the top-left corner of the extent is [0, 0].\n     */\n    fitSize(\n        size: [number, number],\n        object: ExtendedFeature | ExtendedFeatureCollection | GeoGeometryObjects | ExtendedGeometryCollection,\n    ): this;\n\n    /**\n     * A convenience method for projection.fitSize where the height is automatically chosen from the aspect ratio of object and the given constraint on width.\n     */\n    fitWidth(\n        width: number,\n        object: ExtendedFeature | ExtendedFeatureCollection | GeoGeometryObjects | ExtendedGeometryCollection,\n    ): this;\n\n    /**\n     * A convenience method for projection.fitSize where the width is automatically chosen from the aspect ratio of object and the given constraint on height.\n     */\n    fitHeight(\n        height: number,\n        object: ExtendedFeature | ExtendedFeatureCollection | GeoGeometryObjects | ExtendedGeometryCollection,\n    ): this;\n}\n\n/**\n * A Conic Projection\n */\nexport interface GeoConicProjection extends GeoProjection {\n    /**\n     * Return the standard parallels for the conic projection in degrees.\n     */\n    parallels(): [number, number];\n    /**\n     * Set the standard parallels for the conic projection in degrees and return the projection.\n     *\n     * @param value A two-dimensional array representing the standard parallels in degrees.\n     */\n    parallels(value: [number, number]): this;\n}\n\n// geoPath ==============================================================\n\n/**\n * A minimal rendering context for a GeoPath generator. The minimum implemented\n * methods are a subset of the CanvasRenderingContext2D API.\n *\n * For reference to the CanvasRenderingContext2D see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D\n */\nexport interface GeoContext {\n    /**\n     * Adds an arc to the path with center point (x, y) and radius r starting at startAngle and ending at endAngle.\n     * The arc is drawn in clockwise direction by default.\n     *\n     * @param x x-coordinate of arc center point.\n     * @param y y-coordinate of arc center point.\n     * @param radius Radius of arc.\n     * @param startAngle The starting angle of the arc, measured clockwise from the positive x axis and expressed in radians.\n     * @param endAngle The end angle of the arc, measured clockwise from the positive x axis and expressed in radians.\n     * @param anticlockwise Optional boolean flag, if true the arc is drawn counter-clockwise between the two angles.\n     */\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\n\n    /**\n     * Start a new path by emptying the list of sub-paths.\n     */\n    beginPath(): void;\n\n    /**\n     * Causes the point of the pen to move back to the start of the current sub-path.\n     * It tries to draw a straight line from the current point to the start.\n     * If the shape has already been closed or has only one point, this function does nothing.\n     */\n    closePath(): void;\n\n    /**\n     * Connects the last point in the sub-path to the x, y coordinates with a straight line (but does not actually draw it).\n     *\n     * @param x The x-coordinate for the end of the line.\n     * @param y The y-coordinate for the end of the line.\n     */\n    lineTo(x: number, y: number): void;\n\n    /**\n     * Move the starting point of a new sub-path to the (x, y) coordinates.\n     *\n     * @param x The x-coordinate for the new starting point.\n     * @param y The y-coordinate for the new starting point.\n     */\n    moveTo(x: number, y: number): void;\n}\n\n/**\n * A Geo Path generator\n *\n * The first generic corresponds to the \"this\"-context within which the geo path generator will be invoked.\n * This could be e.g. the DOMElement bound to \"this\" when using selection.attr(\"d\", ...) with the path generator.\n *\n * The second generic corresponds to the type of the DatumObject which will be passed into the geo path generator for rendering.\n */\nexport interface GeoPath<This = any, DatumObject extends GeoPermissibleObjects = GeoPermissibleObjects> {\n    /**\n     * Renders the given object, which may be any GeoJSON feature or geometry object:\n     *\n     * + Point - a single position.\n     * + MultiPoint - an array of positions.\n     * + LineString - an array of positions forming a continuous line.\n     * + MultiLineString - an array of arrays of positions forming several lines.\n     * + Polygon - an array of arrays of positions forming a polygon (possibly with holes).\n     * + MultiPolygon - a multidimensional array of positions forming multiple polygons.\n     * + GeometryCollection - an array of geometry objects.\n     * + Feature - a feature containing one of the above geometry objects.\n     * + FeatureCollection - an array of feature objects.\n     *\n     * The type Sphere is also supported, which is useful for rendering the outline of the globe; a sphere has no coordinates.\n     *\n     * Any additional arguments are passed along to the pointRadius accessor.\n     *\n     * IMPORTANT: If the rendering context of the geoPath generator is null,\n     * then the geoPath is returned as an SVG path data string.\n     *\n     * Separate path elements are typically slower than a single path element. However, distinct path elements are useful for styling and interaction (e.g., click or mouseover).\n     * Canvas rendering (see path.context) is typically faster than SVG, but requires more effort to implement styling and interaction.\n     *\n     * The first generic type of the GeoPath generator used, must correspond to the \"this\" context bound to the function upon invocation.\n     *\n     * @param object An object to be rendered.\n     */\n    (this: This, object: DatumObject, ...args: any[]): string | null;\n    /**\n     * Renders the given object, which may be any GeoJSON feature or geometry object:\n     *\n     * + Point - a single position.\n     * + MultiPoint - an array of positions.\n     * + LineString - an array of positions forming a continuous line.\n     * + MultiLineString - an array of arrays of positions forming several lines.\n     * + Polygon - an array of arrays of positions forming a polygon (possibly with holes).\n     * + MultiPolygon - a multidimensional array of positions forming multiple polygons.\n     * + GeometryCollection - an array of geometry objects.\n     * + Feature - a feature containing one of the above geometry objects.\n     * + FeatureCollection - an array of feature objects.\n     *\n     * The type Sphere is also supported, which is useful for rendering the outline of the globe; a sphere has no coordinates.\n     *\n     * Any additional arguments are passed along to the pointRadius accessor.\n     *\n     * IMPORTANT: If the geoPath generator has been configured with a rendering context,\n     * then the geoPath is rendered to this context as a sequence of path method calls and this function returns void.\n     *\n     * Separate path elements are typically slower than a single path element. However, distinct path elements are useful for styling and interaction (e.g., click or mouseover).\n     * Canvas rendering (see path.context) is typically faster than SVG, but requires more effort to implement styling and interaction.\n     *\n     * The first generic type of the GeoPath generator used, must correspond to the \"this\" context bound to the function upon invocation.\n     *\n     * @param object An object to be rendered.\n     */\n    (this: This, object: DatumObject, ...args: any[]): void;\n\n    /**\n     * Returns the projected planar area (typically in square pixels) for the specified GeoJSON object.\n     * Point, MultiPoint, LineString and MultiLineString geometries have zero area. For Polygon and MultiPolygon geometries,\n     * this method first computes the area of the exterior ring, and then subtracts the area of any interior holes.\n     * This method observes any clipping performed by the projection; see projection.clipAngle and projection.clipExtent. This is the planar equivalent of d3.geoArea.\n     *\n     * @param object An object for which the area is to be calculated.\n     */\n    area(object: DatumObject): number;\n\n    /**\n     * Returns the projected planar bounding box (typically in pixels) for the specified GeoJSON object.\n     * The bounding box is represented by a two-dimensional array: [[x₀, y₀], [x₁, y₁]], where x₀ is the minimum x-coordinate, y₀ is the minimum y-coordinate,\n     * x₁ is maximum x-coordinate, and y₁ is the maximum y-coordinate.\n     *\n     * This is handy for, say, zooming in to a particular feature. (Note that in projected planar coordinates,\n     * the minimum latitude is typically the maximum y-value, and the maximum latitude is typically the minimum y-value.)\n     * This method observes any clipping performed by the projection; see projection.clipAngle and projection.clipExtent. This is the planar equivalent of d3.geoBounds.\n     *\n     * @param object An object for which the bounds are to be calculated.\n     */\n    bounds(object: DatumObject): [[number, number], [number, number]];\n\n    /**\n     * Returns the projected planar centroid (typically in pixels) for the specified GeoJSON object.\n     * This is handy for, say, labeling state or county boundaries, or displaying a symbol map.\n     * For example, a noncontiguous cartogram might scale each state around its centroid.\n     * This method observes any clipping performed by the projection; see projection.clipAngle and projection.clipExtent. This is the planar equivalent of d3.geoCentroid.\n     *\n     * @param object An object for which the centroid is to be calculated.\n     */\n    centroid(object: DatumObject): [number, number];\n\n    /**\n     * Returns the projected planar length (typically in pixels) for the specified GeoJSON object.\n     * Point and MultiPoint geometries have zero length. For Polygon and MultiPolygon geometries, this method computes the summed length of all rings.\n     *\n     * This method observes any clipping performed by the projection; see projection.clipAngle and projection.clipExtent. This is the planar equivalent of d3.geoLength.\n     *\n     * @param object An object for which the measure is to be calculated.\n     */\n    measure(object: DatumObject): number;\n\n    /**\n     * Returns the current render context which defaults to null.\n     *\n     * Use the generic to cast the return type of the rendering context, if it is known for a specific application.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    context<C extends GeoContext | null>(): C;\n\n    /**\n     * sets the current render context and returns the path generator.\n     * If the context is null, then the path generator will return an SVG path string;\n     * if the context is non-null, the path generator will instead call methods on the specified context to render geometry.\n     */\n    context(context: null | GeoContext): this;\n\n    /**\n     * Get the current projection. The generic parameter can be used to cast the result to the\n     * correct, known type of the projection, e.g. GeoProjection or GeoConicProjection. Otherwise,\n     * the return type defaults to the minimum type requirement for a projection which\n     * can be passed into a GeoPath.\n     *\n     * Use the generic to cast the return type of the projection, if it is known for a specific application.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    projection<P extends GeoConicProjection | GeoProjection | GeoStreamWrapper | null>(): P;\n\n    /**\n     * Sets the current projection to the specified projection.\n     * The null projection represents the identity transformation: the input geometry is not projected and is instead rendered directly in raw coordinates.\n     * This can be useful for fast rendering of pre-projected geometry, or for fast rendering of the equirectangular projection.\n     */\n    projection(projection: null | GeoProjection | GeoStreamWrapper): this;\n\n    /**\n     * Returns the current radius or radius accessor used to determine the radius for the display of Point and MultiPoint geometries.\n     * The default is a constant radius of 4.5.\n     */\n    pointRadius(): ((this: This, object: DatumObject, ...args: any[]) => number) | number;\n\n    /**\n     * Sets the radius used to display Point and MultiPoint geometries to the specified number.\n     * While the radius is commonly specified as a number constant, it may also be specified as a function which is computed per feature, being passed the any arguments passed to the path generator.\n     * For example, if your GeoJSON data has additional properties, you might access those properties inside the radius function to vary the point size;\n     * alternatively, you could d3.symbol and a projection for greater flexibility.\n     */\n    pointRadius(value: number | ((this: This, object: DatumObject, ...args: any[]) => number)): this;\n\n    /**\n     * Returns the current number of digits, which defaults to 3.\n     */\n    digits(): number;\n    /**\n     * Sets the number of fractional digits for coordinates generated in SVG path strings.\n     * @param digits New amount of digits\n     */\n    digits(digits: number): this;\n}\n\n/**\n * Creates a new geographic path generator.\n *\n * The default projection is the null projection. The null projection represents the identity transformation, i.e.\n * the input geometry is not projected and is instead rendered directly in raw coordinates.\n * This can be useful for fast rendering of pre-projected geometry, or for fast rendering of the equirectangular projection.\n *\n * The default context is null, which implies that the path generator will return an SVG path string.\n *\n * @param projection An (optional) current projection to be used. Typically this is one of D3’s built-in geographic projections;\n * however, any object that exposes a projection.stream function can be used, enabling the use of custom projections.\n * See D3’s transforms for more examples of arbitrary geometric transformations. Setting the projection to \"null\" uses the identity projection. The default  value is \"null\", the identity projection.\n * @param context An (optional) rendering context to be used. If a context is provided, it must at least implement the interface described by GeoContext, a subset of the CanvasRenderingContext2D API.\n * Setting the context to \"null\" means that the path generator will return an SVG path string representing the to be rendered object. The default is \"null\".\n */\nexport function geoPath(projection?: GeoProjection | GeoStreamWrapper | null, context?: GeoContext | null): GeoPath;\n/**\n * Creates a new geographic path generator with the default settings.\n *\n * The default projection is the null projection. The null projection represents the identity transformation:\n * the input geometry is not projected and is instead rendered directly in raw coordinates.\n * This can be useful for fast rendering of pre-projected geometry, or for fast rendering of the equirectangular projection.\n *\n * The default context is null, which implies that the path generator will return an SVG path string.\n *\n * The generic corresponds to the type of the DatumObject which will be passed into the geo path generator for rendering\n *\n * @param projection An (optional) current projection to be used. Typically this is one of D3’s built-in geographic projections;\n * however, any object that exposes a projection.stream function can be used, enabling the use of custom projections.\n * See D3’s transforms for more examples of arbitrary geometric transformations. Setting the projection to \"null\" uses the identity projection. The default  value is \"null\", the identity projection.\n * @param context An (optional) rendering context to be used. If a context is provided, it must at least implement the interface described by GeoContext, a subset of the CanvasRenderingContext2D API.\n * Setting the context to \"null\" means that the path generator will return an SVG path string representing the to be rendered object. The default is \"null\".\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function geoPath<DatumObject extends GeoPermissibleObjects>(\n    projection?: GeoProjection | GeoStreamWrapper | null,\n    context?: GeoContext | null,\n): GeoPath<any, DatumObject>;\n/**\n * Creates a new geographic path generator with the default settings.\n *\n * The default projection is the null projection. The null projection represents the identity transformation:\n * the input geometry is not projected and is instead rendered directly in raw coordinates.\n * This can be useful for fast rendering of pre-projected geometry, or for fast rendering of the equirectangular projection.\n *\n * The default context is null, which implies that the path generator will return an SVG path string.\n *\n * The first generic corresponds to the \"this\"-context within which the geo path generator will be invoked.\n * This could be e.g. the DOMElement bound to \"this\" when using selection.attr(\"d\", ...) with the path generator.\n *\n * The second generic corresponds to the type of the DatumObject which will be passed into the geo path generator for rendering.\n *\n * @param projection An (optional) current projection to be used. Typically this is one of D3’s built-in geographic projections;\n * however, any object that exposes a projection.stream function can be used, enabling the use of custom projections.\n * See D3’s transforms for more examples of arbitrary geometric transformations. Setting the projection to \"null\" uses the identity projection. The default  value is \"null\", the identity projection.\n * @param context An (optional) rendering context to be used. If a context is provided, it must at least implement the interface described by GeoContext, a subset of the CanvasRenderingContext2D API.\n * Setting the context to \"null\" means that the path generator will return an SVG path string representing the to be rendered object. The default is \"null\".\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function geoPath<This, DatumObject extends GeoPermissibleObjects>(\n    projection?: GeoProjection | GeoStreamWrapper | null,\n    context?: GeoContext | null,\n): GeoPath<This, DatumObject>;\n\n// geoProjection ==========================================================\n\n/**\n * Constructs a new projection from the specified raw projection, project.\n * The project function takes the longitude and latitude of a given point in radians,\n * often referred to as lambda (λ) and phi (φ), and returns a two-element array [x, y] representing its unit projection.\n * The project function does not need to scale or translate the point, as these are applied automatically by projection.scale, projection.translate, and projection.center.\n * Likewise, the project function does not need to perform any spherical rotation, as projection.rotate is applied prior to projection.\n *\n * If the project function exposes an invert method, the returned projection will also expose projection.invert.\n */\nexport function geoProjection(project: GeoRawProjection): GeoProjection;\n\n// geoProjectionMutator ====================================================\n\n/**\n * Constructs a new projection from the specified raw projection factory and returns a mutate function to call whenever the raw projection changes.\n * The factory must return a raw projection. The returned mutate function returns the wrapped projection.\n *\n * When creating a mutable projection, the mutate function is typically not exposed.\n */\nexport function geoProjectionMutator(factory: (...args: any[]) => GeoRawProjection): () => GeoProjection;\n\n// Pre-Defined Projections and Raw Projections =============================\n\n// Azimuthal Projections ---------------------------------------------------\n\n/**\n * The azimuthal equal-area projection.\n */\nexport function geoAzimuthalEqualArea(): GeoProjection;\n\n/**\n * The raw azimuthal equal-area projection.\n */\nexport function geoAzimuthalEqualAreaRaw(): GeoRawProjection;\n\n/**\n * The azimuthal equidistant projection.\n */\nexport function geoAzimuthalEquidistant(): GeoProjection;\n/**\n * The raw azimuthal equidistant projection.\n */\nexport function geoAzimuthalEquidistantRaw(): GeoRawProjection;\n\n/**\n * The gnomonic projection.\n */\nexport function geoGnomonic(): GeoProjection;\n\n/**\n * The raw gnomonic projection.\n */\nexport function geoGnomonicRaw(): GeoRawProjection;\n\n/**\n * The orthographic projection.\n */\nexport function geoOrthographic(): GeoProjection;\n\n/**\n * The raw orthographic projection.\n */\nexport function geoOrthographicRaw(): GeoRawProjection;\n\n/**\n * The stereographic projection.\n */\nexport function geoStereographic(): GeoProjection;\n\n/**\n * The raw stereographic projection.\n */\nexport function geoStereographicRaw(): GeoRawProjection;\n\n/**\n * The Equal Eartch projection, by Bojan Šavrič et al., 2018.\n */\nexport function geoEqualEarth(): GeoProjection;\n\n/**\n * The raw Equal Earth projection, by Bojan Šavrič et al., 2018.\n */\nexport function geoEqualEarthRaw(): GeoRawProjection;\n\n// Composite Projections ---------------------------------------------------\n\n/**\n * A U.S.-centric composite projection of three d3.geoConicEqualArea projections: d3.geoAlbers is used for the lower forty-eight states,\n * and separate conic equal-area projections are used for Alaska and Hawaii. Note that the scale for Alaska is diminished: it is projected at 0.35× its true relative area.\n *\n * Composite consist of several projections that are composed into a single display. The constituent projections have fixed clip, center and rotation,\n * and thus composite projections do not support projection.center, projection.rotate, projection.clipAngle, or projection.clipExtent.\n */\nexport function geoAlbersUsa(): GeoProjection;\n\n// Conic Projections -------------------------------------------------------\n\n/**\n * The Albers’ equal area-conic projection. This is a U.S.-centric configuration of d3.geoConicEqualArea.\n */\nexport function geoAlbers(): GeoConicProjection;\n\n/**\n * The conic conformal projection. The parallels default to [30°, 30°] resulting in flat top.\n */\nexport function geoConicConformal(): GeoConicProjection;\n\n/**\n * The raw conic conformal projection.\n */\nexport function geoConicConformalRaw(phi0: number, phi1: number): GeoRawProjection;\n\n/**\n * The Albers’ equal-area conic projection.\n */\nexport function geoConicEqualArea(): GeoConicProjection;\n\n/**\n * The raw Albers’ equal-area conic projection.\n */\nexport function geoConicEqualAreaRaw(phi0: number, phi1: number): GeoRawProjection;\n\n/**\n * The conic equidistant projection.\n */\nexport function geoConicEquidistant(): GeoConicProjection;\n\n/**\n * The raw conic equidistant projection.\n */\nexport function geoConicEquidistantRaw(phi0: number, phi1: number): GeoRawProjection;\n\n// Cylindrical Projections ------------------------------------------------\n\n/**\n * The equirectangular (plate carrée) projection.\n */\nexport function geoEquirectangular(): GeoProjection;\n\n/**\n * The raw equirectangular (plate carrée) projection.\n */\nexport function geoEquirectangularRaw(): GeoRawProjection;\n\n/**\n * The spherical Mercator projection.\n * Defines a default projection.clipExtent such that the world is projected to a square, clipped to approximately ±85° latitude.\n */\nexport function geoMercator(): GeoProjection;\n/**\n * The raw spherical Mercator projection.\n */\nexport function geoMercatorRaw(): GeoRawProjection;\n\n/**\n * The transverse spherical Mercator projection.\n * Defines a default projection.clipExtent such that the world is projected to a square, clipped to approximately ±85° latitude.\n */\nexport function geoTransverseMercator(): GeoProjection;\n\n/**\n * The raw transverse spherical Mercator projection.\n */\nexport function geoTransverseMercatorRaw(): GeoRawProjection;\n\n/**\n * The Natural Earth projection is a pseudocylindrical projection designed by Tom Patterson. It is neither conformal nor equal-area, but appealing to the eye for small-scale maps of the whole world.\n */\nexport function geoNaturalEarth1(): GeoProjection;\n\n/**\n * The raw pseudo-cylindircal Natural Earth projection.\n */\nexport function geoNaturalEarth1Raw(): GeoRawProjection;\n\n// ----------------------------------------------------------------------\n// Projection Transforms\n// ----------------------------------------------------------------------\n\n// geoTransform(...) ====================================================\n\n/**\n * A Prototype interface which serves as a template for the implementation of a geometric transform using geoTransform(...)\n * It serves as a reference for the custom methods which can be passed into geoTransform as argument to crete a generalized\n * transform projection.\n */\nexport interface GeoTransformPrototype {\n    /**\n     * Indicates the end of a line or ring. Within a polygon, indicates the end of a ring.\n     * Unlike GeoJSON, the redundant closing coordinate of a ring is not indicated via point, and instead is implied via lineEnd within a polygon.\n     */\n    lineEnd?(this: this & { stream: GeoStream }): void;\n    /**\n     * Indicates the start of a line or ring. Within a polygon, indicates the start of a ring. The first ring of a polygon is the exterior ring, and is typically clockwise.\n     * Any subsequent rings indicate holes in the polygon, and are typically counterclockwise.\n     */\n    lineStart?(this: this & { stream: GeoStream }): void;\n    /**\n     * Indicates a point with the specified coordinates x and y (and optionally z). The coordinate system is unspecified and implementation-dependent;\n     * for example, projection streams require spherical coordinates in degrees as input. Outside the context of a polygon or line,\n     * a point indicates a point geometry object (Point or MultiPoint). Within a line or polygon ring, the point indicates a control point.\n     *\n     * @param x x-coordinate of point.\n     * @param y y-coordinate of point.\n     * @param z Optional z-coordinate of point.\n     */\n    point?(this: this & { stream: GeoStream }, x: number, y: number, z?: number): void;\n    /**\n     * Indicates the end of a polygon.\n     */\n    polygonEnd?(this: this & { stream: GeoStream }): void;\n    /**\n     * Indicates the start of a polygon. The first line of a polygon indicates the exterior ring, and any subsequent lines indicate interior holes.\n     */\n    polygonStart?(this: this & { stream: GeoStream }): void;\n    /**\n     * Indicates the sphere (the globe; the unit sphere centered at ⟨0,0,0⟩).\n     */\n    sphere?(this: this & { stream: GeoStream }): void;\n}\n\n// TODO: Review whether GeoStreamWrapper should be included into return value union type, i.e. ({ stream: (s: GeoStream) => (T & GeoStream & GeoStreamWrapper)})?\n// It probably should be omitted for purposes of this API. The stream method added to (T & GeoStream) is more of a private member used internally to\n// implement the Transform factory\n\n/**\n * Defines an arbitrary transform using the methods defined on the specified methods object.\n * Any undefined methods will use pass-through methods that propagate inputs to the output stream.\n *\n * @param methods An object with custom method implementations, which are used to create a transform projection.\n */\nexport function geoTransform<T extends GeoTransformPrototype>(methods: T): { stream(s: GeoStream): T & GeoStream };\n\n// geoIdentity() =================================================================\n\n/**\n * @deprecated Misspelled name. Use GeoIdentityTransform.\n */\nexport type GeoIdentityTranform = GeoIdentityTransform;\n\n/**\n * Geo Identity Transform\n */\nexport interface GeoIdentityTransform extends GeoStreamWrapper {\n    /**\n     * Returns a new array [x, y] (typically in pixels) representing the projected point of the given point.\n     * The point must be specified as a two-element array [longitude, latitude] in degrees.\n     * May return null if the specified point has no defined projected position, such as when the point is outside the clipping bounds of the projection.\n     *\n     * @param point A point specified as a two-dimensional array [longitude, latitude] in degrees.\n     */\n    (point: [number, number]): [number, number] | null;\n\n    /**\n     * Returns a new array [longitude, latitude] in degrees representing the unprojected point of the given projected point.\n     * May return null if the specified point has no defined projected position, such as when the point is outside the clipping bounds of the projection.\n     *\n     * @param point The projected point, specified as a two-element array [x, y] (typically in pixels).\n     */\n    invert(point: [number, number]): [number, number] | null;\n\n    /**\n     * Returns the current cartesian clipping function.\n     * Post-clipping occurs on the plane, when a projection is bounded to a certain extent such as a rectangle.\n     */\n    postclip(): (stream: GeoStream) => GeoStream;\n    /**\n     * Sets the projection’s cartesian clipping to the specified function and returns the projection.\n     *\n     * @param postclip A cartesian clipping function. Clipping functions are implemented as transformations of a projection stream.\n     * Post-clipping operates on planar coordinates, in pixels.\n     */\n    postclip(postclip: (stream: GeoStream) => GeoStream): this;\n\n    /**\n     * Returns the current scale factor.\n     *\n     * The scale factor corresponds linearly to the distance between projected points; however, absolute scale factors are not equivalent across projections.\n     */\n    scale(): number;\n    /**\n     * Sets the projection’s scale factor to the specified value and returns the projection.\n     * The scale factor corresponds linearly to the distance between projected points; however, absolute scale factors are not equivalent across projections.\n     *\n     * @param scale Scale factor to be used for the projection.\n     */\n    scale(scale: number): this;\n\n    /**\n     * Returns the current translation offset.\n     * The translation offset determines the pixel coordinates of the projection’s center.\n     */\n    translate(): [number, number];\n    /**\n     * Sets the projection’s translation offset to the specified two-element array [tx, ty] and returns the projection.\n     * The translation offset determines the pixel coordinates of the projection’s center.\n     *\n     * @param point A two-element array [tx, ty] specifying the translation offset.\n     */\n    translate(point: [number, number]): this;\n\n    /**\n     * Returns the projection’s current angle, which defaults to 0°.\n     */\n    angle(): number;\n    /**\n     * Sets the projection’s post-projection planar rotation angle to the specified angle in degrees and returns the projection.\n     * @param angle The new rotation angle of the projection.\n     */\n    angle(angle: number): this;\n\n    /**\n     * Sets the projection’s scale and translate to fit the specified GeoJSON object in the center of the given extent.\n     * The extent is specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left side of the bounding box, y₀ is the top, x₁ is the right and y₁ is the bottom. Returns the projection.\n     */\n    fitExtent(\n        extent: [[number, number], [number, number]],\n        object: ExtendedFeature | ExtendedFeatureCollection | GeoGeometryObjects | ExtendedGeometryCollection,\n    ): this;\n\n    /**\n     * A convenience method for projection.fitExtent where the top-left corner of the extent is [0, 0].\n     */\n    fitSize(\n        size: [number, number],\n        object: ExtendedFeature | ExtendedFeatureCollection | GeoGeometryObjects | ExtendedGeometryCollection,\n    ): this;\n\n    /**\n     * Returns the current viewport clip extent which defaults to null.\n     */\n    clipExtent(): [[number, number], [number, number]] | null;\n    /**\n     * Sets the projection’s viewport clip extent to the specified bounds in pixels and returns the projection.\n     * The extent bounds are specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left-side of the viewport, y₀ is the top, x₁ is the right and y₁ is the bottom.\n     * If extent is null, no viewport clipping is performed.\n     */\n    clipExtent(extent: null | [[number, number], [number, number]]): this;\n\n    /**\n     * Returns true if x-reflection is enabled, which defaults to false.\n     */\n    reflectX(): boolean;\n    /**\n     * Sets whether or not the x-dimension is reflected (negated) in the output.\n     *\n     * @param reflect true = reflect x-dimension, false = do not reflect x-dimension.\n     */\n    reflectX(reflect: boolean): this;\n\n    /**\n     * Returns true if y-reflection is enabled, which defaults to false.\n     */\n    reflectY(): boolean;\n    /**\n     * Sets whether or not the y-dimension is reflected (negated) in the output.\n     *\n     * This is especially useful for transforming from standard spatial reference systems,\n     * which treat positive y as pointing up, to display coordinate systems such as Canvas and SVG,\n     * which treat positive y as pointing down.\n     *\n     * @param reflect true = reflect y-dimension, false = do not reflect y-dimension.\n     */\n    reflectY(reflect: boolean): this;\n}\n\n/**\n * Returns the identity transform which can be used to scale, translate and clip planar geometry.\n */\nexport function geoIdentity(): GeoIdentityTransform;\n\n// ----------------------------------------------------------------------\n// Clipping Functions\n// ----------------------------------------------------------------------\n\n/**\n * A clipping function transforming a stream such that geometries (lines or polygons) that cross the antimeridian line are cut in two, one on each side.\n * Typically used for pre-clipping.\n */\nexport function geoClipAntimeridian(stream: GeoStream): GeoStream;\n\n/**\n * Generates a clipping function transforming a stream such that geometries are bounded by a small circle of radius angle around the projection’s center.\n * Typically used for pre-clipping.\n *\n * @param angle A clipping angle.\n */\nexport function geoClipCircle(angle: number): (stream: GeoStream) => GeoStream;\n\n/**\n * Generates a clipping function transforming a stream such that geometries are bounded by a rectangle of coordinates [[x0, y0], [x1, y1]].\n * Typically used for post-clipping.\n *\n * @param x0 x0 coordinate.\n * @param y0 y0 coordinate.\n * @param x1 x1 coordinate.\n * @param y1 y1 coordinate.\n */\nexport function geoClipRectangle(x0: number, y0: number, x1: number, y1: number): (stream: GeoStream) => GeoStream;\n\n// Types from d3-hierarchy\n// Last module patch version validated against: 3.1.2\n\n// -----------------------------------------------------------------------\n// Hierarchy\n// -----------------------------------------------------------------------\n\nexport interface HierarchyLink<Datum> {\n    /**\n     * The source of the link.\n     */\n    source: HierarchyNode<Datum>;\n\n    /**\n     * The target of the link.\n     */\n    target: HierarchyNode<Datum>;\n}\n\nexport interface HierarchyNode<Datum> {\n    new(data: Datum): this;\n\n    /**\n     * The associated data, as specified to the constructor.\n     */\n    data: Datum;\n\n    /**\n     * Zero for the root node, and increasing by one for each descendant generation.\n     */\n    readonly depth: number;\n\n    /**\n     * Zero for leaf nodes, and the greatest distance from any descendant leaf for internal nodes.\n     */\n    readonly height: number;\n\n    /**\n     * The parent node, or null for the root node.\n     */\n    parent: this | null;\n\n    /**\n     * An array of child nodes, if any; undefined for leaf nodes.\n     */\n    children?: this[] | undefined;\n\n    /**\n     * Aggregated numeric value as calculated by `sum(value)` or `count()`, if previously invoked.\n     */\n    readonly value?: number | undefined;\n\n    /**\n     * Optional node id string set by `StratifyOperator`, if hierarchical data was created from tabular data using stratify().\n     */\n    readonly id?: string | undefined;\n\n    /**\n     * The x position of this node. Set after a tree has been laid out by `tree` or `cluster`.\n     *\n     * ```\n     * const root = d3.hierarchy(datum);\n     * const treeLayout = d3.tree();\n     * treeLayout(root);\n     * // x and y are now set on root and its descendants\n     * ```\n     */\n    x?: number | undefined;\n\n    /**\n     * The y position of this node. Set after a tree has been laid out by `tree` or `cluster`.\n     *\n     * ```\n     * const root = d3.hierarchy(datum);\n     * const treeLayout = d3.tree();\n     * treeLayout(root);\n     * // x and y are now set on root and its descendants\n     * ```\n     */\n    y?: number | undefined;\n\n    /**\n     * Returns the array of ancestors nodes, starting with this node, then followed by each parent up to the root.\n     */\n    ancestors(): this[];\n\n    /**\n     * Returns the array of descendant nodes, starting with this node, then followed by each child in topological order.\n     */\n    descendants(): this[];\n\n    /**\n     * Returns the array of leaf nodes in traversal order; leaves are nodes with no children.\n     */\n    leaves(): this[];\n\n    /**\n     * Returns the first node in the hierarchy from this node for which the specified filter returns a truthy value. undefined if no such node is found.\n     * @param filter Filter.\n     */\n    find(filter: (node: this) => boolean): this | undefined;\n\n    /**\n     * Returns the shortest path through the hierarchy from this node to the specified target node.\n     * The path starts at this node, ascends to the least common ancestor of this node and the target node, and then descends to the target node.\n     *\n     * @param target The target node.\n     */\n    path(target: this): this[];\n\n    /**\n     * Returns an array of links for this node, where each link is an object that defines source and target properties.\n     * The source of each link is the parent node, and the target is a child node.\n     */\n    links(): Array<HierarchyLink<Datum>>;\n\n    /**\n     * Evaluates the specified value function for this node and each descendant in post-order traversal, and returns this node.\n     * The `node.value` property of each node is set to the numeric value returned by the specified function plus the combined value of all descendants.\n     *\n     * @param value The value function is passed the node’s data, and must return a non-negative number.\n     */\n    sum(value: (d: Datum) => number): this;\n\n    /**\n     * Computes the number of leaves under this node and assigns it to `node.value`, and similarly for every descendant of node.\n     * If this node is a leaf, its count is one. Returns this node.\n     */\n    count(): this;\n\n    /**\n     * Sorts the children of this node, if any, and each of this node’s descendants’ children,\n     * in pre-order traversal using the specified compare function, and returns this node.\n     *\n     * @param compare The compare function is passed two nodes a and b to compare.\n     * If a should be before b, the function must return a value less than zero;\n     * if b should be before a, the function must return a value greater than zero;\n     * otherwise, the relative order of a and b are not specified. See `array.sort` for more.\n     */\n    sort(compare: (a: this, b: this) => number): this;\n\n    /**\n     * Returns an iterator over the node’s descendants in breadth-first order.\n     */\n    [Symbol.iterator](): Iterator<this>;\n\n    /**\n     * Invokes the specified function for node and each descendant in breadth-first order,\n     * such that a given node is only visited if all nodes of lesser depth have already been visited,\n     * as well as all preceding nodes of the same depth.\n     *\n     * @param func The specified function is passed the current descendant, the zero-based traversal index, and this node.\n     * @param that If that is specified, it is the this context of the callback.\n     */\n    each<T = undefined>(func: (this: T, node: this, index: number, thisNode: this) => void, that?: T): this;\n\n    /**\n     * Invokes the specified function for node and each descendant in post-order traversal,\n     * such that a given node is only visited after all of its descendants have already been visited.\n     *\n     * @param func The specified function is passed the current descendant, the zero-based traversal index, and this node.\n     * @param that If that is specified, it is the this context of the callback.\n     */\n    eachAfter<T = undefined>(func: (this: T, node: this, index: number, thisNode: this) => void, that?: T): this;\n\n    /**\n     * Invokes the specified function for node and each descendant in pre-order traversal,\n     * such that a given node is only visited after all of its ancestors have already been visited.\n     *\n     * @param func The specified function is passed the current descendant, the zero-based traversal index, and this node.\n     * @param that If that is specified, it is the this context of the callback.\n     */\n    eachBefore<T = undefined>(func: (this: T, node: this, index: number, thisNode: this) => void, that?: T): this;\n\n    /**\n     * Return a deep copy of the subtree starting at this node. The returned deep copy shares the same data, however.\n     * The returned node is the root of a new tree; the returned node’s parent is always null and its depth is always zero.\n     */\n    copy(): this;\n}\n\n/**\n * Constructs a root node from the specified hierarchical data.\n *\n * @param data The root specified data.\n * If *data* is a Map, it is implicitly converted to the entry [undefined, *data*],\n * and the children accessor instead defaults to `(d) => Array.isArray(d) ? d[1] : null;`.\n * @param children The specified children accessor function is invoked for each datum, starting with the root data,\n * and must return an iterable of data representing the children, if any.\n * If children is not specified, it defaults to: `(d) => d.children`.\n */\nexport function hierarchy<Datum>(\n    data: Datum,\n    children?: (d: Datum) => Iterable<Datum> | null | undefined,\n): HierarchyNode<Datum>;\n\n// -----------------------------------------------------------------------\n// Stratify\n// -----------------------------------------------------------------------\n\nexport interface StratifyOperator<Datum> {\n    /**\n     * Generates a new hierarchy from the specified tabular data. Each node in the returned object has a shallow copy of the properties\n     * from the corresponding data object, excluding the following reserved properties: id, parentId, children.\n     *\n     * @param data The root specified data.\n     * @throws Error on missing id, ambiguous id, cycle, multiple roots or no root.\n     */\n    (data: Datum[]): HierarchyNode<Datum>;\n\n    /**\n     * Returns the current id accessor, which defaults to: `(d) => d.id`.\n     */\n    id(): (d: Datum, i: number, data: Datum[]) => string | null | \"\" | undefined;\n    /**\n     * Sets the id accessor to the given function.\n     * The id accessor is invoked for each element in the input data passed to the stratify operator.\n     * The returned string is then used to identify the node's relationships in conjunction with the parent id.\n     * For leaf nodes, the id may be undefined, null or the empty string; otherwise, the id must be unique.\n     *\n     * @param id The id accessor.\n     */\n    id(id: (d: Datum, i: number, data: Datum[]) => string | null | \"\" | undefined): this;\n\n    /**\n     * Returns the current parent id accessor, which defaults to: `(d) => d.parentId`.\n     */\n    parentId(): (d: Datum, i: number, data: Datum[]) => string | null | \"\" | undefined;\n    /**\n     * Sets the parent id accessor to the given function.\n     * The parent id accessor is invoked for each element in the input data passed to the stratify operator.\n     * The returned string is then used to identify the node's relationships in conjunction with the id.\n     * For the root node, the parent id should be undefined, null or the empty string.\n     * There must be exactly one root node in the input data, and no circular relationships.\n     *\n     * @param parentId The parent id accessor.\n     */\n    parentId(parentId: (d: Datum, i: number, data: Datum[]) => string | null | \"\" | undefined): this;\n\n    /**\n     * Returns the current path accessor, which defaults to undefined.\n     */\n    path(): ((d: Datum, i: number, data: Datum[]) => string) | null | undefined;\n    /**\n     * If path is specified, sets the path accessor to the given function and returns this stratify operator.\n     * Otherwise, returns the current path accessor, which defaults to undefined.\n     * If a path accessor is set, the id and parentId arguments are ignored,\n     * and a unix-like hierarchy is computed on the slash-delimited strings\n     * returned by the path accessor, imputing parent nodes and ids as necessary.\n     *\n     * @param path The path accessor.\n     */\n    path(path: ((d: Datum, i: number, data: Datum[]) => string) | null | undefined): this;\n}\n\n/**\n * Constructs a new stratify operator with the default settings.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function stratify<Datum>(): StratifyOperator<Datum>;\n\n// -----------------------------------------------------------------------\n// Cluster\n// -----------------------------------------------------------------------\n\nexport interface HierarchyPointLink<Datum> {\n    /**\n     * The source of the link.\n     */\n    source: HierarchyPointNode<Datum>;\n\n    /**\n     * The target of the link.\n     */\n    target: HierarchyPointNode<Datum>;\n}\n\nexport interface HierarchyPointNode<Datum> extends HierarchyNode<Datum> {\n    /**\n     * The x-coordinate of the node.\n     */\n    x: number;\n\n    /**\n     * The y-coordinate of the node.\n     */\n    y: number;\n\n    /**\n     * Returns an array of links for this node, where each link is an object that defines source and target properties.\n     * The source of each link is the parent node, and the target is a child node.\n     */\n    links(): Array<HierarchyPointLink<Datum>>;\n}\n\nexport interface ClusterLayout<Datum> {\n    /**\n     * Lays out the specified root hierarchy.\n     * You may want to call `root.sort` before passing the hierarchy to the cluster layout.\n     *\n     * @param root The specified root hierarchy.\n     */\n    (root: HierarchyNode<Datum>): HierarchyPointNode<Datum>;\n\n    /**\n     * Returns the current layout size, which defaults to [1, 1]. A layout size of null indicates that a node size will be used instead.\n     */\n    size(): [number, number] | null;\n    /**\n     * Sets this cluster layout’s size to the specified [width, height] array and returns the cluster layout.\n     * The size represent an arbitrary coordinate system; for example, to produce a radial layout,\n     * a size of [360, radius] corresponds to a breadth of 360° and a depth of radius.\n     *\n     * @param size The specified two-element size array.\n     */\n    size(size: [number, number]): this;\n\n    /**\n     * Returns the current node size, which defaults to null. A node size of null indicates that a layout size will be used instead.\n     */\n    nodeSize(): [number, number] | null;\n    /**\n     * Sets this cluster layout’s node size to the specified [width, height] array and returns this cluster layout.\n     * When a node size is specified, the root node is always positioned at <0, 0>.\n     *\n     * @param size The specified two-element size array.\n     */\n    nodeSize(size: [number, number]): this;\n\n    /**\n     * Returns the current separation accessor, which defaults to: `(a, b) => a.parent == b.parent ? 1 : 2`.\n     */\n    separation(): (a: HierarchyPointNode<Datum>, b: HierarchyPointNode<Datum>) => number;\n    /**\n     * Sets the separation accessor to the specified function and returns this cluster layout.\n     * The separation accessor is used to separate neighboring leaves.\n     *\n     * @param separation The separation function is passed two leaves a and b, and must return the desired separation.\n     * The nodes are typically siblings, though the nodes may be more distantly related if the layout decides to place such nodes adjacent.\n     */\n    separation(separation: (a: HierarchyPointNode<Datum>, b: HierarchyPointNode<Datum>) => number): this;\n}\n\n/**\n * Creates a new cluster layout with default settings.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function cluster<Datum>(): ClusterLayout<Datum>;\n\n// -----------------------------------------------------------------------\n// Tree\n// -----------------------------------------------------------------------\n\nexport interface TreeLayout<Datum> {\n    /**\n     * Lays out the specified root hierarchy.\n     * You may want to call `root.sort` before passing the hierarchy to the tree layout.\n     *\n     * @param root The specified root hierarchy.\n     */\n    (root: HierarchyNode<Datum>): HierarchyPointNode<Datum>;\n\n    /**\n     * Returns the current layout size, which defaults to [1, 1]. A layout size of null indicates that a node size will be used instead.\n     */\n    size(): [number, number] | null;\n    /**\n     * Sets this tree layout’s size to the specified [width, height] array and returns the tree layout.\n     * The size represent an arbitrary coordinate system; for example, to produce a radial layout,\n     * a size of [360, radius] corresponds to a breadth of 360° and a depth of radius.\n     *\n     * @param size The specified two-element size array.\n     */\n    size(size: [number, number]): this;\n\n    /**\n     * Returns the current node size, which defaults to null. A node size of null indicates that a layout size will be used instead.\n     */\n    nodeSize(): [number, number] | null;\n    /**\n     * Sets this tree layout’s node size to the specified [width, height] array and returns this tree layout.\n     * When a node size is specified, the root node is always positioned at <0, 0>.\n     *\n     * @param size The specified two-element size array.\n     */\n    nodeSize(size: [number, number]): this;\n\n    /**\n     * Returns the current separation accessor, which defaults to: `(a, b) => a.parent == b.parent ? 1 : 2`.\n     */\n    separation(): (a: HierarchyPointNode<Datum>, b: HierarchyPointNode<Datum>) => number;\n    /**\n     * Sets the separation accessor to the specified function and returns this tree layout.\n     * The separation accessor is used to separate neighboring nodes.\n     *\n     * @param separation The separation function is passed two nodes a and b, and must return the desired separation.\n     * The nodes are typically siblings, though the nodes may be more distantly related if the layout decides to place such nodes adjacent.\n     */\n    separation(separation: (a: HierarchyPointNode<Datum>, b: HierarchyPointNode<Datum>) => number): this;\n}\n\n/**\n * Creates a new tree layout with default settings.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function tree<Datum>(): TreeLayout<Datum>;\n\n// -----------------------------------------------------------------------\n// Treemap\n// -----------------------------------------------------------------------\n\nexport interface HierarchyRectangularLink<Datum> {\n    /**\n     * The source of the link.\n     */\n    source: HierarchyRectangularNode<Datum>;\n\n    /**\n     * The target of the link.\n     */\n    target: HierarchyRectangularNode<Datum>;\n}\n\nexport interface HierarchyRectangularNode<Datum> extends HierarchyNode<Datum> {\n    /**\n     * The left edge of the rectangle.\n     */\n    x0: number;\n\n    /**\n     * The top edge of the rectangle\n     */\n    y0: number;\n\n    /**\n     * The right edge of the rectangle.\n     */\n    x1: number;\n\n    /**\n     * The bottom edge of the rectangle.\n     */\n    y1: number;\n\n    /**\n     * Returns an array of links for this node, where each link is an object that defines source and target properties.\n     * The source of each link is the parent node, and the target is a child node.\n     */\n    links(): Array<HierarchyRectangularLink<Datum>>;\n}\n\nexport interface TreemapLayout<Datum> {\n    /**\n     * Lays out the specified root hierarchy.\n     * You must call `root.sum` before passing the hierarchy to the treemap layout.\n     * You probably also want to call `root.sort` to order the hierarchy before computing the layout.\n     *\n     * @param root The specified root hierarchy.\n     */\n    (root: HierarchyNode<Datum>): HierarchyRectangularNode<Datum>;\n\n    /**\n     * Returns the current tiling method, which defaults to `d3.treemapSquarify` with the golden ratio.\n     */\n    tile(): (node: HierarchyRectangularNode<Datum>, x0: number, y0: number, x1: number, y1: number) => void;\n    /**\n     * Sets the tiling method to the specified function and returns this treemap layout.\n     *\n     * @param tile The specified tiling function.\n     */\n    tile(tile: (node: HierarchyRectangularNode<Datum>, x0: number, y0: number, x1: number, y1: number) => void): this;\n\n    /**\n     * Returns the current size, which defaults to [1, 1].\n     */\n    size(): [number, number];\n    /**\n     * Sets this treemap layout’s size to the specified [width, height] array and returns this treemap layout.\n     *\n     * @param size The specified two-element size array.\n     */\n    size(size: [number, number]): this;\n\n    /**\n     * Returns the current rounding state, which defaults to false.\n     */\n    round(): boolean;\n    /**\n     * Enables or disables rounding according to the given boolean and returns this treemap layout.\n     *\n     * @param round The specified boolean flag.\n     */\n    round(round: boolean): this;\n\n    /**\n     * Returns the current inner padding function.\n     */\n    padding(): (node: HierarchyRectangularNode<Datum>) => number;\n    /**\n     * Sets the inner and outer padding to the specified number and returns this treemap layout.\n     *\n     * @param padding The specified padding value.\n     */\n    padding(padding: number): this;\n    /**\n     * Sets the inner and outer padding to the specified function and returns this treemap layout.\n     *\n     * @param padding The specified padding function.\n     */\n    padding(padding: (node: HierarchyRectangularNode<Datum>) => number): this;\n\n    /**\n     * Returns the current inner padding function, which defaults to the constant zero.\n     */\n    paddingInner(): (node: HierarchyRectangularNode<Datum>) => number;\n    /**\n     * Sets the inner padding to the specified number and returns this treemap layout.\n     * The inner padding is used to separate a node’s adjacent children.\n     *\n     * @param padding The specified inner padding value.\n     */\n    paddingInner(padding: number): this;\n    /**\n     * Sets the inner padding to the specified function and returns this treemap layout.\n     * The function is invoked for each node with children, being passed the current node.\n     * The inner padding is used to separate a node’s adjacent children.\n     *\n     * @param padding The specified inner padding function.\n     */\n    paddingInner(padding: (node: HierarchyRectangularNode<Datum>) => number): this;\n\n    /**\n     * Returns the current top padding function.\n     */\n    paddingOuter(): (node: HierarchyRectangularNode<Datum>) => number;\n    /**\n     * Sets the top, right, bottom and left padding to the specified function and returns this treemap layout.\n     *\n     * @param padding The specified padding outer value.\n     */\n    paddingOuter(padding: number): this;\n    /**\n     * Sets the top, right, bottom and left padding to the specified function and returns this treemap layout.\n     *\n     * @param padding The specified padding outer function.\n     */\n    paddingOuter(padding: (node: HierarchyRectangularNode<Datum>) => number): this;\n\n    /**\n     * Returns the current top padding function, which defaults to the constant zero.\n     */\n    paddingTop(): (node: HierarchyRectangularNode<Datum>) => number;\n    /**\n     * Sets the top padding to the specified number and returns this treemap layout.\n     * The top padding is used to separate the top edge of a node from its children.\n     *\n     * @param padding The specified top padding value.\n     */\n    paddingTop(padding: number): this;\n    /**\n     * Sets the top padding to the specified function and returns this treemap layout.\n     * The function is invoked for each node with children, being passed the current node.\n     * The top padding is used to separate the top edge of a node from its children.\n     *\n     * @param padding The specified top padding function.\n     */\n    paddingTop(padding: (node: HierarchyRectangularNode<Datum>) => number): this;\n\n    /**\n     * Returns the current right padding function, which defaults to the constant zero.\n     */\n    paddingRight(): (node: HierarchyRectangularNode<Datum>) => number;\n    /**\n     * Sets the right padding to the specified number and returns this treemap layout.\n     * The right padding is used to separate the right edge of a node from its children.\n     *\n     * @param padding The specified right padding value.\n     */\n    paddingRight(padding: number): this;\n    /**\n     * Sets the right padding to the specified function and returns this treemap layout.\n     * The function is invoked for each node with children, being passed the current node.\n     * The right padding is used to separate the right edge of a node from its children.\n     *\n     * @param padding The specified right padding function.\n     */\n    paddingRight(padding: (node: HierarchyRectangularNode<Datum>) => number): this;\n\n    /**\n     * Returns the current bottom padding function, which defaults to the constant zero.\n     */\n    paddingBottom(): (node: HierarchyRectangularNode<Datum>) => number;\n    /**\n     * Sets the bottom padding to the specified number and returns this treemap layout.\n     * The bottom padding is used to separate the bottom edge of a node from its children.\n     *\n     * @param padding The specified bottom padding value.\n     */\n    paddingBottom(padding: number): this;\n    /**\n     * Sets the bottom padding to the specified function and returns this treemap layout.\n     * The function is invoked for each node with children, being passed the current node.\n     * The bottom padding is used to separate the bottom edge of a node from its children.\n     *\n     * @param padding The specified bottom padding function.\n     */\n    paddingBottom(padding: (node: HierarchyRectangularNode<Datum>) => number): this;\n\n    /**\n     * Returns the current left padding function, which defaults to the constant zero.\n     */\n    paddingLeft(): (node: HierarchyRectangularNode<Datum>) => number;\n    /**\n     * Sets the left padding to the specified number and returns this treemap layout.\n     * The left padding is used to separate the left edge of a node from its children.\n     *\n     * @param padding The specified left padding value.\n     */\n    paddingLeft(padding: number): this;\n    /**\n     * Sets the left padding to the specified function and returns this treemap layout.\n     * The function is invoked for each node with children, being passed the current node.\n     * The left padding is used to separate the left edge of a node from its children.\n     *\n     * @param padding The specified left padding function.\n     */\n    paddingLeft(padding: (node: HierarchyRectangularNode<Datum>) => number): this;\n}\n\n/**\n * Creates a new treemap layout with default settings.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function treemap<Datum>(): TreemapLayout<Datum>;\n\n// Tiling functions ------------------------------------------------------\n\n/**\n * Recursively partitions the specified nodes into an approximately-balanced binary tree,\n * choosing horizontal partitioning for wide rectangles and vertical partitioning for tall rectangles.\n */\nexport function treemapBinary(\n    node: HierarchyRectangularNode<any>,\n    x0: number,\n    y0: number,\n    x1: number,\n    y1: number,\n): void;\n\n/**\n * Divides the rectangular area specified by x0, y0, x1, y1 horizontally according the value of each of the specified node’s children.\n * The children are positioned in order, starting with the left edge (x0) of the given rectangle.\n * If the sum of the children’s values is less than the specified node’s value (i.e., if the specified node has a non-zero internal value),\n * the remaining empty space will be positioned on the right edge (x1) of the given rectangle.\n */\nexport function treemapDice(node: HierarchyRectangularNode<any>, x0: number, y0: number, x1: number, y1: number): void;\n\n/**\n * Divides the rectangular area specified by x0, y0, x1, y1 vertically according the value of each of the specified node’s children.\n * The children are positioned in order, starting with the top edge (y0) of the given rectangle.\n * If the sum of the children’s values is less than the specified node’s value (i.e., if the specified node has a non-zero internal value),\n * the remaining empty space will be positioned on the bottom edge (y1) of the given rectangle.\n */\nexport function treemapSlice(node: HierarchyRectangularNode<any>, x0: number, y0: number, x1: number, y1: number): void;\n\n/**\n * If the specified node has odd depth, delegates to treemapSlice; otherwise delegates to treemapDice.\n */\nexport function treemapSliceDice(\n    node: HierarchyRectangularNode<any>,\n    x0: number,\n    y0: number,\n    x1: number,\n    y1: number,\n): void;\n\n// TODO: Test Factory code\nexport interface RatioSquarifyTilingFactory {\n    (node: HierarchyRectangularNode<any>, x0: number, y0: number, x1: number, y1: number): void;\n\n    /**\n     * Specifies the desired aspect ratio of the generated rectangles.\n     * Note that the orientation of the generated rectangles (tall or wide) is not implied by the ratio.\n     * Furthermore, the rectangles ratio are not guaranteed to have the exact specified aspect ratio.\n     * If not specified, the aspect ratio defaults to the golden ratio, φ = (1 + sqrt(5)) / 2, per Kong et al.\n     *\n     * @param ratio The specified ratio value greater than or equal to one.\n     */\n    ratio(ratio: number): RatioSquarifyTilingFactory;\n}\n\n/**\n * Implements the squarified treemap algorithm by Bruls et al., which seeks to produce rectangles of a given aspect ratio.\n */\nexport const treemapSquarify: RatioSquarifyTilingFactory;\n\n/**\n * Like `d3.treemapSquarify`, except preserves the topology (node adjacencies) of the previous layout computed by `d3.treemapResquarify`,\n * if there is one and it used the same target aspect ratio. This tiling method is good for animating changes to treemaps because\n * it only changes node sizes and not their relative positions, thus avoiding distracting shuffling and occlusion.\n * The downside of a stable update, however, is a suboptimal layout for subsequent updates: only the first layout uses the Bruls et al. squarified algorithm.\n */\nexport const treemapResquarify: RatioSquarifyTilingFactory;\n\n// -----------------------------------------------------------------------\n// Partition\n// -----------------------------------------------------------------------\n\nexport interface PartitionLayout<Datum> {\n    /**\n     * Lays out the specified root hierarchy.\n     * You must call `root.sum` before passing the hierarchy to the partition layout.\n     * You probably also want to call `root.sort` to order the hierarchy before computing the layout.\n     *\n     * @param root The specified root hierarchy.\n     */\n    (root: HierarchyNode<Datum>): HierarchyRectangularNode<Datum>;\n\n    /**\n     * Returns the current size, which defaults to [1, 1].\n     */\n    size(): [number, number];\n    /**\n     * Sets this partition layout’s size to the specified [width, height] array and returns this partition layout.\n     *\n     * @param size The specified two-element size array.\n     */\n    size(size: [number, number]): this;\n\n    /**\n     * Returns the current rounding state, which defaults to false.\n     */\n    round(): boolean;\n    /**\n     * Enables or disables rounding according to the given boolean and returns this partition layout.\n     *\n     * @param round The specified boolean flag.\n     */\n    round(round: boolean): this;\n\n    /**\n     * Returns the current padding, which defaults to zero.\n     */\n    padding(): number;\n    /**\n     * Sets the padding to the specified number and returns this partition layout.\n     * The padding is used to separate a node’s adjacent children.\n     *\n     * @param padding The specified padding value.\n     */\n    padding(padding: number): this;\n}\n\n/**\n * Creates a new partition layout with the default settings.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function partition<Datum>(): PartitionLayout<Datum>;\n\n// -----------------------------------------------------------------------\n// Pack\n// -----------------------------------------------------------------------\n\nexport interface HierarchyCircularLink<Datum> {\n    /**\n     * The source of the link.\n     */\n    source: HierarchyCircularNode<Datum>;\n\n    /**\n     * The target of the link.\n     */\n    target: HierarchyCircularNode<Datum>;\n}\n\nexport interface HierarchyCircularNode<Datum> extends HierarchyNode<Datum> {\n    /**\n     * The x-coordinate of the circle’s center.\n     */\n    x: number;\n\n    /**\n     * The y-coordinate of the circle’s center.\n     */\n    y: number;\n\n    /**\n     * The radius of the circle.\n     */\n    r: number;\n\n    /**\n     * Returns an array of links for this node, where each link is an object that defines source and target properties.\n     * The source of each link is the parent node, and the target is a child node.\n     */\n    links(): Array<HierarchyCircularLink<Datum>>;\n}\n\nexport interface PackLayout<Datum> {\n    /**\n     * Lays out the specified root hierarchy.\n     * You must call `root.sum` before passing the hierarchy to the pack layout.\n     * You probably also want to call `root.sort` to order the hierarchy before computing the layout.\n     *\n     * @param root The specified root hierarchy.\n     */\n    (root: HierarchyNode<Datum>): HierarchyCircularNode<Datum>;\n\n    /**\n     * Returns the current radius accessor, which defaults to null.\n     */\n    radius(): null | ((node: HierarchyCircularNode<Datum>) => number);\n    /**\n     * Sets the pack layout’s radius accessor to the specified function and returns this pack layout.\n     * If the radius accessor is null, the radius of each leaf circle is derived from the leaf `node.value` (computed by `node.sum`);\n     * the radii are then scaled proportionally to fit the layout size.\n     * If the radius accessor is not null, the radius of each leaf circle is specified exactly by the function.\n     *\n     * @param radius The specified radius accessor.\n     */\n    radius(radius: null | ((node: HierarchyCircularNode<Datum>) => number)): this;\n\n    /**\n     * Returns the current size, which defaults to [1, 1].\n     */\n    size(): [number, number];\n    /**\n     * Sets this pack layout’s size to the specified [width, height] array and returns this pack layout.\n     *\n     * @param size The specified two-element size array.\n     */\n    size(size: [number, number]): this;\n\n    /**\n     * Returns the current padding accessor, which defaults to the constant zero.\n     */\n    padding(): (node: HierarchyCircularNode<Datum>) => number;\n    /**\n     * Sets this pack layout’s padding accessor to the specified number and returns this pack layout.\n     * Returns the current padding accessor, which defaults to the constant zero.\n     *\n     * When siblings are packed, tangent siblings will be separated by approximately the specified padding;\n     * the enclosing parent circle will also be separated from its children by approximately the specified padding.\n     * If an explicit radius is not specified, the padding is approximate because a two-pass algorithm\n     * is needed to fit within the layout size: the circles are first packed without padding;\n     * a scaling factor is computed and applied to the specified padding; and lastly the circles are re-packed with padding.\n     *\n     * @param padding The specified padding value.\n     */\n    padding(padding: number): this;\n    /**\n     * Sets this pack layout’s padding accessor to the specified function and returns this pack layout.\n     * Returns the current padding accessor, which defaults to the constant zero.\n     *\n     * When siblings are packed, tangent siblings will be separated by approximately the specified padding;\n     * the enclosing parent circle will also be separated from its children by approximately the specified padding.\n     * If an explicit radius is not specified, the padding is approximate because a two-pass algorithm\n     * is needed to fit within the layout size: the circles are first packed without padding;\n     * a scaling factor is computed and applied to the specified padding; and lastly the circles are re-packed with padding.\n     *\n     * @param padding The specified padding function.\n     */\n    padding(padding: (node: HierarchyCircularNode<Datum>) => number): this;\n}\n\n/**\n * Creates a new pack layout with the default settings.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function pack<Datum>(): PackLayout<Datum>;\n\n// -----------------------------------------------------------------------\n// Pack Siblings and Enclosure\n// -----------------------------------------------------------------------\n\nexport interface PackRadius {\n    /**\n     * The radius of the circle.\n     */\n    r: number;\n\n    /**\n     * The x-coordinate of the circle’s center.\n     */\n    x?: number | undefined;\n\n    /**\n     * The y-coordinate of the circle’s center.\n     */\n    y?: number | undefined;\n}\n\nexport interface PackCircle {\n    /**\n     * The radius of the circle.\n     */\n    r: number;\n\n    /**\n     * The x-coordinate of the circle’s center.\n     */\n    x: number;\n\n    /**\n     * The y-coordinate of the circle’s center.\n     */\n    y: number;\n}\n\n// TODO: Since packSiblings manipulates the circles array in place, technically the x and y properties\n// are optional on invocation, but will be created after execution for each entry.\n\n/**\n * Packs the specified array of circles, each of which must have a `circle.r` property specifying the circle’s radius.\n * The circles are positioned according to the front-chain packing algorithm by Wang et al.\n *\n * @param circles The specified array of circles to pack.\n */\nexport function packSiblings<Datum extends PackRadius>(circles: Datum[]): Array<Datum & PackCircle>;\n\n/**\n * Computes the smallest circle that encloses the specified array of circles, each of which must have\n * a `circle.r` property specifying the circle’s radius, and `circle.x` and `circle.y` properties specifying the circle’s center.\n * The enclosing circle is computed using the Matoušek-Sharir-Welzl algorithm. (See also Apollonius’ Problem.)\n *\n * @param circles The specified array of circles to pack.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function packEnclose<Datum extends PackCircle>(circles: Datum[]): PackCircle;\n\n// Types from d3-interpolate\n// Last module patch version validated against: 3.0.1\n\n// ---------------------------------------------------------------------------\n// Shared Type Definitions and Interfaces\n// ---------------------------------------------------------------------------\n\nexport interface ZoomInterpolator extends Function {\n    (t: number): ZoomView;\n    /**\n     * Recommended duration of zoom transition in milliseconds.\n     */\n    duration: number;\n\n    /**\n     * Given a zoom interpolator, returns a new zoom interpolator using the specified curvature rho.\n     * When rho is close to 0, the interpolator is almost linear.\n     * The default curvature is sqrt(2).\n     * @param rho\n     */\n    rho(rho: number): this;\n}\n\nexport interface ColorGammaInterpolationFactory extends Function {\n    (a: string | ColorCommonInstance, b: string | ColorCommonInstance): (t: number) => string;\n    /**\n     * Returns a new interpolator factory of the same type using the specified *gamma*.\n     * For example, to interpolate from purple to orange with a gamma of 2.2 in RGB space: `d3.interpolateRgb.gamma(2.2)(\"purple\", \"orange\")`.\n     * See Eric Brasseur’s article, [Gamma error in picture scaling](https://web.archive.org/web/20160112115812/http://www.4p8.com/eric.brasseur/gamma.html), for more on gamma correction.\n     */\n    gamma(g: number): ColorGammaInterpolationFactory;\n}\n\n/**\n * Type zoomView is used to represent a numeric array with three elements.\n * In order of appearance the elements correspond to:\n * - cx: *x*-coordinate of the center of the viewport\n * - cy: *y*-coordinate of the center of the viewport\n * - width: size of the viewport\n */\nexport type ZoomView = [number, number, number];\n\nexport type TypedArray =\n    | Int8Array\n    | Uint8Array\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Uint8ClampedArray\n    | Float32Array\n    | Float64Array;\n\nexport type NumberArray = TypedArray | DataView;\n\n// ---------------------------------------------------------------------------\n// Interpolation Function Factories\n// ---------------------------------------------------------------------------\n\n/**\n * Returns an `null` constant interpolator.\n */\nexport function interpolate(a: any, b: null): (t: number) => null;\n/**\n * Returns an boolean constant interpolator of value `b`.\n */\nexport function interpolate(a: any, b: boolean): (t: number) => boolean;\n/**\n * Returns a `interpolateRgb` interpolator.\n */\nexport function interpolate(a: string | ColorCommonInstance, b: ColorCommonInstance): (t: number) => string;\n/**\n * Returns a `interpolateDate` interpolator.\n */\nexport function interpolate(a: Date, b: Date): (t: number) => Date;\n/**\n * Returns a `interpolateNumber` interpolator.\n */\nexport function interpolate(\n    a: number | { valueOf(): number },\n    b: number | { valueOf(): number },\n): (t: number) => number;\n/**\n * Returns a `interpolateNumberArray` interpolator.\n */\nexport function interpolate<T extends NumberArray>(a: NumberArray | number[], b: T): (t: number) => T;\n/**\n * Returns a `interpolateString` interpolator. If `b` is a string coercible to a color use use `interpolateRgb`.\n */\nexport function interpolate(a: string | { toString(): string }, b: string): (t: number) => string;\n/**\n * Returns a `interpolateArray` interpolator.\n */\nexport function interpolate<U extends any[]>(a: any[], b: U): (t: number) => U;\n/**\n * Returns a `interpolateObject` interpolator.\n */\nexport function interpolate<U extends object>(a: any, b: U): (t: number) => U;\n\n/**\n * Returns an interpolator between the two numbers `a` and `b`.\n * The returned interpolator is equivalent to: `(t) => a * (1 - t) + b * t`.\n */\nexport function interpolateNumber(\n    a: number | { valueOf(): number },\n    b: number | { valueOf(): number },\n): (t: number) => number;\n\n/**\n * Returns an interpolator between the two numbers `a` and `b`; the interpolator is similar to `interpolateNumber`,\n * except it will round the resulting value to the nearest integer.\n */\nexport function interpolateRound(\n    a: number | { valueOf(): number },\n    b: number | { valueOf(): number },\n): (t: number) => number;\n\n/**\n * Returns an interpolator between the two strings `a` and `b`.\n * The string interpolator finds numbers embedded in `a` and `b`, where each number is of the form understood by JavaScript.\n * A few examples of numbers that will be detected within a string: `-1`, `42`, `3.14159`, and `6.0221413e+23`.\n *\n * For each number embedded in `b`, the interpolator will attempt to find a corresponding number in `a`.\n * If a corresponding number is found, a numeric interpolator is created using `interpolateNumber`.\n * The remaining parts of the string `b` are used as a template.\n *\n * For example, if `a` is `\"300 12px sans-serif\"`, and `b` is `\"500 36px Comic-Sans\"`, two embedded numbers are found.\n * The remaining static parts (of string `b`) are a space between the two numbers (`\" \"`), and the suffix (`\"px Comic-Sans\"`).\n * The result of the interpolator at `t` = 0.5 is `\"400 24px Comic-Sans\"`.\n */\nexport function interpolateString(\n    a: string | { toString(): string },\n    b: string | { toString(): string },\n): (t: number) => string;\n\n/**\n * Returns an interpolator between the two dates `a` and `b`.\n *\n * Note: *no defensive copy* of the returned date is created; the same Date instance is returned for every evaluation of the interpolator.\n * No copy is made for performance reasons; interpolators are often part of the inner loop of animated transitions.\n */\nexport function interpolateDate(a: Date, b: Date): (t: number) => Date;\n\nexport type ArrayInterpolator<A extends any[]> = (t: number) => A;\n\n/**\n * Returns an interpolator between the two arrays `a` and `b`. Internally, an array template is created that is the same length in `b`.\n * For each element in `b`, if there exists a corresponding element in `a`, a generic interpolator is created for the two elements using `interpolate`.\n * If there is no such element, the static value from `b` is used in the template.\n * Then, for the given parameter `t`, the template’s embedded interpolators are evaluated. The updated array template is then returned.\n *\n * For example, if `a` is the array `[0, 1]` and `b` is the array `[1, 10, 100]`, then the result of the interpolator for `t = 0.5` is the array `[0.5, 5.5, 100]`.\n *\n * Note: *no defensive copy* of the template array is created; modifications of the returned array may adversely affect subsequent evaluation of the interpolator.\n * No copy is made for performance reasons; interpolators are often part of the inner loop of animated transitions.\n */\nexport function interpolateArray<A extends any[]>(a: any[], b: A): ArrayInterpolator<A>;\n/**\n * interpolateNumberArray is called\n */\nexport function interpolateArray<T extends NumberArray>(a: NumberArray | number[], b: T): (t: number) => T;\n\n/**\n * Returns an interpolator between the two arrays of numbers a and b.\n * Internally, an array template is created that is the same type and length as b.\n * For each element in b, if there exists a corresponding element in a, the values are directly interpolated in the array template.\n * If there is no such element, the static value from b is copied.\n * The updated array template is then returned.\n *\n * Note: For performance reasons, no defensive copy is made of the template array and the arguments a and b; modifications of these arrays may affect subsequent evaluation of the interpolator.\n */\nexport function interpolateNumberArray<T extends NumberArray | number[]>(\n    a: NumberArray | number[],\n    b: T,\n): (t: number) => T;\n\n/**\n * Returns an interpolator between the two objects `a` and `b`. Internally, an object template is created that has the same properties as `b`.\n * For each property in `b`, if there exists a corresponding property in `a`, a generic interpolator is created for the two elements using `interpolate`.\n * If there is no such property, the static value from `b` is used in the template.\n * Then, for the given parameter `t`, the template's embedded interpolators are evaluated and the updated object template is then returned.\n *\n * For example, if `a` is the object `{x: 0, y: 1}` and `b` is the object `{x: 1, y: 10, z: 100}`, the result of the interpolator for `t = 0.5` is the object `{x: 0.5, y: 5.5, z: 100}`.\n *\n * Note: *no defensive copy* of the template object is created; modifications of the returned object may adversely affect subsequent evaluation of the interpolator.\n * No copy is made for performance reasons; interpolators are often part of the inner loop of animated transitions.\n */\nexport function interpolateObject<U extends object>(a: any, b: U): (t: number) => U;\n\n/**\n * Returns an interpolator between the two 2D CSS transforms represented by `a` and `b`.\n * Each transform is decomposed to a standard representation of translate, rotate, *x*-skew and scale; these component transformations are then interpolated.\n * This behavior is standardized by CSS: see [matrix decomposition for animation](http://www.w3.org/TR/css3-2d-transforms/#matrix-decomposition).\n */\nexport function interpolateTransformCss(a: string, b: string): (t: number) => string;\n\n/**\n * Returns an interpolator between the two 2D SVG transforms represented by `a` and `b`.\n * Each transform is decomposed to a standard representation of translate, rotate, *x*-skew and scale; these component transformations are then interpolated.\n * This behavior is standardized by CSS: see [matrix decomposition for animation](http://www.w3.org/TR/css3-2d-transforms/#matrix-decomposition).\n */\nexport function interpolateTransformSvg(a: string, b: string): (t: number) => string;\n\n/**\n * Returns an interpolator between the two views `a` and `b` of a two-dimensional plane,\n * based on [“Smooth and efficient zooming and panning”](http://www.win.tue.nl/~vanwijk/zoompan.pdf).\n * Each view is defined as an array of three numbers: *cx*, *cy* and *width*.\n * The first two coordinates *cx*, *cy* represent the center of the viewport; the last coordinate *width* represents the size of the viewport.\n *\n * The returned interpolator exposes a *duration* property which encodes the recommended transition duration in milliseconds.\n * This duration is based on the path length of the curved trajectory through *x,y* space.\n * If you want to a slower or faster transition, multiply this by an arbitrary scale factor (*V* as described in the original paper).\n */\nexport function interpolateZoom(a: ZoomView, b: ZoomView): ZoomInterpolator;\n\n/**\n * Returns a discrete interpolator for the given array of values. The returned interpolator maps `t` in `[0, 1 / n)` to values[0],\n * `t` in `[1 / n, 2 / n)` to `values[1]`, and so on, where `n = values.length`. In effect, this is a lightweight quantize scale with a fixed domain of [0, 1].\n */\nexport function interpolateDiscrete<T>(values: T[]): (t: number) => T;\n\n// Sampling ------------------------------------------------------------------\n\n/**\n * Returns `n` uniformly-spaced samples from the specified `interpolator`, where `n` is an integer greater than one.\n * The first sample is always at `t = 0`, and the last sample is always at `t = 1`.\n * This can be useful in generating a fixed number of samples from a given interpolator,\n * such as to derive the range of a [quantize scale](https://github.com/d3/d3-scale#quantize-scales) from a [continuous interpolator](https://github.com/d3/d3-scale#interpolateWarm).\n *\n * Caution: this method will not work with interpolators that do not return defensive copies of their output,\n * such as `d3.interpolateArray`, `d3.interpolateDate` and `d3.interpolateObject`. For those interpolators, you must wrap the interpolator and create a copy for each returned value.\n */\nexport function quantize<T>(interpolator: (t: number) => T, n: number): T[];\n\n// Color Spaces\n\n/**\n * Returns an RGB color space interpolator between the two colors `a` and `b` with a configurable gamma. If the gamma is not specified, it defaults to 1.0.\n * The colors `a` and `b` need not be in RGB; they will be converted to RGB using [`d3.rgb`](https://github.com/d3/d3-color#rgb). The return value of the interpolator is an RGB string.\n */\nexport const interpolateRgb: ColorGammaInterpolationFactory;\n\n/**\n * Returns a uniform nonrational B-spline interpolator through the specified array of *colors*, which are converted to RGB color space.\n * Implicit control points are generated such that the interpolator returns `colors[0]` at `t = 0` and `colors[colors.length - 1]` at `t = 1`.\n * Opacity interpolation is not currently supported. See also `d3.interpolateBasis`, and see [d3-scale-chromatic](https://github.com/d3/d3-scale-chromatic) for examples.\n */\nexport function interpolateRgbBasis(colors: Array<string | ColorCommonInstance>): (t: number) => string;\n\n/**\n * Returns a uniform nonrational B-spline interpolator through the specified array of colors, which are converted to RGB color space.\n * The control points are implicitly repeated such that the resulting spline has cyclical C² continuity when repeated around `t` in [0,1];\n * this is useful, for example, to create cyclical color scales. Opacity interpolation is not currently supported.\n * See also `d3.interpolateBasisClosed, and see [d3-scale-chromatic](https://github.com/d3/d3-scale-chromatic) for examples.\n */\nexport function interpolateRgbBasisClosed(colors: Array<string | ColorCommonInstance>): (t: number) => string;\n\n/**\n * Returns an HSL color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in HSL;\n * they will be converted to HSL using `d3.hsl`. If either color’s hue or saturation is NaN, the opposing color’s channel value is used.\n * The shortest path between hues is used. The return value of the interpolator is an RGB string.\n */\nexport function interpolateHsl(a: string | ColorCommonInstance, b: string | ColorCommonInstance): (t: number) => string;\n\n/**\n * Like `interpolateHsl`, but does not use the shortest path between hues.\n */\nexport function interpolateHslLong(\n    a: string | ColorCommonInstance,\n    b: string | ColorCommonInstance,\n): (t: number) => string;\n\n/**\n * Returns a Lab color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in Lab;\n * they will be converted to Lab using `d3.lab`. The return value of the interpolator is an RGB string.\n */\nexport function interpolateLab(a: string | ColorCommonInstance, b: string | ColorCommonInstance): (t: number) => string;\n\n/**\n * Returns an HCL color space interpolator between the two colors `a` and `b`. The colors `a` and `b` need not be in HCL;\n * they will be converted to HCL using `d3.hcl`. If either color’s hue or chroma is NaN, the opposing color’s channel value is used.\n * The shortest path between hues is used. The return value of the interpolator is an RGB string.\n */\nexport function interpolateHcl(a: string | ColorCommonInstance, b: string | ColorCommonInstance): (t: number) => string;\n\n/**\n * Like `interpolateHcl`, but does not use the shortest path between hues.\n */\nexport function interpolateHclLong(\n    a: string | ColorCommonInstance,\n    b: string | ColorCommonInstance,\n): (t: number) => string;\n\n/**\n * Returns a Cubehelix color space interpolator between the two colors `a` and `b` using a configurable `gamma`.\n * If the gamma is not specified, it defaults to 1.0. The colors `a` and `b` need not be in Cubehelix;\n * they will be converted to Cubehelix using [`d3.cubehelix`](https://github.com/d3/d3-color#cubehelix).\n * If either color’s hue or saturation is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is an RGB string.\n */\nexport const interpolateCubehelix: ColorGammaInterpolationFactory;\n\n/**\n * Like `interpolateCubehelix`, but does not use the shortest path between hues.\n */\nexport const interpolateCubehelixLong: ColorGammaInterpolationFactory;\n\n/**\n * Returns an interpolator between the two hue angles `a` and `b`. If either hue is NaN, the opposing value is used.\n * The shortest path between hues is used. The return value of the interpolator is a number in `[0, 360)`.\n */\nexport function interpolateHue(a: number, b: number): (t: number) => number;\n\n// Splines -------------------------------------------------------------------\n\n/**\n * Returns a uniform nonrational B-spline interpolator through the specified array of `values`, which must be numbers.\n * Implicit control points are generated such that the interpolator returns `values[0]` at `t` = 0 and `values[values.length - 1]` at `t` = 1.\n * See also [`d3.curveBasis`](https://github.com/d3/d3-shape#curveBasis).\n */\nexport function interpolateBasis(splineNodes: number[]): (t: number) => number;\n\n/**\n * Returns a uniform nonrational B-spline interpolator through the specified array of `values`, which must be numbers.\n * The control points are implicitly repeated such that the resulting one-dimensional spline has cyclical C² continuity when repeated around `t` in [0,1].\n * See also [`d3.curveBasisClosed`](https://github.com/d3/d3-shape#curveBasisClosed).\n */\nexport function interpolateBasisClosed(splineNodes: number[]): (t: number) => number;\n\n// Piecewise -----------------------------------------------------------------\n\n/**\n * Returns a piecewise zoom interpolator, composing zoom interpolators for each adjacent pair of zoom view.\n * The returned interpolator maps `t` in `[0, 1 / (n - 1)]` to `interpolate(values[0], values[1])`, `t` in `[1 / (n - 1), 2 / (n - 1)]` to `interpolate(values[1], values[2])`,\n * and so on, where `n = values.length`. In effect, this is a lightweight linear scale.\n * For example, to blend through three different zoom views: `d3.piecewise(d3.interpolateZoom, [[0, 0, 1], [0, 0, 10], [0, 0, 15]])`.\n *\n * interpolate defaults to d3.interpolate.\n */\nexport function piecewise(values: ZoomView[]): ZoomInterpolator;\n/**\n * Returns a piecewise zoom interpolator, composing zoom interpolators for each adjacent pair of zoom view.\n * The returned interpolator maps `t` in `[0, 1 / (n - 1)]` to `interpolate(values[0], values[1])`, `t` in `[1 / (n - 1), 2 / (n - 1)]` to `interpolate(values[1], values[2])`,\n * and so on, where `n = values.length`. In effect, this is a lightweight linear scale.\n * For example, to blend through three different zoom views: `d3.piecewise(d3.interpolateZoom, [[0, 0, 1], [0, 0, 10], [0, 0, 15]])`.\n */\nexport function piecewise(\n    interpolate: (a: ZoomView, b: ZoomView) => ZoomInterpolator,\n    values: ZoomView[],\n): ZoomInterpolator;\n\n/**\n * Returns a piecewise array interpolator, composing array interpolators for each adjacent pair of arrays.\n * The returned interpolator maps `t` in `[0, 1 / (n - 1)]` to `interpolate(values[0], values[1])`, `t` in `[1 / (n - 1), 2 / (n - 1)]` to `interpolate(values[1], values[2])`,\n * and so on, where `n = values.length`. In effect, this is a lightweight linear scale.\n * For example, to blend through three different arrays: `d3.piecewise(d3.interpolateArray, [[0, 0, 1], [0, 0, 10], [0, 0, 15]])`.\n *\n * interpolate defaults to d3.interpolate.\n */\nexport function piecewise<A extends any[]>(values: A[]): ArrayInterpolator<A>;\n/**\n * Returns a piecewise array interpolator, composing array interpolators for each adjacent pair of arrays.\n * The returned interpolator maps `t` in `[0, 1 / (n - 1)]` to `interpolate(values[0], values[1])`, `t` in `[1 / (n - 1), 2 / (n - 1)]` to `interpolate(values[1], values[2])`,\n * and so on, where `n = values.length`. In effect, this is a lightweight linear scale.\n * For example, to blend through three different arrays: `d3.piecewise(d3.interpolateArray, [[0, 0, 1], [0, 0, 10], [0, 0, 15]])`.\n */\nexport function piecewise<A extends any[]>(\n    interpolate: (a: any[], b: A) => ArrayInterpolator<A>,\n    values: A[],\n): ArrayInterpolator<A>;\n\n/**\n * Returns a piecewise interpolator, composing interpolators for each adjacent pair of values.\n * The returned interpolator maps `t` in `[0, 1 / (n - 1)]` to `interpolate(values[0], values[1])`, `t` in `[1 / (n - 1), 2 / (n - 1)]` to `interpolate(values[1], values[2])`,\n * and so on, where `n = values.length`. In effect, this is a lightweight linear scale.\n * For example, to blend through red, green and blue: `d3.piecewise(d3.interpolateRgb.gamma(2.2), [\"red\", \"green\", \"blue\"])`.\n *\n * interpolate defaults to d3.interpolate.\n */\nexport function piecewise(values: unknown[]): (t: number) => any;\n/**\n * Returns a piecewise interpolator, composing interpolators for each adjacent pair of values.\n * The returned interpolator maps `t` in `[0, 1 / (n - 1)]` to `interpolate(values[0], values[1])`, `t` in `[1 / (n - 1), 2 / (n - 1)]` to `interpolate(values[1], values[2])`,\n * and so on, where `n = values.length`. In effect, this is a lightweight linear scale.\n * For example, to blend through red, green and blue: `d3.piecewise(d3.interpolateRgb.gamma(2.2), [\"red\", \"green\", \"blue\"])`.\n */\nexport function piecewise<TData>(interpolate: (a: TData, b: TData) => unknown, values: TData[]): (t: number) => any;\n\n// Types from d3-path\n// Last module patch version validated against: 3.1.0\n\n/**\n * A D3 path serializer implementing CanvasPathMethods\n */\nexport interface Path {\n    /**\n     * Move to the specified point ⟨x, y⟩. Equivalent to context.moveTo and SVG’s “moveto” command.\n     *\n     * @param x x-Coordinate of point to move to\n     * @param y y-Coordinate of point to move to\n     */\n    moveTo(x: number, y: number): void;\n\n    /**\n     * Ends the current subpath and causes an automatic straight line to be drawn from the current point to the initial point of the current subpath.\n     * Equivalent to context.closePath and SVG’s “closepath” command.\n     */\n    closePath(): void;\n\n    /**\n     * Draws a straight line from the current point to the specified point ⟨x, y⟩.\n     * Equivalent to context.lineTo and SVG’s “lineto” command.\n     *\n     * @param x x-Coordinate of point to draw the line to\n     * @param y y-Coordinate of point to draw the line to\n     */\n    lineTo(x: number, y: number): void;\n\n    /**\n     * Draws a quadratic Bézier segment from the current point to the specified point ⟨x, y⟩, with the specified control point ⟨cpx, cpy⟩.\n     * Equivalent to context.quadraticCurveTo and SVG’s quadratic Bézier curve commands.\n     *\n     * @param cpx x-Coordinate of the control point for the quadratic Bézier curve\n     * @param cpy y-Coordinate of the control point for the quadratic Bézier curve\n     * @param x x-Coordinate of point to draw the curve to\n     * @param y y-Coordinate of point to draw the curve to\n     */\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;\n\n    /**\n     * Draws a cubic Bézier segment from the current point to the specified point ⟨x, y⟩, with the specified control points ⟨cpx1, cpy1⟩ and ⟨cpx2, cpy2⟩.\n     * Equivalent to context.bezierCurveTo and SVG’s cubic Bézier curve commands.\n     *\n     * @param cpx1 x-Coordinate of the first control point for the Bézier curve\n     * @param cpy1 y-Coordinate of the first control point for the Bézier curve\n     * @param cpx2 x-Coordinate of the second control point for the Bézier curve\n     * @param cpy2 y-Coordinate of the second control point for the Bézier curve\n     * @param x x-Coordinate of point to draw the curve to\n     * @param y y-Coordinate of point to draw the curve to\n     */\n    bezierCurveTo(cpx1: number, cpy1: number, cpx2: number, cpy2: number, x: number, y: number): void;\n\n    /**\n     * Draws a circular arc segment with the specified radius that starts tangent to the line between the current point and the specified point ⟨x1, y1⟩\n     * and ends tangent to the line between the specified points ⟨x1, y1⟩ and ⟨x2, y2⟩. If the first tangent point is not equal to the current point,\n     * a straight line is drawn between the current point and the first tangent point. Equivalent to context.arcTo and uses SVG’s elliptical arc curve commands.\n     *\n     * @param x1 x-Coordinate of the first tangent point\n     * @param y1 y-Coordinate of the first tangent point\n     * @param x2 x-Coordinate of the second tangent point\n     * @param y2 y-Coordinate of the second tangent point\n     * @param radius  Radius of the arc segment\n     */\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\n\n    /**\n     * Draws a circular arc segment with the specified center ⟨x, y⟩, radius, startAngle and endAngle. If anticlockwise is true,\n     * the arc is drawn in the anticlockwise direction; otherwise, it is drawn in the clockwise direction.\n     * If the current point is not equal to the starting point of the arc, a straight line is drawn from the current point to the start of the arc.\n     * Equivalent to context.arc and uses SVG’s elliptical arc curve commands.\n     *\n     * @param x x-Coordinate of the center point of the arc segment\n     * @param y y-Coordinate of the center point of the arc segment\n     * @param radius Radius of the arc segment\n     * @param startAngle Start angle of arc segment\n     * @param endAngle End angle of arc segment\n     * @param anticlockwise Flag indicating directionality (true = anti-clockwise, false = clockwise)\n     */\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\n\n    /**\n     * Creates a new subpath containing just the four points ⟨x, y⟩, ⟨x + w, y⟩, ⟨x + w, y + h⟩, ⟨x, y + h⟩,\n     * with those four points connected by straight lines, and then marks the subpath as closed. Equivalent to context.rect and uses SVG’s “lineto” commands.\n     *\n     * @param x x-Coordinate of starting point for drawing the rectangle\n     * @param y y-Coordinate of starting point for drawing the rectangle\n     * @param w Width of rectangle\n     * @param h Height of rectangle\n     */\n    rect(x: number, y: number, w: number, h: number): void;\n\n    /**\n     * Returns the string representation of this path according to SVG’s path data specification.\n     */\n    toString(): string;\n}\n\n/**\n * Construct a D3 Path serializer\n */\nexport function path(): Path;\n\n/**\n * Like {@link path}, except limits the digits after the decimal to the specified number of digits.\n * Useful for reducing the size of generated SVG path data.\n */\nexport function pathRound(digits?: number): Path;\n\n// Types from d3-polygon\n// Last module patch version validated against: 3.0.1\n\n/**\n * Returns the signed area of the specified polygon. If the vertices of the polygon are in counterclockwise order\n * (assuming a coordinate system where the origin <0,0> is in the top-left corner), the returned area is positive;\n * otherwise it is negative, or zero.\n *\n * @param polygon Array of coordinates <x0, y0>, <x1, y1> and so on.\n */\nexport function polygonArea(polygon: Array<[number, number]>): number;\n\n/**\n * Returns the centroid of the specified polygon.\n *\n * @param polygon Array of coordinates <x0, y0>, <x1, y1> and so on.\n */\nexport function polygonCentroid(polygon: Array<[number, number]>): [number, number];\n\n/**\n * Returns the convex hull of the specified points using Andrew’s monotone chain algorithm.\n * The returned hull is represented as an array containing a subset of the input points arranged in\n * counterclockwise order. Returns null if points has fewer than three elements.\n *\n * @param points Array of coordinates <x0, y0>, <x1, y1> and so on.\n */\nexport function polygonHull(points: Array<[number, number]>): Array<[number, number]> | null;\n\n/**\n * Returns true if and only if the specified point is inside the specified polygon.\n *\n * @param polygon Array of coordinates <x0, y0>, <x1, y1> and so on.\n * @param point Coordinates of point <x, y>.\n */\nexport function polygonContains(polygon: Array<[number, number]>, point: [number, number]): boolean;\n\n/**\n * Returns the length of the perimeter of the specified polygon.\n *\n * @param polygon Array of coordinates <x0, y0>, <x1, y1> and so on.\n */\nexport function polygonLength(polygon: Array<[number, number]>): number;\n\n// Types from d3-quadtree\n// Last module patch version validated against: 3.0.1\n\n/**\n * Leaf node of the quadtree.\n */\nexport interface QuadtreeLeaf<T> {\n    /**\n     * The data associated with this point, as passed to quadtree.add.\n     */\n    data: T;\n\n    /**\n     * The next datum in this leaf, if any.\n     */\n    next?: QuadtreeLeaf<T> | undefined;\n\n    /**\n     * The length property may be used to distinguish leaf nodes from internal nodes: it is undefined for leaf nodes, and 4 for internal nodes.\n     */\n    length?: undefined;\n}\n\n/**\n * Internal nodes of the quadtree are represented as four-element arrays in left-to-right, top-to-bottom order:\n *\n * 0 - the top-left quadrant, if any.\n * 1 - the top-right quadrant, if any.\n * 2 - the bottom-left quadrant, if any.\n * 3 - the bottom-right quadrant, if any.\n *\n * A child quadrant may be undefined if it is empty.\n */\nexport interface QuadtreeInternalNode<T> extends Array<QuadtreeInternalNode<T> | QuadtreeLeaf<T> | undefined> {\n    /**\n     * The length property may be used to distinguish leaf nodes from internal nodes: it is undefined for leaf nodes, and 4 for internal nodes.\n     */\n    length: 4;\n}\n\nexport interface Quadtree<T> {\n    /**\n     * Returns the current x-accessor, which defaults to: `x(d) => d[0]`.\n     */\n    x(): (d: T) => number;\n    /**\n     * Sets the current x-coordinate accessor and returns the quadtree.\n     * The x-accessors must be consistent, returning the same value given the same input.\n     *\n     * @param x The x-coordinate accessor.\n     */\n    x(x: (d: T) => number): this;\n\n    /**\n     * Returns the current y-accessor, which defaults to: `y(d) => d[1]`.\n     */\n    y(): (d: T) => number;\n    /**\n     * Sets the current y-coordinate accessor and returns the quadtree.\n     * The y-accessors must be consistent, returning the same value given the same input.\n     *\n     * @param y The y-coordinate accessor.\n     */\n    y(y: (d: T) => number): this;\n\n    /**\n     * Returns the quadtree's current extent `[[x0, y0], [x1, y1]]`,\n     * where `x0` and `y0` are the inclusive lower bounds and `x1` and `y1` are the inclusive upper bounds,\n     * or `undefined` if the quadtree has no extent.\n     */\n    extent(): [[number, number], [number, number]] | undefined;\n    /**\n     * Expands the quadtree to cover the specified points `[[x0, y0], [x1, y1]]` and returns the quadtree.\n     * The extent may also be expanded by calling `quadtree.cover` or `quadtree.add`.\n     *\n     * @param extend The specified points to cover.\n     */\n    extent(extend: [[number, number], [number, number]]): this;\n\n    /**\n     * Expands the quadtree to cover the specified point ⟨x,y⟩, and returns the quadtree.\n     * * If the quadtree’s extent already covers the specified point, this method does nothing.\n     * * If the quadtree has an extent, the extent is repeatedly doubled to cover the specified point, wrapping the root node as necessary.\n     * * If the quadtree is empty, the extent is initialized to the extent `[[⌊x⌋, ⌊y⌋], [⌈x⌉, ⌈y⌉]]`.\n     * Rounding is necessary such that if the extent is later doubled, the boundaries of existing quadrants do not change due to floating point error.\n     *\n     * @param x The x-coordinate for the specified point to cover.\n     * @param y The y-coordinate for the specified point to cover.\n     */\n    cover(x: number, y: number): this;\n\n    /**\n     * Adds the specified datum to the quadtree, deriving its coordinates ⟨x,y⟩ using the current x- and y-accessors, and returns the quadtree.\n     * If the new point is outside the current extent of the quadtree, the quadtree is automatically expanded to cover the new point.\n     *\n     * @param datum The specified datum to add.\n     */\n    add(datum: T): this;\n\n    /**\n     * Adds the specified array of data to the quadtree, deriving each element’s coordinates ⟨x,y⟩ using the current x- and y-accessors, and return this quadtree.\n     * This is approximately equivalent to calling quadtree.add repeatedly.\n     * However, this method results in a more compact quadtree because the extent of the data is computed first before adding the data.\n     *\n     * @param data The specified array of data to add.\n     */\n    addAll(data: T[]): this;\n\n    /**\n     * Removes the specified datum to the quadtree, deriving its coordinates ⟨x,y⟩ using the current x- and y-accessors, and returns the quadtree.\n     * If the specified datum does not exist in this quadtree, this method does nothing.\n     *\n     * @param datum The specified datum to remove.\n     */\n    remove(datum: T): this;\n\n    /**\n     * Removes the specified data to the quadtree, deriving their coordinates ⟨x,y⟩ using the current x- and y-accessors, and returns the quadtree.\n     * If a specified datum does not exist in this quadtree, it is ignored.\n     *\n     * @param data The specified array of data to remove.\n     */\n    removeAll(data: T[]): this;\n\n    /**\n     * Returns a copy of the quadtree. All nodes in the returned quadtree are identical copies of the corresponding node in the quadtree;\n     * however, any data in the quadtree is shared by reference and not copied.\n     */\n    copy(): Quadtree<T>;\n\n    /**\n     * Returns the root node of the quadtree.\n     */\n    root(): QuadtreeInternalNode<T> | QuadtreeLeaf<T>;\n\n    /**\n     * Returns an array of all data in the quadtree.\n     */\n    data(): T[];\n\n    /**\n     * Returns the total number of data in the quadtree.\n     */\n    size(): number;\n\n    /**\n     * Returns the datum closest to the position ⟨x,y⟩ with the given search radius. If radius is not specified, it defaults to infinity.\n     * If there is no datum within the search area, returns undefined.\n     *\n     * @param x The x-coordinate for the search position.\n     * @param y The y-coordinate for the search position.\n     * @param radius The optional search radius.\n     */\n    find(x: number, y: number, radius?: number): T | undefined;\n\n    /**\n     * Visits each node in the quadtree in pre-order traversal, invoking the specified callback with arguments `node`, `x0`, `y0`, `x1`, `y1` for each node,\n     * where `node` is the node being visited, ⟨x0, y0⟩ are the lower bounds of the node, and ⟨x1, y1⟩ are the upper bounds, and returns the quadtree.\n     *\n     * If the callback returns true for a given node, then the children of that node are not visited; otherwise, all child nodes are visited.\n     * This can be used to quickly visit only parts of the tree.\n     * Note, however, that child quadrants are always visited in sibling order: top-left, top-right, bottom-left, bottom-right.\n     * In cases such as search, visiting siblings in a specific order may be faster.\n     *\n     * @param callback The callback invoked for each node.\n     */\n    visit(\n        callback: (\n            node: QuadtreeInternalNode<T> | QuadtreeLeaf<T>,\n            x0: number,\n            y0: number,\n            x1: number,\n            y1: number,\n            // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n        ) => void | boolean,\n    ): this;\n\n    /**\n     * Visits each node in the quadtree in post-order traversal, invoking the specified callback with arguments `node`, `x0`, `y0`, `x1`, `y1` for each node,\n     * where `node` is the node being visited, ⟨x0, y0⟩ are the lower bounds of the node, and ⟨x1, y1⟩ are the upper bounds, and returns the quadtree.\n     *\n     * @param callback The callback invoked for each node.\n     */\n    visitAfter(\n        callback: (\n            node: QuadtreeInternalNode<T> | QuadtreeLeaf<T>,\n            x0: number,\n            y0: number,\n            x1: number,\n            y1: number,\n        ) => void,\n    ): this;\n}\n\n/**\n * Creates a new, empty quadtree with an empty extent and the default x- and y-accessors.\n * If data is specified, adds the specified array of data to the quadtree.\n */\nexport function quadtree<T = [number, number]>(data?: T[]): Quadtree<T>;\n/**\n * Creates a new, empty quadtree with an empty extent and the default x- and y-accessors.\n * Adds the specified array of data to the quadtree.\n * Sets the x- and y- accessors to the specified functions before adding the specified array of data to the quadtree.\n */\nexport function quadtree<T = [number, number]>(data: T[], x: (d: T) => number, y: (d: T) => number): Quadtree<T>;\n\n// Types from d3-random\n// Last module patch version validated against: 3.0.1\n\nexport interface RandomNumberGenerationSource {\n    /**\n     * Returns the same type of function for generating random numbers but where the given random number\n     * generator source is used as the source of randomness instead of Math.random.\n     * This is useful when a seeded random number generator is preferable to Math.random.\n     *\n     * @param source Source (pseudo-)random number generator implementing the Math.random interface.\n     * The given random number generator must implement the same interface as Math.random and\n     * only return values in the range [0, 1).\n     */\n    source(source: () => number): this;\n}\n\n/**\n * A configurable random number generator for the uniform distribution.\n */\nexport interface RandomUniform extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating random numbers with a uniform distribution.\n     * The minimum allowed value of a returned number is min (inclusive), and the maximum is max (exclusive).\n     * Min defaults to 0; if max is not specified, it defaults to 1.\n     *\n     * @param max The maximum allowed value of a returned number, defaults to 1.\n     */\n    (max?: number): () => number;\n    /**\n     * Returns a function for generating random numbers with a uniform distribution.\n     * The minimum allowed value of a returned number is min (inclusive), and the maximum is max (exclusive).\n     *\n     * @param min The minimum allowed value of a returned number.\n     * @param max The maximum allowed value of a returned number.\n     */\n    // tslint:disable-next-line:unified-signatures\n    (min: number, max: number): () => number;\n}\n\nexport const randomUniform: RandomUniform;\n\n/**\n * A configurable random integer generator for the uniform distribution.\n */\nexport interface RandomInt extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating random integers with a uniform distribution.\n     * The minimum allowed value of a returned number is ⌊min⌋ (inclusive), and the maximum is ⌊max - 1⌋ (inclusive)\n     * Min defaults to 0.\n     *\n     * @param max The maximum allowed value of a returned number.\n     */\n    (max: number): () => number;\n    /**\n     * Returns a function for generating random integers with a uniform distribution.\n     * The minimum allowed value of a returned number is ⌊min⌋ (inclusive), and the maximum is ⌊max - 1⌋ (inclusive)\n     *\n     * @param min The minimum allowed value of a returned number.\n     * @param max The maximum allowed value of a returned number.\n     */\n    // tslint:disable-next-line:unified-signatures\n    (min: number, max: number): () => number;\n}\n\nexport const randomInt: RandomInt;\n\n/**\n * A configurable random number generator for the normal (Gaussian) distribution.\n */\nexport interface RandomNormal extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating random numbers with a normal (Gaussian) distribution.\n     * The expected value of the generated numbers is mu, with the given standard deviation sigma.\n     * If mu is not specified, it defaults to 0; if sigma is not specified, it defaults to 1.\n     *\n     * @param mu Expected value, defaults to 0.\n     * @param sigma Standard deviation, defaults to 1.\n     */\n    (mu?: number, sigma?: number): () => number;\n}\n\nexport const randomNormal: RandomNormal;\n\n/**\n * A configurable random number generator for the log-normal distribution.\n */\nexport interface RandomLogNormal extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating random numbers with a log-normal distribution. The expected value of the random variable’s natural logarithm is mu,\n     * with the given standard deviation sigma. If mu is not specified, it defaults to 0; if sigma is not specified, it defaults to 1.\n     *\n     * @param mu Expected value, defaults to 0.\n     * @param sigma Standard deviation, defaults to 1.\n     */\n    (mu?: number, sigma?: number): () => number;\n}\n\nexport const randomLogNormal: RandomLogNormal;\n\n/**\n * A configurable random number generator for the Bates distribution.\n */\nexport interface RandomBates extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating random numbers with a Bates distribution with n independent variables.\n     * The case of fractional n is handled as with d3.randomIrwinHall, and d3.randomBates(0) is equivalent to d3.randomUniform().\n     *\n     * @param n Number of independent random variables to use.\n     */\n    (n: number): () => number;\n}\n\nexport const randomBates: RandomBates;\n\n/**\n * A configurable random number generator for the Irwin–Hall distribution.\n */\nexport interface RandomIrwinHall extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating random numbers with an Irwin–Hall distribution with n independent variables.\n     * If the fractional part of n is non-zero, this is treated as adding d3.randomUniform() times that fractional part to the integral part.\n     *\n     * @param n Number of independent random variables to use.\n     */\n    (n: number): () => number;\n}\n\nexport const randomIrwinHall: RandomIrwinHall;\n\n/**\n * A configurable random number generator for the exponential distribution.\n */\nexport interface RandomExponential extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating random numbers with an exponential distribution with the rate lambda;\n     * equivalent to time between events in a Poisson process with a mean of 1 / lambda.\n     *\n     * @param lambda Expected time between events.\n     */\n    (lambda: number): () => number;\n}\n\nexport const randomExponential: RandomExponential;\n\n/**\n * A configurable random number generator with an Pareto distribution.\n */\nexport interface RandomPareto extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating random numbers with a Pareto distribution with the shape alpha.\n     * The value alpha must be a positive value.\n     *\n     * @param alpha alpha\n     */\n    (alpha: number): () => number;\n}\n\nexport const randomPareto: RandomPareto;\n\n/**\n * A configurable random 0 or 1 generator according to a Bernoulli distribution.\n */\nexport interface RandomBernoulli extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating either 1 or 0 according to a Bernoulli distribution with 1 being returned with success probability p and 0 with failure probability q = 1 - p.\n     * The value p is in the range [0, 1].\n     *\n     * @param p p\n     */\n    (p: number): () => number;\n}\n\nexport const randomBernoulli: RandomBernoulli;\n\n/**\n * A configurable random number generator with a geometric distribution.\n */\nexport interface RandomGeometric extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating numbers with a geometric distribution with success probability p.\n     * The value p is in the range [0, 1].\n     *\n     * @param p Success probability\n     */\n    (p: number): () => number;\n}\n\nexport const randomGeometric: RandomGeometric;\n\n/**\n * A configurable random number generator with a binomial distribution.\n */\nexport interface RandomBinomial extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating numbers with a geometric distribution with success probability p.\n     * The value p is in the range (0, 1].\n     *\n     * @param p Success probability\n     */\n    (p: number): () => number;\n}\n\nexport const randomBinomial: RandomBinomial;\n\n/**\n * A configurable random number generator with a gamma distribution.\n */\nexport interface RandomGamma extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating random numbers with a gamma distribution with k the shape parameter and theta the scale parameter.\n     * The value k must be a positive value; if theta is not specified, it defaults to 1.\n     *\n     * @param k Shape parameter\n     * @param theta Scale paramter\n     */\n    (k: number, theta?: number): () => number;\n}\n\nexport const randomGamma: RandomGamma;\n\n/**\n * A configurable random number generator with a beta distribution.\n */\nexport interface RandomBeta extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating random numbers with a beta distribution with alpha and beta shape parameters, which must both be positive.\n     *\n     * @param alpha Shape parameter\n     * @param beta Shape paramter\n     */\n    (alpha: number, beta: number): () => number;\n}\n\nexport const randomBeta: RandomBeta;\n\n/**\n * A configurable random number generator with one of the generalized extreme value distributions.\n */\nexport interface RandomWeibull extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating random numbers with one of the generalized extreme value distributions, depending on k:\n     * If k is positive, the Weibull distribution with shape parameter k\n     * If k is zero, the Gumbel distribution\n     * If k is negative, the Fréchet distribution with shape parameter −k\n     * In all three cases, a is the location parameter and b is the scale parameter.\n     * If a is not specified, it defaults to 0; if b is not specified, it defaults to 1.\n     *\n     * @param k Shape parameter\n     * @param a Location parameter\n     * @param b Scale parameter\n     */\n    (k: number, a?: number, b?: number): () => number;\n}\n\nexport const randomWeibull: RandomWeibull;\n\n/**\n * A configurable random number generator with a Cauchy distribution.\n */\nexport interface RandomCauchy extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating random numbers with a Cauchy distribution.\n     * a and b have the same meanings and default values as in d3.randomWeibull.\n     *\n     * @param a Location parameter\n     * @param b Scale parameter\n     */\n    (a?: number, b?: number): () => number;\n}\n\nexport const randomCauchy: RandomCauchy;\n\n/**\n * A configurable random number generator with a logistic distribution.\n */\nexport interface RandomLogistic extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating random numbers with a logistic distribution.\n     * a and b have the same meanings and default values as in d3.randomWeibull.\n     *\n     * @param a Location parameter\n     * @param b Scale parameter\n     */\n    (a?: number, b?: number): () => number;\n}\n\nexport const randomLogistic: RandomLogistic;\n\n/**\n * A configurable random number generator with a Poisson distribution.\n */\nexport interface RandomPoisson extends RandomNumberGenerationSource {\n    /**\n     * Returns a function for generating random numbers with a Poisson distribution with mean lambda.\n     *\n     * @param lambda Mean\n     */\n    (lambda: number): () => number;\n}\n\nexport const randomPoisson: RandomPoisson;\n\n/**\n * Returns a linear congruential generator;\n * this function can be called repeatedly to obtain pseudorandom values well-distributed on the interval [0,1) and with a long period (up to 1 billion numbers), similar to Math.random.\n * A seed can be specified as a real number in the interval [0,1) or as any integer.\n * In the latter case, only the lower 32 bits are considered.\n * Two generators instanced with the same seed generate the same sequence, allowing to create reproducible pseudo-random experiments.\n * If the seed is not specified, one is chosen using Math.random.\n *\n * @param seed A seed that is either a real number in the interval [0,1) or any integer.\n */\nexport function randomLcg(seed?: number): () => number;\n\n// Types from d3-scale\n// Last module patch version validated against: 4.0.2\n\n// -------------------------------------------------------------------------------\n// Shared Types and Interfaces\n// -------------------------------------------------------------------------------\n\n/**\n * An Interpolator factory returns an interpolator function.\n *\n * The first generic corresponds to the data type of the interpolation boundaries.\n * The second generic corresponds to the data type of the return type of the interpolator.\n */\nexport interface InterpolatorFactory<T, U> {\n    /**\n     * Construct a new interpolator function, based on the provided interpolation boundaries.\n     *\n     * @param a Start boundary of the interpolation interval.\n     * @param b End boundary of the interpolation interval.\n     */\n    (a: T, b: T): (t: number) => U;\n}\n\nexport type NumberValue = number | { valueOf(): number };\n\nexport type UnknownReturnType<Unknown, DefaultUnknown> = [Unknown] extends [never] ? DefaultUnknown : Unknown;\n\n/**\n * A helper interface for a continuous scale defined over a numeric domain.\n */\nexport interface ScaleContinuousNumeric<Range, Output, Unknown = never> {\n    /**\n     * Given a value from the domain, returns the corresponding value from the range, subject to interpolation, if any.\n     *\n     * If the given value is outside the domain, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the range.\n     *\n     * Note: The interpolation function applied by the scale may change the output type from the range type as part of the interpolation.\n     *\n     * @param value A numeric value from the domain.\n     */\n    (value: NumberValue): Output | Unknown;\n\n    /**\n     * Given a value from the range, returns the corresponding value from the domain. Inversion is useful for interaction,\n     * say to determine the data value corresponding to the position of the mouse.\n     *\n     * If the given value is outside the range, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the domain.\n     *\n     * IMPORTANT: This method is only supported if the range is numeric. If the range is not numeric, returns NaN.\n     *\n     * For a valid value y in the range, continuous(continuous.invert(y)) approximately equals y;\n     * similarly, for a valid value x in the domain, continuous.invert(continuous(x)) approximately equals x.\n     * The scale and its inverse may not be exact due to the limitations of floating point precision.\n     *\n     * @param value A numeric value from the range.\n     */\n    invert(value: NumberValue): number;\n\n    /**\n     * Returns a copy of the scale’s current domain.\n     */\n    domain(): number[];\n    /**\n     * Sets the scale’s domain to the specified array of numbers. The array must contain two or more elements.\n     * If the elements in the given array are not numbers, they will be coerced to numbers\n     *\n     * Although continuous scales typically have two values each in their domain and range, specifying more than two values produces a piecewise scale.\n     *\n     * Internally, a piecewise scale performs a binary search for the range interpolator corresponding to the given domain value.\n     * Thus, the domain must be in ascending or descending order. If the domain and range have different lengths N and M, only the first min(N,M) elements in each are observed.\n     *\n     * @param domain Array of numeric domain values.\n     */\n    domain(domain: Iterable<NumberValue>): this;\n\n    /**\n     * Returns a copy of the scale’s current range.\n     */\n    range(): Range[];\n    /**\n     * Sets the scale’s range to the specified array of values.\n     *\n     * The array must contain two or more elements. Unlike the domain, elements in the given array need not be numbers;\n     * any value that is supported by the underlying interpolator will work, though note that numeric ranges are required for invert.\n     *\n     * @param range Array of range values.\n     */\n    range(range: Iterable<Range>): this;\n\n    /**\n     * Sets the scale’s range to the specified array of values while also setting the scale’s interpolator to interpolateRound.\n     *\n     * The rounding interpolator is sometimes useful for avoiding antialiasing artifacts,\n     * though also consider the shape-rendering “crispEdges” styles. Note that this interpolator can only be used with numeric ranges.\n     *\n     * The array must contain two or more elements. Unlike the domain, elements in the given array need not be numbers;\n     * any value that is supported by the underlying interpolator will work, though note that numeric ranges are required for invert.\n     *\n     * @param range Array of range values.\n     */\n    rangeRound(range: Iterable<NumberValue>): this;\n\n    /**\n     * Returns whether or not the scale currently clamps values to within the range.\n     */\n    clamp(): boolean;\n    /**\n     * Enables or disables clamping, respectively. If clamping is disabled and the scale is passed a value outside the domain,\n     * the scale may return a value outside the range through extrapolation.\n     *\n     * If clamping is enabled, the return value of the scale is always within the scale’s range. Clamping similarly applies to the \"invert\" method.\n     *\n     * @param clamp A flag to enable (true) or disable (false) clamping.\n     */\n    clamp(clamp: boolean): this;\n\n    /**\n     * Returns approximately count representative values from the scale’s domain.\n     *\n     * If count is not specified, it defaults to 10.\n     *\n     * The returned tick values are uniformly spaced, have human-readable values (such as multiples of powers of 10),\n     * and are guaranteed to be within the extent of the domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data.\n     * The specified count is only a hint; the scale may return more or fewer values depending on the domain. See also d3-array’s ticks.\n     *\n     * @param count Optional approximate number of ticks to be returned. If count is not specified, it defaults to 10.\n     */\n    ticks(count?: number): number[];\n\n    /**\n     * Returns a number format function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values.\n     * The specified count should have the same value as the count that is used to generate the tick values.\n     *\n     * @param count Approximate number of ticks to be used when calculating precision for the number format function.\n     * @param specifier An optional valid format specifier string which allows a custom format where the precision of the format is automatically set by the scale as appropriate for the tick interval.\n     * If specifier uses the format type \"s\", the scale will return a SI-prefix format based on the largest value in the domain.\n     * If the specifier already specifies a precision, this method is equivalent to locale.format.\n     */\n    tickFormat(count?: number, specifier?: string): (d: NumberValue) => string;\n\n    /**\n     * Extends the domain so that it starts and ends on nice round values.\n     * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.\n     * An optional tick count argument allows greater control over the step size used to extend the bounds,\n     * guaranteeing that the returned ticks will exactly cover the domain.\n     * Nicing is useful if the domain is computed from data, say using extent, and may be irregular.\n     * For example, for a domain of [0.201479…, 0.996679…], a nice domain might be [0.2, 1.0].\n     * If the domain has more than two values, nicing the domain only affects the first and last value.\n     *\n     * Nicing a scale only modifies the current domain; it does not automatically nice domains that are subsequently set using continuous.domain.\n     * You must re-nice the scale after setting the new domain, if desired.\n     *\n     * @param count An optional number of ticks expected to be used.\n     */\n    nice(count?: number): this;\n\n    /**\n     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n     */\n    copy(): this;\n}\n\n/**\n * Returns a number format function suitable for displaying a tick value,\n * automatically computing the appropriate precision based on the fixed interval between tick values, as determined by d3.tickStep.\n *\n * @param start Start\n * @param stop Stop\n * @param count Approximate number of ticks to be used when calculating precision for the number format function.\n * @param specifier An optional specifier allows a custom format where the precision of the format is automatically set by the scale as appropriate for the tick interval.\n * If specifier uses the format type s, the scale will return a SI-prefix format based on the larger absolute value of start and stop.\n * If the specifier already specifies a precision, this method is equivalent to locale.format.\n */\nexport function tickFormat(start: number, stop: number, count: number, specifier?: string): (d: NumberValue) => string;\n\n// -------------------------------------------------------------------------------\n// Linear Scale Factory\n// -------------------------------------------------------------------------------\n\n/**\n * A linear continuous scale defined over a numeric domain.\n *\n * Continuous scales map a continuous, quantitative input domain to a continuous output range.\n * Each range value y can be expressed as a function of the domain value x: y = mx + b.\n *\n * If the range is also numeric, the mapping may be inverted.\n *\n * Note that the data types of the range and output of the scale must be compatible with the interpolator applied by the scale.\n *\n * The first generic corresponds to the data type of the range elements.\n *\n * The second generic corresponds to the data type of the output elements generated by the scale.\n *\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n */\nexport interface ScaleLinear<Range, Output, Unknown = never> extends ScaleContinuousNumeric<Range, Output, Unknown> {\n    /**\n     * Returns the scale’s current interpolator factory, which defaults to interpolate.\n     */\n    interpolate(): InterpolatorFactory<any, any>;\n\n    /**\n     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;\n     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.\n     *\n     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.\n     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);\n     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.\n     *\n     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.\n     *\n     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.\n     */\n    interpolate(interpolate: InterpolatorFactory<Range, Output>): this;\n    /**\n     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;\n     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.\n     *\n     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.\n     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);\n     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.\n     *\n     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.\n     *\n     * The generic \"NewOutput\" can be used to change the scale to have a different output element type corresponding to the new interpolation factory.\n     *\n     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.\n     */\n    interpolate<NewOutput>(interpolate: InterpolatorFactory<Range, NewOutput>): ScaleLinear<Range, NewOutput, Unknown>;\n\n    /**\n     * Returns the current unknown value, which defaults to undefined.\n     */\n    unknown(): UnknownReturnType<Unknown, undefined>;\n    /**\n     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.\n     *\n     * @param value The output value of the scale for undefined (or NaN) input values.\n     */\n    unknown<NewUnknown>(value: NewUnknown): ScaleLinear<Range, Output, NewUnknown>;\n}\n\n/**\n * Constructs a new continuous scale with the specified range, the default interpolator and clamping disabled.\n * The domain defaults to [0, 1].\n * If range is not specified, it defaults to [0, 1].\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the output elements generated by the scale.\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n *\n * The range must be set in accordance with the range element type.\n *\n * The interpolator factory may be set using the interpolate(...) method of the scale.\n *\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleLinear<Range = number, Output = Range, Unknown = never>(\n    range?: Iterable<Range>,\n): ScaleLinear<Range, Output, Unknown>;\n/**\n * Constructs a new continuous scale with the specified domain and range, the default interpolator and clamping disabled.\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the output elements generated by the scale.\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n *\n * The range must be set in accordance with the range element type.\n *\n * The interpolator factory may be set using the interpolate(...) method of the scale.\n *\n * @param domain Array of numeric domain values.\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleLinear<Range, Output = Range, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    range: Iterable<Range>,\n): ScaleLinear<Range, Output, Unknown>;\n\n// -------------------------------------------------------------------------------\n// Power Scale Factories\n// -------------------------------------------------------------------------------\n\n/**\n * A continuous power scale defined over a numeric domain.\n *\n * Continuous scales map a continuous, quantitative input domain to a continuous output range.\n *\n * Each range value y can be expressed as a function of the domain value x: y = mx^k + b, where k is the exponent value.\n * Power scales also support negative domain values, in which case the input value and the resulting output value are multiplied by -1.\n *\n * If the range is also numeric, the mapping may be inverted.\n *\n * Note that the data types of the range and output of the scale must be compatible with the interpolator applied by the scale.\n *\n * The first generic corresponds to the data type of the range elements.\n *\n * The second generic corresponds to the data type of the output elements generated by the scale.\n *\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n */\nexport interface ScalePower<Range, Output, Unknown = never> extends ScaleContinuousNumeric<Range, Output, Unknown> {\n    /**\n     * Returns the scale’s current interpolator factory, which defaults to interpolate.\n     */\n    interpolate(): InterpolatorFactory<any, any>;\n\n    /**\n     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;\n     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.\n     *\n     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.\n     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);\n     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.\n     *\n     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.\n     *\n     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.\n     */\n    interpolate(interpolate: InterpolatorFactory<Range, Output>): this;\n    /**\n     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;\n     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.\n     *\n     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.\n     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);\n     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.\n     *\n     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.\n     *\n     * The generic \"NewOutput\" can be used to change the scale to have a different output element type corresponding to the new interpolation factory.\n     *\n     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.\n     */\n    interpolate<NewOutput>(interpolate: InterpolatorFactory<Range, NewOutput>): ScalePower<Range, NewOutput, Unknown>;\n\n    /**\n     * If exponent is not specified, returns the current exponent, which defaults to 1.\n     * (Note that this is effectively a linear scale until you set a different exponent.)\n     */\n    exponent(): number;\n    /**\n     * Sets the current exponent to the given numeric value.\n     * (Note that this is effectively a linear scale until you set a different exponent.)\n     */\n    exponent(exponent: number): this;\n\n    /**\n     * Returns the current unknown value, which defaults to undefined.\n     */\n    unknown(): UnknownReturnType<Unknown, undefined>;\n    /**\n     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.\n     *\n     * @param value The output value of the scale for undefined (or NaN) input values.\n     */\n    unknown<NewUnknown>(value: NewUnknown): ScalePower<Range, Output, NewUnknown>;\n}\n\n/**\n * Constructs a new continuous scale with the specified range, the exponent 1, the default interpolator and clamping disabled.\n * The domain defaults to [0, 1].\n * If range is not specified, it defaults to [0, 1].\n * (Note that this is effectively a linear scale until you set a different exponent.)\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the output elements generated by the scale.\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n *\n * The range must be set in accordance with the range element type.\n *\n * The interpolator factory may be set using the interpolate(...) method of the scale.\n *\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scalePow<Range = number, Output = Range, Unknown = never>(\n    range?: Iterable<Range>,\n): ScalePower<Range, Output, Unknown>;\n/**\n * Constructs a new continuous scale with the specified domain and range, the exponent 1, the default interpolator and clamping disabled.\n * (Note that this is effectively a linear scale until you set a different exponent.)\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the output elements generated by the scale.\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n *\n * The range must be set in accordance with the range element type.\n *\n * The interpolator factory may be set using the interpolate(...) method of the scale.\n *\n * @param domain Array of numeric domain values.\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scalePow<Range, Output = Range, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    range: Iterable<Range>,\n): ScalePower<Range, Output, Unknown>;\n\n/**\n * Constructs a new continuous power scale with the specified range, the exponent 0.5, the default interpolator and clamping disabled.\n * The domain defaults to [0, 1].\n * If range is not specified, it defaults to [0, 1].\n * This is a convenience method equivalent to d3.scalePow().exponent(0.5).\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the output elements generated by the scale.\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n *\n * The range must be set in accordance with the range element type.\n *\n * The interpolator factory may be set using the interpolate(...) method of the scale.\n *\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSqrt<Range = number, Output = Range, Unknown = never>(\n    range?: Iterable<Range>,\n): ScalePower<Range, Output, Unknown>;\n/**\n * Constructs a new continuous power scale with the specified domain and range, the exponent 0.5, the default interpolator and clamping disabled.\n * This is a convenience method equivalent to d3.scalePow().exponent(0.5).\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the output elements generated by the scale.\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n *\n * The range must be set in accordance with the range element type.\n *\n * The interpolator factory may be set using the interpolate(...) method of the scale.\n *\n * @param domain Array of numeric domain values.\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSqrt<Range, Output = Range, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    range: Iterable<Range>,\n): ScalePower<Range, Output, Unknown>;\n\n// -------------------------------------------------------------------------------\n// Logarithmic Scale Factory\n// -------------------------------------------------------------------------------\n\n/**\n * A continuous logarithmic scale defined over a numeric domain.\n *\n * Continuous scales map a continuous, quantitative input domain to a continuous output range.\n *\n * The mapping to the range value y can be expressed as a function of the domain value x: y = m log(x) + b.\n *\n * As log(0) = -∞, a log scale domain must be strictly-positive or strictly-negative; the domain must not include or cross zero.\n * A log scale with a positive domain has a well-defined behavior for positive values, and a log scale with a negative domain has a well-defined behavior for negative values.\n * (For a negative domain, input and output values are implicitly multiplied by -1.)\n * The behavior of the scale is undefined if you pass a negative value to a log scale with a positive domain or vice versa.\n *\n * If the range is also numeric, the mapping may be inverted.\n *\n * Note that the data types of the range and output of the scale must be compatible with the interpolator applied by the scale.\n *\n * The first generic corresponds to the data type of the range elements.\n *\n * The second generic corresponds to the data type of the output elements generated by the scale.\n *\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n */\nexport interface ScaleLogarithmic<Range, Output, Unknown = never>\n    extends ScaleContinuousNumeric<Range, Output, Unknown>\n{\n    /**\n     * Returns a copy of the scale’s current domain.\n     */\n    domain(): number[];\n    /**\n     * Sets the scale’s domain to the specified array of numbers. The array must contain two or more elements.\n     * If the elements in the given array are not numbers, they will be coerced to numbers\n     *\n     * As log(0) = -∞, a log scale domain must be strictly-positive or strictly-negative; the domain must not include or cross zero.\n     * A log scale with a positive domain has a well-defined behavior for positive values, and a log scale with a negative domain has a well-defined behavior for negative values.\n     * (For a negative domain, input and output values are implicitly multiplied by -1.)\n     * The behavior of the scale is undefined if you pass a negative value to a log scale with a positive domain or vice versa.\n     *\n     * Although continuous scales typically have two values each in their domain and range, specifying more than two values produces a piecewise scale.\n     *\n     * Internally, a piecewise scale performs a binary search for the range interpolator corresponding to the given domain value.\n     * Thus, the domain must be in ascending or descending order. If the domain and range have different lengths N and M, only the first min(N,M) elements in each are observed.\n     *\n     * @param domain Array of numeric domain values.\n     */\n    domain(domain: Iterable<NumberValue>): this;\n\n    /**\n     * Returns the scale’s current interpolator factory, which defaults to interpolate.\n     */\n    interpolate(): InterpolatorFactory<any, any>;\n\n    /**\n     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;\n     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.\n     *\n     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.\n     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);\n     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.\n     *\n     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.\n     *\n     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.\n     */\n    interpolate(interpolate: InterpolatorFactory<Range, Output>): this;\n    /**\n     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;\n     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.\n     *\n     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.\n     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);\n     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.\n     *\n     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.\n     *\n     * The generic \"NewOutput\" can be used to change the scale to have a different output element type corresponding to the new interpolation factory.\n     *\n     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.\n     */\n    interpolate<NewOutput>(\n        interpolate: InterpolatorFactory<Range, NewOutput>,\n    ): ScaleLogarithmic<Range, NewOutput, Unknown>;\n\n    /**\n     * Returns approximately count representative values from the scale’s domain.\n     *\n     * If count is not specified, it defaults to 10.\n     *\n     * If the base is an integer, the returned ticks are uniformly spaced within each integer power of base; otherwise, one tick per power of base is returned.\n     * The returned ticks are guaranteed to be within the extent of the domain. If the orders of magnitude in the domain is greater than count, then at most one tick per power is returned.\n     * Otherwise, the tick values are unfiltered, but note that you can use log.tickFormat to filter the display of tick labels.\n     *\n     * @param count Optional approximate number of ticks to be returned. If count is not specified, it defaults to 10.\n     */\n    ticks(count?: number): number[];\n\n    /**\n     * Returns a number format function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values.\n     *\n     * The specified count typically has the same value as the count that is used to generate the tick values.\n     * If there are too many ticks, the formatter may return the empty string for some of the tick labels;\n     * however, note that the ticks are still shown.\n     * To disable filtering, specify a count of Infinity. When specifying a count, you may also provide a format specifier or format function.\n     * For example, to get a tick formatter that will display 20 ticks of a currency, say log.tickFormat(20, \"$,f\").\n     * If the specifier does not have a defined precision, the precision will be set automatically by the scale, returning the appropriate format.\n     * This provides a convenient way of specifying a format whose precision will be automatically set by the scale.\n     *\n     * @param count Approximate number of ticks to be used when calculating precision for the number format function.\n     * @param specifier An optional valid format specifier string which allows a custom format where the precision of the format is automatically set by the scale as appropriate for the tick interval.\n     * For example, to get a tick formatter that will display 20 ticks of a currency, say log.tickFormat(20, \"$,f\").\n     * If the specifier does not have a defined precision, the precision will be set automatically by the scale, returning the appropriate format.\n     * This provides a convenient way of specifying a format whose precision will be automatically set by the scale.\n     */\n    tickFormat(count?: number, specifier?: string): (d: NumberValue) => string;\n\n    /**\n     * Extends the domain to integer powers of base. For example, for a domain of [0.201479…, 0.996679…], and base 10, the nice domain is [0.1, 1].\n     * If the domain has more than two values, nicing the domain only affects the first and last value.\n     *\n     * Nicing a scale only modifies the current domain; it does not automatically nice domains that are subsequently set using continuous.domain.\n     * You must re-nice the scale after setting the new domain, if desired.\n     */\n    nice(): this;\n\n    /**\n     * Returns the current base, which defaults to 10.\n     */\n    base(): number;\n    /**\n     * Sets the base for this logarithmic scale to the specified value.\n     */\n    base(base: number): this;\n\n    /**\n     * Returns the current unknown value, which defaults to undefined.\n     */\n    unknown(): UnknownReturnType<Unknown, undefined>;\n    /**\n     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.\n     *\n     * @param value The output value of the scale for undefined (or NaN) input values.\n     */\n    unknown<NewUnknown>(value: NewUnknown): ScaleLogarithmic<Range, Output, NewUnknown>;\n}\n\n/**\n * Constructs a new continuous scale with the specified range, the base 10, the default interpolator and clamping disabled.\n * The domain defaults to [1, 10].\n * If range is not specified, it defaults to [0, 1].\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the output elements generated by the scale.\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n *\n * The range must be set in accordance with the range element type.\n *\n * The interpolator factory may be set using the interpolate(...) method of the scale.\n *\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleLog<Range = number, Output = Range, Unknown = never>(\n    range?: Iterable<Range>,\n): ScaleLogarithmic<Range, Output, Unknown>;\n/**\n * Constructs a new continuous scale with the specified domain and range, the base 10, the default interpolator and clamping disabled.\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the output elements generated by the scale.\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n *\n * The range must be set in accordance with the range element type.\n *\n * The interpolator factory may be set using the interpolate(...) method of the scale.\n *\n * @param domain Array of numeric domain values.\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleLog<Range, Output = Range, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    range: Iterable<Range>,\n): ScaleLogarithmic<Range, Output, Unknown>;\n\n// -------------------------------------------------------------------------------\n// Symlog Scale Factory\n// -------------------------------------------------------------------------------\n\n/**\n * A bi-symmetric log transformation for wide-range data by Webber scale defined over a numeric domain.\n *\n * Continuous scales map a continuous, quantitative input domain to a continuous output range.\n *\n * See “A bi-symmetric log transformation for wide-range data” by Webber for more\n *\n * If the range is also numeric, the mapping may be inverted.\n *\n * Note that the data types of the range and output of the scale must be compatible with the interpolator applied by the scale.\n *\n * The first generic corresponds to the data type of the range elements.\n *\n * The second generic corresponds to the data type of the output elements generated by the scale.\n *\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n */\nexport interface ScaleSymLog<Range, Output, Unknown = never> extends ScaleContinuousNumeric<Range, Output, Unknown> {\n    /**\n     * Returns a number format function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values.\n     *\n     * The specified count typically has the same value as the count that is used to generate the tick values.\n     * If there are too many ticks, the formatter may return the empty string for some of the tick labels;\n     * however, note that the ticks are still shown.\n     * To disable filtering, specify a count of Infinity. When specifying a count, you may also provide a format specifier or format function.\n     * For example, to get a tick formatter that will display 20 ticks of a currency, say log.tickFormat(20, \"$,f\").\n     * If the specifier does not have a defined precision, the precision will be set automatically by the scale, returning the appropriate format.\n     * This provides a convenient way of specifying a format whose precision will be automatically set by the scale.\n     *\n     * @param count Approximate number of ticks to be used when calculating precision for the number format function.\n     * @param specifier An optional valid format specifier string which allows a custom format where the precision of the format is automatically set by the scale as appropriate for the tick interval.\n     * For example, to get a tick formatter that will display 20 ticks of a currency, say log.tickFormat(20, \"$,f\").\n     * If the specifier does not have a defined precision, the precision will be set automatically by the scale, returning the appropriate format.\n     * This provides a convenient way of specifying a format whose precision will be automatically set by the scale.\n     */\n    tickFormat(count?: number, specifier?: string): (d: NumberValue) => string;\n    /**\n     * Returns the current constant, which defaults to 1.\n     */\n    constant(): number;\n    /**\n     * Sets the symlog constant to the specified number and returns this scale;\n     * otherwise returns the current value of the symlog constant, which defaults to 1. See “A bi-symmetric log transformation for wide-range data” by Webber for more.\n     */\n    constant(constant: number): this;\n\n    /**\n     * Returns the current unknown value, which defaults to undefined.\n     */\n    unknown(): UnknownReturnType<Unknown, undefined>;\n    /**\n     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.\n     *\n     * @param value The output value of the scale for undefined (or NaN) input values.\n     */\n    unknown<NewUnknown>(value: NewUnknown): ScaleSymLog<Range, Output, NewUnknown>;\n}\n\n/**\n * Constructs a new continuous scale with the specified range, the constant 1, the default interpolator and clamping disabled.\n * The domain defaults to [0, 1].\n * If range is not specified, it defaults to [0, 1].\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the output elements generated by the scale.\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n *\n * The range must be set in accordance with the range element type.\n *\n * The interpolator factory may be set using the interpolate(...) method of the scale.\n *\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSymlog<Range = number, Output = Range, Unknown = never>(\n    range?: Iterable<Range>,\n): ScaleSymLog<Range, Output, Unknown>;\n/**\n * Constructs a new continuous scale with the specified domain and range, the constant 1, the default interpolator and clamping disabled.\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the output elements generated by the scale.\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n *\n * The range must be set in accordance with the range element type.\n *\n * The interpolator factory may be set using the interpolate(...) method of the scale.\n *\n * @param domain Array of numeric domain values.\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSymlog<Range, Output = Range, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    range: Iterable<Range>,\n): ScaleSymLog<Range, Output, Unknown>;\n\n// -------------------------------------------------------------------------------\n// Identity Scale Factory\n// -------------------------------------------------------------------------------\n\n/**\n * Identity scales are a special case of linear scales where the domain and range are identical; the scale and its invert method are thus the identity function.\n * These scales are occasionally useful when working with pixel coordinates, say in conjunction with an axis.\n *\n * The generic corresponds to the data type of the unknown value.\n */\nexport interface ScaleIdentity<Unknown = never> {\n    /**\n     * Given a value from the domain, returns the corresponding value from the range, subject to interpolation, if any.\n     *\n     * If the given value is outside the domain, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the range.\n     *\n     * Note: The interpolation function applied by the scale may change the output type from the range type as part of the interpolation.\n     *\n     * @param value A numeric value from the domain.\n     */\n    (value: NumberValue): number | Unknown;\n\n    /**\n     * Given a value from the range, returns the corresponding value from the domain. Inversion is useful for interaction,\n     * say to determine the data value corresponding to the position of the mouse.\n     *\n     * If the given value is outside the range, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the domain.\n     *\n     * IMPORTANT: This method is only supported if the range is numeric. If the range is not numeric, returns NaN.\n     *\n     * For a valid value y in the range, continuous(continuous.invert(y)) approximately equals y;\n     * similarly, for a valid value x in the domain, continuous.invert(continuous(x)) approximately equals x.\n     * The scale and its inverse may not be exact due to the limitations of floating point precision.\n     *\n     * @param value A numeric value from the range.\n     */\n    invert(value: NumberValue): number;\n\n    /**\n     * Returns a copy of the scale’s current domain.\n     */\n    domain(): number[];\n    /**\n     * Sets the scale’s domain to the specified array of numbers. The array must contain two or more elements.\n     * If the elements in the given array are not numbers, they will be coerced to numbers\n     *\n     * Although continuous scales typically have two values each in their domain and range, specifying more than two values produces a piecewise scale.\n     *\n     * Internally, a piecewise scale performs a binary search for the range interpolator corresponding to the given domain value.\n     * Thus, the domain must be in ascending or descending order. If the domain and range have different lengths N and M, only the first min(N,M) elements in each are observed.\n     *\n     * @param domain Array of numeric domain values.\n     */\n    domain(domain: Iterable<NumberValue>): this;\n\n    /**\n     * Returns a copy of the scale’s current range.\n     */\n    range(): number[];\n    /**\n     * Sets the scale’s range to the specified array of values.\n     *\n     * The array must contain two or more elements. Unlike the domain, elements in the given array need not be numbers;\n     * any value that is supported by the underlying interpolator will work, though note that numeric ranges are required for invert.\n     *\n     * @param range Array of range values.\n     */\n    range(range: Iterable<NumberValue>): this;\n\n    /**\n     * Returns approximately count representative values from the scale’s domain.\n     *\n     * If count is not specified, it defaults to 10.\n     *\n     * The returned tick values are uniformly spaced, have human-readable values (such as multiples of powers of 10),\n     * and are guaranteed to be within the extent of the domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data.\n     * The specified count is only a hint; the scale may return more or fewer values depending on the domain. See also d3-array’s ticks.\n     *\n     * @param count Optional approximate number of ticks to be returned. If count is not specified, it defaults to 10.\n     */\n    ticks(count?: number): number[];\n\n    /**\n     * Returns a number format function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values.\n     * The specified count should have the same value as the count that is used to generate the tick values.\n     *\n     * @param count Approximate number of ticks to be used when calculating precision for the number format function.\n     * @param specifier An optional valid format specifier string which allows a custom format where the precision of the format is automatically set by the scale as appropriate for the tick interval.\n     * If specifier uses the format type \"s\", the scale will return a SI-prefix format based on the largest value in the domain.\n     * If the specifier already specifies a precision, this method is equivalent to locale.format.\n     */\n    tickFormat(count?: number, specifier?: string): (d: NumberValue) => string;\n\n    /**\n     * Extends the domain so that it starts and ends on nice round values.\n     * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.\n     * An optional tick count argument allows greater control over the step size used to extend the bounds,\n     * guaranteeing that the returned ticks will exactly cover the domain.\n     * Nicing is useful if the domain is computed from data, say using extent, and may be irregular.\n     * For example, for a domain of [0.201479…, 0.996679…], a nice domain might be [0.2, 1.0].\n     * If the domain has more than two values, nicing the domain only affects the first and last value.\n     *\n     * Nicing a scale only modifies the current domain; it does not automatically nice domains that are subsequently set using continuous.domain.\n     * You must re-nice the scale after setting the new domain, if desired.\n     *\n     * @param count An optional number of ticks expected to be used.\n     */\n    nice(count?: number): this;\n\n    /**\n     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n     */\n    copy(): this;\n\n    /**\n     * Returns the current unknown value, which defaults to undefined.\n     */\n    unknown(): UnknownReturnType<Unknown, undefined>;\n    /**\n     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.\n     *\n     * @param value The output value of the scale for undefined (or NaN) input values.\n     */\n    unknown<NewUnknown>(value: NewUnknown): ScaleIdentity<NewUnknown>;\n}\n\n/**\n * Constructs a new identity scale with the specified domain and range.\n * If range is not specified, it defaults to [0, 1].\n *\n * The generic corresponds to the data type of the unknown value.\n *\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleIdentity<Unknown = never>(range?: Iterable<NumberValue>): ScaleIdentity<Unknown>;\n\n// -------------------------------------------------------------------------------\n// Radial Scale Factory\n// -------------------------------------------------------------------------------\n\nexport interface ScaleRadial<Range, Output, Unknown = never> extends ScaleContinuousNumeric<Range, Output, Unknown> {\n    /**\n     * Returns the current unknown value, which defaults to undefined.\n     */\n    unknown(): UnknownReturnType<Unknown, undefined>;\n    /**\n     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.\n     *\n     * @param value The output value of the scale for undefined (or NaN) input values.\n     */\n    unknown<NewUnknown>(value: NewUnknown): ScaleRadial<Range, Output, NewUnknown>;\n}\n\n/**\n * Constructs a new radial scale with the specified range.\n * The domain defaults to [0, 1].\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the unknown value.\n *\n * The range must be set in accordance with the range element type.\n *\n * @param range Iterable of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleRadial<Range = number, Unknown = never>(\n    range?: Iterable<Range>,\n): ScaleRadial<Range, Range, Unknown>;\n/**\n * Constructs a new radial scale with the specified domain and range.\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the unknown value.\n *\n * The range must be set in accordance with the range element type.\n *\n * @param domain Iterable of numeric domain values.\n * @param range Iterable of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleRadial<Range, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    range: Iterable<Range>,\n): ScaleRadial<Range, Range, Unknown>;\n\n// -------------------------------------------------------------------------------\n// Time Scale Factories\n// -------------------------------------------------------------------------------\n\n/**\n * A linear scale defined over a temporal domain.\n *\n * Time scales implement ticks based on calendar intervals, taking the pain out of generating axes for temporal domains.\n *\n * If the range is numeric, the mapping may be inverted to return a date.\n *\n * Note that the data types of the range and output of the scale must be compatible with the interpolator applied by the scale.\n *\n * The first generic corresponds to the data type of the range elements.\n *\n * The second generic corresponds to the data type of the output elements generated by the scale.\n *\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n */\nexport interface ScaleTime<Range, Output, Unknown = never> {\n    /**\n     * Given a value from the domain, returns the corresponding value from the range, subject to interpolation, if any.\n     *\n     * If the given value is outside the domain, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the range.\n     *\n     * Note: The interpolation function applied by the scale may change the output type from the range type as part of the interpolation.\n     *\n     * @param value A temporal value from the domain. If the value is not a Date, it will be coerced to Date.\n     */\n    (value: Date | NumberValue): Output | Unknown;\n\n    /**\n     * Given a value from the range, returns the corresponding value from the domain. Inversion is useful for interaction,\n     * say to determine the data value corresponding to the position of the mouse.\n     *\n     * If the given value is outside the range, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the domain.\n     *\n     * IMPORTANT: This method is only supported if the range is numeric. If the range is not numeric, returns Invalid Date.\n     *\n     * For a valid value y in the range, time(time.invert(y)) equals y; similarly, for a valid value x in the domain, time.invert(time(x)) equals x.\n     * The invert method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse.\n     *\n     * @param value A numeric value from the range.\n     */\n    invert(value: NumberValue): Date;\n\n    /**\n     * Returns a copy of the scale’s current domain.\n     */\n    domain(): Date[];\n\n    /**\n     * Sets the scale’s domain to the specified array of temporal domain values. The array must contain two or more elements.\n     * If the elements in the given array are not dates, they will be coerced to dates.\n     *\n     * Although continuous scales typically have two values each in their domain and range, specifying more than two values produces a piecewise scale.\n     *\n     * Internally, a piecewise scale performs a binary search for the range interpolator corresponding to the given domain value.\n     * Thus, the domain must be in ascending or descending order. If the domain and range have different lengths N and M, only the first min(N,M) elements in each are observed.\n     *\n     * @param domain Array of temporal domain values. Numeric values will be coerced to dates.\n     */\n    domain(domain: Iterable<Date | NumberValue>): this;\n\n    /**\n     * Returns a copy of the scale’s current range.\n     */\n    range(): Range[];\n    /**\n     * Sets the scale’s range to the specified array of values.\n     *\n     * The array must contain two or more elements. Unlike the domain, elements in the given array need not be temporal domain values;\n     * any value that is supported by the underlying interpolator will work, though note that numeric ranges are required for invert.\n     *\n     * @param range Array of range values.\n     */\n    range(range: Iterable<Range>): this;\n\n    /**\n     * Sets the scale’s range to the specified array of values while also setting the scale’s interpolator to interpolateRound.\n     *\n     * The rounding interpolator is sometimes useful for avoiding antialiasing artifacts,\n     * though also consider the shape-rendering “crispEdges” styles. Note that this interpolator can only be used with numeric ranges.\n     *\n     * The array must contain two or more elements. Unlike the domain, elements in the given array need not be temporal domain values;\n     * any value that is supported by the underlying interpolator will work, though note that numeric ranges are required for invert.\n     *\n     * @param range Array of range values.\n     */\n    rangeRound(range: Iterable<NumberValue>): this;\n\n    /**\n     * Returns whether or not the scale currently clamps values to within the range.\n     */\n    clamp(): boolean;\n    /**\n     * Enables or disables clamping, respectively. If clamping is disabled and the scale is passed a value outside the domain,\n     * the scale may return a value outside the range through extrapolation.\n     *\n     * If clamping is enabled, the return value of the scale is always within the scale’s range. Clamping similarly applies to the \"invert\" method.\n     *\n     * @param clamp A flag to enable (true) or disable (false) clamping.\n     */\n    clamp(clamp: boolean): this;\n\n    /**\n     * Returns the scale’s current interpolator factory, which defaults to interpolate.\n     */\n    interpolate(): InterpolatorFactory<any, any>;\n\n    /**\n     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;\n     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.\n     *\n     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.\n     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);\n     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.\n     *\n     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.\n     *\n     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.\n     */\n    interpolate(interpolate: InterpolatorFactory<Range, Output>): this;\n    /**\n     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;\n     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.\n     *\n     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.\n     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);\n     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.\n     *\n     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.\n     *\n     * The generic \"NewOutput\" can be used to change the scale to have a different output element type corresponding to the new interpolation factory.\n     *\n     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.\n     */\n    interpolate<NewOutput>(interpolate: InterpolatorFactory<Range, NewOutput>): ScaleTime<Range, NewOutput, Unknown>;\n\n    /**\n     * Returns representative dates from the scale’s domain. The returned tick values are uniformly-spaced (mostly),\n     * have sensible values (such as every day at midnight), and are guaranteed to be within the extent of the domain.\n     * Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data.\n     *\n     * An optional count may be specified to affect how many ticks are generated. If count is not specified, it defaults to 10.\n     * The specified count is only a hint; the scale may return more or fewer values depending on the domain.\n     *\n     * @param count Expected number of ticks.\n     */\n    ticks(count?: number): Date[];\n    /**\n     * Returns representative dates from the scale’s domain. The returned tick values are uniformly-spaced (mostly),\n     * have sensible values (such as every day at midnight), and are guaranteed to be within the extent of the domain.\n     * Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data.\n     *\n     * The specified time interval controls the ticks generated and returned. To prune the generated ticks for a given time interval,\n     * use interval.every(...) or interval.filter(...).\n     *\n     * @param interval A time interval to specify the expected ticks.\n     */\n    ticks(interval: TimeInterval): Date[];\n\n    /**\n     * Returns a time format function suitable for displaying tick values.\n     *\n     * The default multi-scale time format chooses a human-readable representation based on the specified date as follows:\n     *\n     *  - %Y - for year boundaries, such as 2011.\n     *  - %B - for month boundaries, such as February.\n     *  - %b %d - for week boundaries, such as Feb 06.\n     *  - %a %d - for day boundaries, such as Mon 07.\n     *  - %I %p - for hour boundaries, such as 01 AM.\n     *  - %I:%M - for minute boundaries, such as 01:23.\n     *  - :%S - for second boundaries, such as :45.\n     *  - .%L - milliseconds for all other times, such as .012.\n     *\n     * Although somewhat unusual, this default behavior has the benefit of providing both local and global context:\n     * for example, formatting a sequence of ticks as [11 PM, Mon 07, 01 AM] reveals information about hours, dates, and day simultaneously,\n     * rather than just the hours [11 PM, 12 AM, 01 AM].\n     *\n     * The specified count is currently ignored, but is accepted for consistency with other scales such as continuous.tickFormat.\n     *\n     * @param count Expected number of ticks. (Currently ignored)\n     * @param specifier An optional valid date format specifier string (see d3-time-format).\n     */\n    tickFormat(count?: number, specifier?: string): (d: Date) => string;\n    /**\n     * Returns a time format function suitable for displaying tick values.\n     *\n     * The specified time interval is currently ignored, but is accepted for consistency with other scales such as continuous.tickFormat.\n     *\n     * @param interval A time interval to specify the expected ticks. (Currently ignored)\n     * @param specifier An optional valid date format specifier string (see d3-time-format).\n     */\n    tickFormat(interval: TimeInterval, specifier?: string): (d: Date) => string;\n\n    /**\n     * Extends the domain so that it starts and ends on nice round values.\n     * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.\n     *\n     * An optional count argument allows greater control over the step size used to extend the bounds, guaranteeing that the returned ticks will exactly cover the domain.\n     *\n     * Nicing is useful if the domain is computed from data, say using extent, and may be irregular.\n     * For example, for a domain of [2009-07-13T00:02, 2009-07-13T23:48], the nice domain is [2009-07-13, 2009-07-14].\n     * If the domain has more than two values, nicing the domain only affects the first and last value.\n     *\n     * @param count Expected number of ticks.\n     */\n    nice(count?: number): this;\n    /**\n     * Extends the domain so that it starts and ends on nice round values.\n     * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.\n     *\n     * A time interval may be specified to explicitly set the ticks.\n     * If an interval is specified, an optional step may also be specified to skip some ticks.\n     * For example, time.nice(d3.timeSecond.every(10)) will extend the domain to an even ten seconds (0, 10, 20, etc.).\n     * See time.ticks and interval.every for further detail.\n     *\n     * Nicing is useful if the domain is computed from data, say using extent, and may be irregular.\n     * For example, for a domain of [2009-07-13T00:02, 2009-07-13T23:48], the nice domain is [2009-07-13, 2009-07-14].\n     * If the domain has more than two values, nicing the domain only affects the first and last value.\n     *\n     * @param interval A time interval to specify the expected ticks.\n     */\n    nice(interval: CountableTimeInterval): this;\n\n    /**\n     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n     */\n    copy(): this;\n\n    /**\n     * Returns the current unknown value, which defaults to undefined.\n     */\n    unknown(): UnknownReturnType<Unknown, undefined>;\n    /**\n     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.\n     *\n     * @param value The output value of the scale for undefined (or NaN) input values.\n     */\n    unknown<NewUnknown>(value: NewUnknown): ScaleTime<Range, Output, NewUnknown>;\n}\n\n/**\n * Constructs a new time scale with the specified range, the default interpolator and clamping disabled.\n * The domain defaults to [2000-01-01, 2000-01-02].\n * If range is not specified, it defaults to [0, 1].\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the output elements generated by the scale.\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n *\n * The range must be set in accordance with the range element type.\n *\n * The interpolator factory may be set using the interpolate(...) method of the scale.\n *\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleTime<Range = number, Output = Range, Unknown = never>(\n    range?: Iterable<Range>,\n): ScaleTime<Range, Output, Unknown>;\n/**\n * Constructs a new time scale with the specified domain and range, the default interpolator and clamping disabled.\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the output elements generated by the scale.\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n *\n * The range must be set in accordance with the range element type.\n *\n * The interpolator factory may be set using the interpolate(...) method of the scale.\n *\n * @param domain Array of temporal domain values. Numeric values will be coerced to dates.\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleTime<Range, Output = Range, Unknown = never>(\n    domain: Iterable<Date | NumberValue>,\n    range: Iterable<Range>,\n): ScaleTime<Range, Output, Unknown>;\n\n/**\n * Constructs a new time scale using Coordinated Universal Time (UTC) with the specified range, the default interpolator and clamping disabled.\n * The domain defaults to [2000-01-01, 2000-01-02].\n * If range is not specified, it defaults to [0, 1].\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the output elements generated by the scale.\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n *\n * The range must be set in accordance with the range element type.\n *\n * The interpolator factory may be set using the interpolate(...) method of the scale.\n *\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleUtc<Range = number, Output = Range, Unknown = never>(\n    range?: Iterable<Range>,\n): ScaleTime<Range, Output, Unknown>;\n/**\n * Constructs a new time scale using Coordinated Universal Time (UTC) with the specified domain and range, the default interpolator and clamping disabled.\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the output elements generated by the scale.\n * The third generic corresponds to the data type of the unknown value.\n *\n * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and\n * convert the interpolated range element to a corresponding output element.\n *\n * The range must be set in accordance with the range element type.\n *\n * The interpolator factory may be set using the interpolate(...) method of the scale.\n *\n * @param domain Array of temporal domain values. Numeric values will be coerced to dates.\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleUtc<Range, Output = Range, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    range: Iterable<Range>,\n): ScaleTime<Range, Output, Unknown>;\n\n// -------------------------------------------------------------------------------\n// Sequential Scale Factory\n// -------------------------------------------------------------------------------\n\n/**\n * Sequential scales are similar to continuous scales in that they map a continuous, numeric input domain to a continuous output range.\n * However, unlike continuous scales, the input domain and output range of a sequential scale always has exactly two elements,\n * and the output range is typically specified as an interpolator rather than an array of values.\n * These scales do not expose invert and interpolate methods.\n *\n * The first generic corresponds to the data type of the output of the interpolator underlying the scale.\n *\n * The second generic corresponds to the data type of the unknown value.\n */\nexport interface ScaleSequentialBase<Output, Unknown = never> {\n    /**\n     * Given a value from the domain, returns the corresponding value from the output range, subject to interpolation.\n     *\n     * If the given value is outside the domain, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the range.\n     *\n     * @param value A numeric value from the domain.\n     */\n    (value: NumberValue): Output | Unknown;\n\n    /**\n     * Returns a copy of the scale’s current domain.\n     */\n    domain(): [number, number];\n    /**\n     * Sets the scale’s domain to the specified array of numbers. The array must contain exactly two elements.\n     * If the elements in the given array are not numbers, they will be coerced to numbers\n     *\n     * @param domain A two-element array of numeric domain values.\n     */\n    domain(domain: Iterable<NumberValue>): this;\n\n    /**\n     * Returns whether or not the scale currently clamps values to within the range.\n     */\n    clamp(): boolean;\n    /**\n     * Enables or disables clamping, respectively. If clamping is disabled and the scale is passed a value outside the domain,\n     * the scale may return a value outside the range through extrapolation.\n     *\n     * If clamping is enabled, the return value of the scale is always within the scale’s range. Clamping similarly applies to the \"invert\" method.\n     *\n     * @param clamp A flag to enable (true) or disable (false) clamping.\n     */\n    clamp(clamp: boolean): this;\n\n    /**\n     * See continuous.range.\n     */\n    range(): [Output, Output];\n    /**\n     * See continuous.range.\n     * The given two-element array is converted to an interpolator function using d3.interpolate.\n     *\n     * @param range Range values.\n     */\n    range(range: Iterable<Output>): this;\n\n    /**\n     * See continuous.rangeRound.\n     * If range is specified, implicitly uses d3.interpolateRound as the interpolator.\n     *\n     * @param range Range values.\n     */\n    rangeRound(range: Iterable<NumberValue>): this;\n\n    /**\n     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n     */\n    copy(): this;\n}\n\nexport interface ScaleSequential<Output, Unknown = never> extends ScaleSequentialBase<Output, Unknown> {\n    /**\n     * Returns the current interpolator underlying the scale.\n     */\n    interpolator(): (t: number) => Output;\n    /**\n     * Sets the scale’s interpolator to the specified function.\n     *\n     * @param interpolator An interpolator function mapping a value from the [0, 1] interval to an output value.\n     */\n    interpolator(interpolator: (t: number) => Output): this;\n    /**\n     * Sets the scale’s interpolator to the specified function.\n     *\n     * The generic corresponds to a the new output type of the scale. The output type of the scale is determined by the output type of the interpolator function.\n     *\n     * @param interpolator An interpolator function mapping a value from the [0, 1] interval to an output value.\n     */\n    interpolator<NewOutput>(interpolator: (t: number) => NewOutput): ScaleSequential<NewOutput, Unknown>;\n\n    /**\n     * Returns the current unknown value, which defaults to undefined.\n     */\n    unknown(): UnknownReturnType<Unknown, undefined>;\n    /**\n     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.\n     *\n     * @param value The output value of the scale for undefined (or NaN) input values.\n     */\n    unknown<NewUnknown>(value: NewUnknown): ScaleSequential<Output, NewUnknown>;\n}\n\n/**\n * Constructs a new sequential scale with the specified interpolator function or array.\n * The domain defaults to [0, 1].\n * If interpolator is not specified, it defaults to the identity function.\n * When the scale is applied, the interpolator will be invoked with a value typically in the range [0, 1], where 0 represents the minimum value and 1 represents the maximum value.\n *\n * If interpolator is an array, it represents the scale’s two-element output range and is converted to an interpolator function using d3.interpolate.\n *\n * The first generic corresponds to the data type of the output of the interpolator underlying the scale.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param interpolator The interpolator function or array to be used with the scale.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSequential<Output = number, Unknown = never>(\n    interpolator?: ((t: number) => Output) | Iterable<Output>,\n): ScaleSequential<Output, Unknown>;\n/**\n * Constructs a new sequential scale with the specified domain and interpolator function or array.\n * When the scale is applied, the interpolator will be invoked with a value typically in the range [0, 1], where 0 represents the minimum value and 1 represents the maximum value.\n *\n * If interpolator is an array, it represents the scale’s two-element output range and is converted to an interpolator function using d3.interpolate.\n *\n * The first generic corresponds to the data type of the output of the interpolator underlying the scale.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param domain A two-element array of numeric domain values.\n * @param interpolator The interpolator function or array to be used with the scale.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSequential<Output, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    interpolator: ((t: number) => Output) | Iterable<Output>,\n): ScaleSequential<Output, Unknown>;\n\n/**\n * A sequential scale with a logarithmic transform, analogous to a log scale.\n *\n * The first generic corresponds to the data type of the output of the interpolator underlying the scale.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param interpolator The interpolator function to be used with the scale.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSequentialLog<Output = number, Unknown = never>(\n    interpolator?: (t: number) => Output,\n): ScaleSequential<Output, Unknown>;\n/**\n * A sequential scale with a logarithmic transform, analogous to a log scale.\n *\n * The first generic corresponds to the data type of the output of the interpolator underlying the scale.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param domain A two-element array of numeric domain values.\n * @param interpolator The interpolator function to be used with the scale.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSequentialLog<Output, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    interpolator: (t: number) => Output,\n): ScaleSequential<Output, Unknown>;\n\n/**\n * A sequential scale with a exponential transform, analogous to a power scale.\n *\n * The first generic corresponds to the data type of the output of the interpolator underlying the scale.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param interpolator The interpolator function to be used with the scale.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSequentialPow<Output = number, Unknown = never>(\n    interpolator?: (t: number) => Output,\n): ScaleSequential<Output, Unknown>;\n/**\n * A sequential scale with a exponential transform, analogous to a power scale.\n *\n * The first generic corresponds to the data type of the output of the interpolator underlying the scale.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param domain A two-element array of numeric domain values.\n * @param interpolator The interpolator function to be used with the scale.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSequentialPow<Output, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    interpolator: (t: number) => Output,\n): ScaleSequential<Output, Unknown>;\n\n/**\n * A sequential scale with a square-root transform, analogous to a d3.scaleSqrt.\n *\n * The first generic corresponds to the data type of the output of the interpolator underlying the scale.\n * The second third generic corresponds to the data type of the unknown value.\n *\n * @param interpolator The interpolator function to be used with the scale.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSequentialSqrt<Output = number, Unknown = never>(\n    interpolator?: (t: number) => Output,\n): ScaleSequential<Output, Unknown>;\n/**\n * A sequential scale with a square-root transform, analogous to a d3.scaleSqrt.\n *\n * The first generic corresponds to the data type of the output of the interpolator underlying the scale.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param domain A two-element array of numeric domain values.\n * @param interpolator The interpolator function to be used with the scale.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSequentialSqrt<Output, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    interpolator: (t: number) => Output,\n): ScaleSequential<Output, Unknown>;\n\n/**\n * A sequential scale with a symmetric logarithmic transform, analogous to a symlog scale.\n *\n * The first generic corresponds to the data type of the output of the interpolator underlying the scale.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param interpolator The interpolator function to be used with the scale.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSequentialSymlog<Output = number, Unknown = never>(\n    interpolator?: (t: number) => Output,\n): ScaleSequential<Output, Unknown>;\n/**\n * A sequential scale with a symmetric logarithmic transform, analogous to a symlog scale.\n *\n * The first generic corresponds to the data type of the output of the interpolator underlying the scale.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param domain A two-element array of numeric domain values.\n * @param interpolator The interpolator function to be used with the scale.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSequentialSymlog<Output, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    interpolator: (t: number) => Output,\n): ScaleSequential<Output, Unknown>;\n\nexport interface ScaleSequentialQuantile<Output, Unknown = never> extends ScaleSequentialBase<Output, Unknown> {\n    /**\n     * Returns an array of n + 1 quantiles.\n     * For example, if n = 4, returns an array of five numbers: the minimum value, the first quartile, the median, the third quartile, and the maximum.\n     */\n    quantiles(): number[];\n\n    /**\n     * Returns the current interpolator underlying the scale.\n     */\n    interpolator(): (t: number) => Output;\n    /**\n     * Sets the scale’s interpolator to the specified function.\n     *\n     * @param interpolator An interpolator function mapping a value from the [0, 1] interval to an output value.\n     */\n    interpolator(interpolator: (t: number) => Output): this;\n    /**\n     * Sets the scale’s interpolator to the specified function.\n     *\n     * The generic corresponds to a the new output type of the scale. The output type of the scale is determined by the output type of the interpolator function.\n     *\n     * @param interpolator An interpolator function mapping a value from the [0, 1] interval to an output value.\n     */\n    interpolator<NewOutput>(interpolator: (t: number) => NewOutput): ScaleSequentialQuantile<NewOutput, Unknown>;\n\n    /**\n     * Returns the current unknown value, which defaults to undefined.\n     */\n    unknown(): UnknownReturnType<Unknown, undefined>;\n    /**\n     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.\n     *\n     * @param value The output value of the scale for undefined (or NaN) input values.\n     */\n    unknown<NewUnknown>(value: NewUnknown): ScaleSequentialQuantile<Output, NewUnknown>;\n}\n\n/**\n * A sequential scale using a p-quantile transform, analogous to a quantile scale.\n *\n * The first generic corresponds to the data type of the output of the interpolator underlying the scale.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param interpolator The interpolator function to be used with the scale.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSequentialQuantile<Output = number, Unknown = never>(\n    interpolator?: (t: number) => Output,\n): ScaleSequentialQuantile<Output, Unknown>;\n/**\n * A sequential scale using a p-quantile transform, analogous to a quantile scale.\n *\n * The first generic corresponds to the data type of the output of the interpolator underlying the scale.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param domain A two-element array of numeric domain values.\n * @param interpolator The interpolator function to be used with the scale.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleSequentialQuantile<Output, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    interpolator: (t: number) => Output,\n): ScaleSequentialQuantile<Output, Unknown>;\n\n// -------------------------------------------------------------------------------\n// Diverging Scale Factory\n// -------------------------------------------------------------------------------\n\n/**\n * Diverging scales, like sequential scales, are similar to continuous scales in that they map a continuous, numeric input domain to a continuous output range.\n * However, unlike continuous scales, the input domain and output range of a diverging scale always has exactly three elements,\n * and the output range is typically specified as an interpolator rather than an array of values.\n * These scales do not expose invert and interpolate methods.\n *\n * The first generic corresponds to the data type of the interpolator return type.\n *\n * The second generic corresponds to the data type of the unknown value.\n */\nexport interface ScaleDiverging<Output, Unknown = never> {\n    /**\n     * Given a value from the domain, returns the corresponding value subject to interpolation.\n     *\n     * If the given value is outside the domain, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the range.\n     *\n     * @param value A numeric value from the domain.\n     */\n    (value: NumberValue): Output | Unknown;\n\n    /**\n     * Returns a copy of the scale’s current domain.\n     */\n    domain(): [number, number, number];\n    /**\n     * Sets the scale’s domain to the specified array of numbers.\n     * The domain must be numeric and must contain exactly three values. The default domain is [0, 0.5, 1].\n     * If the elements in the given array are not numbers, they will be coerced to numbers\n     *\n     * @param domain Array of three numeric domain values.\n     */\n    domain(domain: Iterable<NumberValue>): this;\n\n    /**\n     * Returns whether or not the scale currently clamps values to within the range.\n     */\n    clamp(): boolean;\n    /**\n     * Enables or disables clamping, respectively. If clamping is disabled and the scale is passed a value outside the domain,\n     * the scale may return a value outside the range through extrapolation.\n     *\n     * If clamping is enabled, the return value of the scale is always within the interpolator scale’s range.\n     *\n     * @param clamp A flag to enable (true) or disable (false) clamping.\n     */\n    clamp(clamp: boolean): this;\n\n    /**\n     * Returns the scale’s current interpolator.\n     */\n    interpolator(): (t: number) => Output;\n    /**\n     * Sets the scale’s interpolator to the specified function.\n     *\n     * @param interpolator The scale’s interpolator.\n     */\n    interpolator(interpolator?: (t: number) => Output): this;\n\n    /**\n     * See continuous.range.\n     */\n    range(): [Output, Output, Output];\n    /**\n     * See continuous.range.\n     * The given two-element array is converted to an interpolator function using d3.interpolate and d3.piecewise.\n     *\n     * @param range Range values.\n     */\n    range(range: Iterable<Output>): this;\n\n    /**\n     * See continuous.rangeRound.\n     * If range is specified, implicitly uses d3.interpolateRound as the interpolator.\n     *\n     * @param range Range values.\n     */\n    rangeRound(range: Iterable<NumberValue>): this;\n\n    /**\n     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n     */\n    copy(): this;\n\n    /**\n     * Returns the current unknown value, which defaults to undefined.\n     */\n    unknown(): UnknownReturnType<Unknown, undefined>;\n    /**\n     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.\n     *\n     * @param value The output value of the scale for undefined (or NaN) input values.\n     */\n    unknown<NewUnknown>(value: NewUnknown): ScaleDiverging<Output, NewUnknown>;\n}\n\n/**\n * Constructs a new diverging scale with the specified interpolator function or array.\n * The domain defaults to [0, 0.5, 1].\n * If interpolator is not specified, it defaults to the identity function.\n * When the scale is applied, the interpolator will be invoked with a value typically in the range [0, 1],\n * where 0 represents the extreme negative value, 0.5 represents the neutral value, and 1 represents the extreme positive value.\n *\n * If interpolator is an array, it represents the scale’s three-element output range and is converted to an interpolator function using d3.interpolate and d3.piecewise.\n *\n * The first generic corresponds to the data type of the interpolator return type.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param interpolator The scale’s interpolator function or array.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleDiverging<Output = number, Unknown = never>(\n    interpolator?: ((t: number) => Output) | Iterable<Output>,\n): ScaleDiverging<Output, Unknown>;\n/**\n * Constructs a new diverging scale with the specified domain and interpolator function or array.\n * When the scale is applied, the interpolator will be invoked with a value typically in the range [0, 1],\n * where 0 represents the extreme negative value, 0.5 represents the neutral value, and 1 represents the extreme positive value.\n *\n * If interpolator is an array, it represents the scale’s three-element output range and is converted to an interpolator function using d3.interpolate and d3.piecewise.\n *\n * The first generic corresponds to the data type of the interpolator return type.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param domain Array of three numeric domain values.\n * @param interpolator The scale’s interpolator function or array.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleDiverging<Output, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    interpolator: ((t: number) => Output) | Iterable<Output>,\n): ScaleDiverging<Output, Unknown>;\n\n/**\n * A diverging scale with a logarithmic transform, analogous to a log scale.\n *\n * The first generic corresponds to the data type of the interpolator return type.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param interpolator The scale’s interpolator.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleDivergingLog<Output = number, Unknown = never>(\n    interpolator?: (t: number) => Output,\n): ScaleDiverging<Output, Unknown>;\n/**\n * A diverging scale with a logarithmic transform, analogous to a log scale.\n *\n * The first generic corresponds to the data type of the interpolator return type.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param domain Array of three numeric domain values.\n * @param interpolator The scale’s interpolator.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleDivergingLog<Output, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    interpolator: (t: number) => Output,\n): ScaleDiverging<Output, Unknown>;\n\n/**\n * A diverging scale with a exponential transform, analogous to a power scale.\n *\n * The first generic corresponds to the data type of the interpolator return type.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param interpolator The scale’s interpolator.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleDivergingPow<Output = number, Unknown = never>(\n    interpolator?: (t: number) => Output,\n): ScaleDiverging<Output, Unknown>;\n/**\n * A diverging scale with a exponential transform, analogous to a power scale.\n *\n * The first generic corresponds to the data type of the interpolator return type.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param domain Array of three numeric domain values.\n * @param interpolator The scale’s interpolator.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleDivergingPow<Output, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    interpolator: (t: number) => Output,\n): ScaleDiverging<Output, Unknown>;\n\n/**\n * A diverging scale with a square-root transform, analogous to a d3.scaleSqrt.\n *\n * The first generic corresponds to the data type of the interpolator return type.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param interpolator The scale’s interpolator.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleDivergingSqrt<Output = number, Unknown = never>(\n    interpolator?: (t: number) => Output,\n): ScaleDiverging<Output, Unknown>;\n/**\n * A diverging scale with a square-root transform, analogous to a d3.scaleSqrt.\n *\n * The first generic corresponds to the data type of the interpolator return type.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param domain Array of three numeric domain values.\n * @param interpolator The scale’s interpolator.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleDivergingSqrt<Output, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    interpolator: (t: number) => Output,\n): ScaleDiverging<Output, Unknown>;\n\n/**\n * A diverging scale with a symmetric logarithmic transform, analogous to a symlog scale.\n *\n * The first generic corresponds to the data type of the interpolator return type.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param interpolator The scale’s interpolator.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleDivergingSymlog<Output = number, Unknown = never>(\n    interpolator?: (t: number) => Output,\n): ScaleDiverging<Output, Unknown>;\n/**\n * A diverging scale with a symmetric logarithmic transform, analogous to a symlog scale.\n *\n * The first generic corresponds to the data type of the interpolator return type.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param domain Array of three numeric domain values.\n * @param interpolator The scale’s interpolator.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleDivergingSymlog<Output, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    interpolator: (t: number) => Output,\n): ScaleDiverging<Output, Unknown>;\n\n// -------------------------------------------------------------------------------\n// Quantize Scale Factory\n// -------------------------------------------------------------------------------\n\n/**\n * Quantize scales are similar to linear scales, except they use a discrete rather than continuous range.\n * The continuous input domain is divided into uniform segments based on the number of values in (i.e., the cardinality of) the output range.\n *\n * Each range value y can be expressed as a quantized linear function of the domain value x: y = m round(x) + b.\n *\n * The first generic corresponds to the data type of the range elements.\n *\n * The second generic corresponds to the data type of the unknown value.\n */\nexport interface ScaleQuantize<Range, Unknown = never> {\n    /**\n     * Given a value in the input domain, returns the corresponding value in the output range.\n     */\n    (value: NumberValue): Range | Unknown;\n    /**\n     * Returns the extent of values in the domain [x0, x1] for the corresponding value in the range: the inverse of quantize.\n     * This method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse.\n     *\n     * If an invalid range value is entered, returns [NaN, NaN].\n     *\n     * @param value A value from the range.\n     */\n    invertExtent(value: Range): [number, number];\n\n    /**\n     * Returns the scale’s current domain.\n     */\n    domain(): [number, number];\n\n    /**\n     * Sets the scale’s domain to the specified two-element array of numbers.\n     * If the elements in the given array are not numbers, they will be coerced to numbers.\n     *\n     * @param domain A two-element array of numeric values defining the domain.\n     */\n    domain(domain: Iterable<NumberValue>): this;\n\n    /**\n     * Returns the scale’s current range.\n     */\n    range(): Range[];\n    /**\n     * Sets the scale’s range to the specified array of values. The array may contain any number of discrete values.\n     *\n     * @param range Array of range values.\n     */\n    range(range: Iterable<Range>): this;\n\n    /**\n     * Returns approximately count representative values from the scale’s domain.\n     *\n     * If count is not specified, it defaults to 10.\n     *\n     * The returned tick values are uniformly spaced, have human-readable values (such as multiples of powers of 10),\n     * and are guaranteed to be within the extent of the domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data.\n     * The specified count is only a hint; the scale may return more or fewer values depending on the domain. See also d3-array’s ticks.\n     *\n     * @param count Optional approximate number of ticks to be returned. If count is not specified, it defaults to 10.\n     */\n    ticks(count?: number): number[];\n\n    /**\n     * Returns a number format function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values.\n     * The specified count should have the same value as the count that is used to generate the tick values.\n     *\n     * @param count Approximate number of ticks to be used when calculating precision for the number format function.\n     * @param specifier An optional valid format specifier string which allows a custom format where the precision of the format is automatically set by the scale as appropriate for the tick interval.\n     * If specifier uses the format type \"s\", the scale will return a SI-prefix format based on the largest value in the domain.\n     * If the specifier already specifies a precision, this method is equivalent to locale.format.\n     */\n    tickFormat(count?: number, specifier?: string): (d: NumberValue) => string;\n\n    /**\n     * Extends the domain so that it starts and ends on nice round values.\n     * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.\n     *\n     * Nicing is useful if the domain is computed from data, say using extent, and may be irregular.\n     * For example, for a domain of [0.201479…, 0.996679…], a nice domain might be [0.2, 1.0].\n     *\n     * Nicing a scale only modifies the current domain; it does not automatically nice domains that are subsequently set using continuous.domain.\n     * You must re-nice the scale after setting the new domain, if desired.\n     *\n     * @param count An optional number of ticks expected to be used.\n     */\n    nice(count?: number): this;\n\n    /**\n     * Returns the current unknown value, which defaults to undefined.\n     */\n    unknown(): UnknownReturnType<Unknown, undefined>;\n    /**\n     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.\n     *\n     * @param value The output value of the scale for undefined (or NaN) input values.\n     */\n    unknown<NewUnknown>(value: NewUnknown): ScaleQuantize<Range, NewUnknown>;\n\n    /**\n     * Returns the array of computed thresholds within the domain.\n     */\n    thresholds(): number[];\n\n    /**\n     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n     */\n    copy(): this;\n}\n\n/**\n * Constructs a new quantize scale with the specified range.\n * The domain defaults to [0, 1].\n * If range is not specified, it defaults to [0, 1].\n * Thus, the default quantize scale is equivalent to the Math.round function.\n *\n * The range must be set corresponding to the type of the range elements.\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleQuantize<Range = number, Unknown = never>(range?: Iterable<Range>): ScaleQuantize<Range, Unknown>;\n/**\n * Constructs a new quantize scale with the specified domain and range.\n * Thus, the default quantize scale is equivalent to the Math.round function.\n *\n * The range must be set corresponding to the type of the range elements.\n *\n * The first generic corresponds to the data type of the range elements.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param domain A two-element array of numeric values defining the domain.\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleQuantize<Range, Unknown = never>(\n    domain: Iterable<NumberValue>,\n    range: Iterable<Range>,\n): ScaleQuantize<Range, Unknown>;\n\n// -------------------------------------------------------------------------------\n// Quantile Scale Factory\n// -------------------------------------------------------------------------------\n\n/**\n * Quantile scales map a sampled input domain to a discrete range.\n * The domain is considered continuous and thus the scale will accept any reasonable input value;\n * however, the domain is specified as a discrete set of sample values.\n * The number of values in (the cardinality of) the output range determines the number of quantiles that will be computed from the domain.\n * To compute the quantiles, the domain is sorted, and treated as a population of discrete values; see d3-array’s quantile.\n *\n * The first generic corresponds to the data type of range elements.\n *\n * The second generic corresponds to the data type of the unknown value.\n */\nexport interface ScaleQuantile<Range, Unknown = never> {\n    /**\n     * Given a value in the input domain, returns the corresponding value in the output range.\n     *\n     * @param value A numeric value in the input domain.\n     */\n    (value: NumberValue): Range | Unknown;\n\n    /**\n     * Returns the extent of values in the domain [x0, x1] for the corresponding value in the range: the inverse of quantile.\n     * This method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse.\n     *\n     * @param value A value from the range.\n     */\n    invertExtent(value: Range): [number, number];\n\n    /**\n     * Returns the scale’s current domain.\n     */\n    domain(): number[];\n    /**\n     * Sets the domain of the quantile scale to the specified set of discrete numeric values.\n     * The array must not be empty, and must contain at least one numeric value; NaN, null and undefined values are ignored and not considered part of the sample population.\n     *\n     * If the elements in the given array are not numbers, they will be coerced to numbers. A copy of the input array is sorted and stored internally.\n     *\n     * @param domain Array of domain values.\n     */\n    domain(domain: Iterable<NumberValue | null | undefined>): this;\n\n    /**\n     * Returns the current range.\n     */\n    range(): Range[];\n    /**\n     * Sets the discrete values in the range. The array must not be empty.\n     * The number of values in (the cardinality, or length, of) the range array determines the number of quantiles that are computed.\n     *\n     * For example, to compute quartiles, range must be an array of four elements such as [0, 1, 2, 3].\n     *\n     * @param range Array of range values.\n     */\n    range(range: Iterable<Range>): this;\n\n    /**\n     * Returns the quantile thresholds. If the range contains n discrete values, the returned array will contain n - 1 thresholds.\n     * Values less than the first threshold are considered in the first quantile;\n     * values greater than or equal to the first threshold but less than the second threshold are in the second quantile, and so on.\n     * Internally, the thresholds array is used with bisect to find the output quantile associated with the given input value.\n     */\n    quantiles(): number[];\n\n    /**\n     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n     */\n    copy(): this;\n\n    /**\n     * Returns the current unknown value, which defaults to undefined.\n     */\n    unknown(): UnknownReturnType<Unknown, undefined>;\n    /**\n     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.\n     *\n     * @param value The output value of the scale for undefined (or NaN) input values.\n     */\n    unknown<NewUnknown>(value: NewUnknown): ScaleQuantile<Range, NewUnknown>;\n}\n\n/**\n * Constructs a new quantile scale with the specified range.\n * The domain defaults to the empty array.\n * If range is not specified, it defaults to the empty array.\n * The quantile scale is invalid until both a domain and range are specified.\n *\n * The first generic corresponds to the data type of range elements.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleQuantile<Range = number, Unknown = never>(range?: Iterable<Range>): ScaleQuantile<Range, Unknown>;\n/**\n * Constructs a new quantile scale with the specified domain and range.\n * The quantile scale is invalid until both a domain and range are specified.\n *\n * The first generic corresponds to the data type of range elements.\n * The second generic corresponds to the data type of the unknown value.\n *\n * @param domain Array of domain values.\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleQuantile<Range, Unknown = never>(\n    domain: Iterable<NumberValue | null | undefined>,\n    range: Iterable<Range>,\n): ScaleQuantile<Range, Unknown>;\n\n// -------------------------------------------------------------------------------\n// Threshold Scale Factory\n// -------------------------------------------------------------------------------\n\n/**\n * Threshold scales are similar to quantize scales, except they allow you to map arbitrary subsets of the domain to discrete values in the range.\n * The input domain is still continuous, and divided into slices based on a set of threshold values.\n *\n * If the number of values in the scale’s range is N+1, the number of values in the scale’s domain must be N.\n * If there are fewer than N elements in the domain, the additional values in the range are ignored.\n * If there are more than N elements in the domain, the scale may return undefined for some inputs.\n *\n * The first generic corresponds to the data type of domain values.\n * The second generic corresponds to the data type of range values.\n * The third generic corresponds to the data type of the unknown value.\n */\nexport interface ScaleThreshold<Domain extends number | string | Date, Range, Unknown = never> {\n    /**\n     * Given a value in the input domain, returns the corresponding value in the output range.\n     *\n     * @param value A domain value.\n     */\n    (value: Domain): Range | Unknown;\n\n    /**\n     * Returns the extent of values in the domain [x0, x1] for the corresponding value in the range, representing the inverse mapping from range to domain.\n     * This method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse.\n     *\n     * @param value A range value.\n     */\n    invertExtent(value: Range): [Domain | undefined, Domain | undefined];\n\n    /**\n     * Returns the scale’s current domain.\n     */\n    domain(): Domain[];\n    /**\n     * Sets the scale’s domain to the specified array of values. The values must be in sorted ascending order, or the behavior of the scale is undefined.\n     * The values are typically numbers, but any naturally ordered values (such as strings) will work; a threshold scale can be used to encode any type that is ordered.\n     * If the number of values in the scale’s range is N+1, the number of values in the scale’s domain must be N.\n     * If there are fewer than N elements in the domain, the additional values in the range are ignored.\n     * If there are more than N elements in the domain, the scale may return undefined for some inputs.\n     *\n     * @param domain Array of domain values.\n     */\n    domain(domain: Iterable<Domain>): this;\n\n    /**\n     * Returns the scale’s current range.\n     */\n    range(): Range[];\n    /**\n     * Sets the scale’s range to the specified array of values. If the number of values in the scale’s domain is N, the number of values in the scale’s range must be N+1.\n     * If there are fewer than N+1 elements in the range, the scale may return undefined for some inputs.\n     * If there are more than N+1 elements in the range, the additional values are ignored.\n     *\n     * @param range Array of range values.\n     */\n    range(range: Iterable<Range>): this;\n\n    /**\n     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n     */\n    copy(): this;\n\n    /**\n     * Returns the current unknown value, which defaults to undefined.\n     */\n    unknown(): UnknownReturnType<Unknown, undefined>;\n    /**\n     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.\n     *\n     * @param value The output value of the scale for undefined (or NaN) input values.\n     */\n    unknown<NewUnknown>(value: NewUnknown): ScaleThreshold<Domain, Range, NewUnknown>;\n}\n\n/**\n * Constructs a new threshold scale with the specified range.\n * The domain defaults to [0.5].\n * If range is not specified, it defaults to [0, 1].\n * Thus, the default threshold scale is equivalent to the Math.round function for numbers; for example threshold(0.49) returns 0, and threshold(0.51) returns 1.\n *\n * The first generic corresponds to the data type of domain values.\n * The second generic corresponds to the data type of range values.\n * The third generic corresponds to the data type of the unknown value.\n *\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleThreshold<Domain extends number | string | Date = number, Range = number, Unknown = never>(\n    range?: Iterable<Range>,\n): ScaleThreshold<Domain, Range, Unknown>;\n/**\n * Constructs a new threshold scale with the specified domain and range.\n * Thus, the default threshold scale is equivalent to the Math.round function for numbers; for example threshold(0.49) returns 0, and threshold(0.51) returns 1.\n *\n * The first generic corresponds to the data type of domain values.\n * The second generic corresponds to the data type of range values.\n * The third generic corresponds to the data type of the unknown value.\n *\n * @param domain Array of domain values.\n * @param range Array of range values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleThreshold<Domain extends number | string | Date, Range, Unknown = never>(\n    domain: Iterable<Domain>,\n    range: Iterable<Range>,\n): ScaleThreshold<Domain, Range, Unknown>;\n\n// -------------------------------------------------------------------------------\n// Ordinal Scale Factory\n// -------------------------------------------------------------------------------\n\n/**\n * Unlike continuous scales, ordinal scales have a discrete domain and range. For example, an ordinal scale might map a set of named categories to a set of colors,\n * or determine the horizontal positions of columns in a column chart.\n *\n * The first element in the domain will be mapped to the first element in range, the second domain value to the second range value, and so on.\n * If there are fewer elements in the range than in the domain, the scale will reuse values from the start of the range.\n *\n * The first generic corresponds to the data type of domain values.\n * The second generic corresponds to the data type of range values.\n * The third generic corresponds to the data type of the unknown value.\n */\nexport interface ScaleOrdinal<Domain extends { toString(): string }, Range, Unknown = never> {\n    /**\n     * Given a value in the input domain, returns the corresponding value in the output range.\n     * If the given value is not in the scale’s domain, returns the unknown; or, if the unknown value is implicit (the default),\n     * then the value is implicitly added to the domain and the next-available value in the range is assigned to value,\n     * such that this and subsequent invocations of the scale given the same input value return the same output value.\n     *\n     * @param x A value from the domain.\n     */\n    (x: Domain): Range | Unknown;\n\n    /**\n     * Returns the scale's current domain.\n     */\n    domain(): Domain[];\n    /**\n     * Sets the domain to the specified array of values.\n     *\n     * The first element in domain will be mapped to the first element in the range,\n     * the second domain value to the second range value, and so on.\n     *\n     * Domain values are stored internally in an InternMap from primitive value to index; the resulting index is then used to retrieve a value from the range.\n     * Thus, an ordinal scale’s values must be coercible to a primitive value, and the primitive domain value uniquely identifies the corresponding range value.\n     *\n     * Setting the domain on an ordinal scale is optional if the unknown value is implicit (the default).\n     * In this case, the domain will be inferred implicitly from usage by assigning each unique value passed to the scale a new value from the range.\n     * Note that an explicit domain is recommended to ensure deterministic behavior, as inferring the domain from usage will be dependent on ordering.\n     *\n     * @param domain Array of domain values.\n     */\n    domain(domain: Iterable<Domain>): this;\n\n    /**\n     * Returns the scale's current range.\n     */\n    range(): Range[];\n    /**\n     * Sets the range of the ordinal scale to the specified array of values.\n     *\n     * The first element in the domain will be mapped to the first element in range, the second domain value to the second range value, and so on.\n     *\n     * If there are fewer elements in the range than in the domain, the scale will reuse values from the start of the range.\n     *\n     * @param range Array of range values.\n     */\n    range(range: Iterable<Range>): this;\n\n    /**\n     * Returns the current unknown value, which defaults to \"implicit\".\n     */\n    unknown(): UnknownReturnType<Unknown, { name: \"implicit\" }>;\n    /**\n     * Sets the output value of the scale for unknown input values and returns this scale.\n     * The implicit value enables implicit domain construction. scaleImplicit can be used as a convenience to set the implicit value.\n     *\n     * @param value Unknown value to be used or scaleImplicit to set implicit scale generation.\n     */\n    unknown<NewUnknown>(\n        value: NewUnknown,\n    ): NewUnknown extends { name: \"implicit\" } ? ScaleOrdinal<Domain, Range>\n        : ScaleOrdinal<Domain, Range, NewUnknown>;\n\n    /**\n     * Returns an exact copy of this ordinal scale. Changes to this scale will not affect the returned scale, and vice versa.\n     */\n    copy(): this;\n}\n\n/**\n * Constructs a new ordinal scale with the specified range.\n * The domain defaults to the empty array.\n * If range is not specified, it defaults to the empty array; an ordinal scale always returns undefined until a non-empty range is defined.\n *\n * The generic corresponds to the data type of range elements.\n *\n * @param range An optional array of range values to initialize the scale with.\n */\nexport function scaleOrdinal<Range>(range?: Iterable<Range>): ScaleOrdinal<string, Range>;\n/**\n * Constructs a new ordinal scale with the specified range.\n * The domain defaults to the empty array.\n * If range is not specified, it defaults to the empty array; an ordinal scale always returns undefined until a non-empty range is defined.\n *\n * The first generic corresponds to the data type of domain elements.\n * The second generic corresponds to the data type of range elements.\n * The third generic corresponds to the data type of the unknown value.\n *\n * @param range An optional array of range values to initialize the scale with.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleOrdinal<Domain extends { toString(): string }, Range, Unknown = never>(\n    range?: Iterable<Range>,\n): ScaleOrdinal<Domain, Range, Unknown>;\n/**\n * Constructs a new ordinal scale with the specified domain and range.\n *\n * The first generic corresponds to the data type of domain elements.\n * The second generic corresponds to the data type of range elements.\n * The third generic corresponds to the data type of the unknown value.\n *\n * @param domain Array of domain values.\n * @param range An optional array of range values to initialize the scale with.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleOrdinal<Domain extends { toString(): string }, Range, Unknown = never>(\n    domain: Iterable<Domain>,\n    range: Iterable<Range>,\n): ScaleOrdinal<Domain, Range, Unknown>;\n\n/**\n * A special value for ordinal.unknown that enables implicit domain construction: unknown values are implicitly added to the domain.\n */\nexport const scaleImplicit: { name: \"implicit\" };\n\n// -------------------------------------------------------------------------------\n// Band Scale Factory\n// -------------------------------------------------------------------------------\n\n/**\n * Band scales are like ordinal scales except the output range is continuous and numeric.\n * Discrete output values are automatically computed by the scale by dividing the continuous range into uniform bands.\n * Band scales are typically used for bar charts with an ordinal or categorical dimension.\n * The unknown value of a band scale is effectively undefined: they do not allow implicit domain construction.\n *\n * The generic corresponds to the data type of domain elements.\n */\nexport interface ScaleBand<Domain extends { toString(): string }> {\n    /**\n     * Given a value in the input domain, returns the start of the corresponding band derived from the output range.\n     * If the given value is not in the scale’s domain, returns undefined.\n     *\n     * @param x  A value from the domain.\n     */\n    (x: Domain): number | undefined;\n\n    /**\n     * Returns to scale's current domain\n     */\n    domain(): Domain[];\n    /**\n     * Sets the domain to the specified array of values. The first element in domain will be mapped to the first band, the second domain value to the second band, and so on.\n     * Domain values are stored internally in an InternMap from primitive value to index; the resulting index is then used to determine the band.\n     * Thus, a band scale’s values must be coercible to a primitive value, and the primitive domain value uniquely identifies the corresponding band.\n     *\n     * @param domain Array of domain values.\n     */\n    domain(domain: Iterable<Domain>): this;\n\n    /**\n     * Returns the scale’s current range, which defaults to [0, 1].\n     */\n    range(): [number, number];\n    /**\n     * Sets the scale’s range to the specified two-element array of numbers. If the elements in the given array are not numbers, they will be coerced to numbers.\n     * The default range is [0, 1].\n     *\n     * @param range A two-element array of numeric values.\n     */\n    range(range: Iterable<NumberValue>): this;\n\n    /**\n     * Sets the scale’s range to the specified two-element array of numbers while also enabling rounding.\n     * If the elements in the given array are not numbers, they will be coerced to numbers.\n     *\n     * Rounding is sometimes useful for avoiding antialiasing artifacts, though also consider the shape-rendering “crispEdges” styles.\n     *\n     * @param range A two-element array of numeric values.\n     */\n    rangeRound(range: Iterable<NumberValue>): this;\n\n    /**\n     * Returns the current rounding status for the scale: enabled (= true) or disabled (= false).\n     */\n    round(): boolean;\n    /**\n     * Enables or disables rounding accordingly. If rounding is enabled, the start and stop of each band will be integers.\n     * Rounding is sometimes useful for avoiding antialiasing artifacts, though also consider the shape-rendering “crispEdges” styles.\n     * Note that if the width of the domain is not a multiple of the cardinality of the range, there may be leftover unused space, even without padding!\n     * Use band.align to specify how the leftover space is distributed.\n     *\n     * @param round Enable rounding (= true), disable rounding (= false).\n     */\n    round(round: boolean): this;\n\n    /**\n     * Returns the current inner padding which defaults to 0.\n     */\n    paddingInner(): number;\n    /**\n     * Sets the inner padding to the specified value which must be in the range [0, 1].\n     * The inner padding determines the ratio of the range that is reserved for blank space between bands.\n     *\n     * The default setting is 0.\n     *\n     * @param padding Value for inner padding in [0, 1] interval.\n     */\n    paddingInner(padding: number): this;\n\n    /**\n     * Returns the current outer padding which defaults to 0.\n     */\n    paddingOuter(): number;\n    /**\n     * Sets the outer padding to the specified value which must be in the range [0, 1].\n     * The outer padding determines the ratio of the range that is reserved for blank space before the first band and after the last band.\n     *\n     * The default setting is 0.\n     *\n     * @param padding Value for outer padding in [0, 1] interval.\n     */\n    paddingOuter(padding: number): this;\n\n    /**\n     * Returns the inner padding.\n     */\n    padding(): number;\n    /**\n     * A convenience method for setting the inner and outer padding to the same padding value.\n     *\n     * @param padding Value for inner and outer padding in [0, 1] interval.\n     */\n    padding(padding: number): this;\n\n    /**\n     * Returns the current alignment which defaults to 0.5.\n     */\n    align(): number;\n    /**\n     * Sets the alignment to the specified value which must be in the range [0, 1].\n     *\n     * The default is 0.5.\n     *\n     * The alignment determines how any leftover unused space in the range is distributed.\n     * A value of 0.5 indicates that the outer patter should be equally distributed before the first band and after the last band;\n     * i.e., the bands should be centered within the range. A value of 0 or 1 may be used to shift the bands to one side, say to position them adjacent to an axis.\n     *\n     * @param align Value for alignment setting in [0, 1] interval.\n     */\n    align(align: number): this;\n\n    /**\n     * Returns the width of each band.\n     */\n    bandwidth(): number;\n\n    /**\n     * Returns the distance between the starts of adjacent bands.\n     */\n    step(): number;\n\n    /**\n     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n     */\n    copy(): this;\n}\n\n/**\n * Constructs a new band scale with the specified range, no padding, no rounding and center alignment.\n * The domain defaults to the empty domain.\n * If range is not specified, it defaults to the unit range [0, 1].\n *\n * The generic corresponds to the data type of domain elements.\n *\n * @param range A two-element array of numeric values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scaleBand<Domain extends { toString(): string } = string>(\n    range?: Iterable<NumberValue>,\n): ScaleBand<Domain>;\n/**\n * Constructs a new band scale with the specified domain and range, no padding, no rounding and center alignment.\n *\n * The generic corresponds to the data type of domain elements.\n *\n * @param domain Array of domain values.\n * @param range A two-element array of numeric values.\n */\nexport function scaleBand<Domain extends { toString(): string }>(\n    domain: Iterable<Domain>,\n    range: Iterable<NumberValue>,\n): ScaleBand<Domain>;\n\n// -------------------------------------------------------------------------------\n// Point Scale Factory\n// -------------------------------------------------------------------------------\n\n/**\n * Point scales are a variant of band scales with the bandwidth fixed to zero.\n * Point scales are typically used for scatterplots with an ordinal or categorical dimension.\n * The unknown value of a point scale is always undefined: they do not allow implicit domain construction.\n *\n * The generic corresponds to the data type of domain elements.\n */\nexport interface ScalePoint<Domain extends { toString(): string }> {\n    /**\n     * Given a value in the input domain, returns the corresponding point derived from the output range.\n     * If the given value is not in the scale’s domain, returns undefined.\n     *\n     * @param x  A value from the domain.\n     */\n    (x: Domain): number | undefined;\n\n    /**\n     * Returns the scale's current domain.\n     */\n    domain(): Domain[];\n    /**\n     * Sets the domain to the specified array of values. The first element in domain will be mapped to the first point, the second domain value to the second point, and so on.\n     * Domain values are stored internally in an InternMap from primitive value to index; the resulting index is then used to determine the point.\n     * Thus, a point scale’s values must be coercible to a primitive value, and the primitive domain value uniquely identifies the corresponding point.\n     *\n     * @param domain Array of domain values.\n     */\n    domain(domain: Iterable<Domain>): this;\n\n    /**\n     * Returns the scale’s current range, which defaults to [0, 1].\n     */\n    range(): [number, number];\n    /**\n     * Sets the scale’s range to the specified two-element array of numbers.\n     * If the elements in the given array are not numbers, they will be coerced to numbers.\n     * The default range is [0, 1].\n     *\n     * @param range A two-element array of numeric values.\n     */\n    range(range: Iterable<NumberValue>): this;\n\n    /**\n     * Sets the scale’s range to the specified two-element array of numbers while also enabling rounding.\n     * If the elements in the given array are not numbers, they will be coerced to numbers.\n     *\n     * Rounding is sometimes useful for avoiding antialiasing artifacts, though also consider the shape-rendering “crispEdges” styles.\n     *\n     * @param range A two-element array of numeric values.\n     */\n    rangeRound(range: Iterable<NumberValue>): this;\n\n    /**\n     * Returns the current rounding status for the scale: enabled (= true) or disabled (= false).\n     */\n    round(): boolean;\n    /**\n     * Enables or disables rounding accordingly. If rounding is enabled, the position of each point will be integers.\n     * Rounding is sometimes useful for avoiding antialiasing artifacts, though also consider the shape-rendering “crispEdges” styles.\n     * Note that if the width of the domain is not a multiple of the cardinality of the range, there may be leftover unused space, even without padding!\n     * Use point.align to specify how the leftover space is distributed.\n     *\n     * @param round Enable rounding (= true), disable rounding (= false).\n     */\n    round(round: boolean): this;\n\n    /**\n     * Returns the current outer padding which defaults to 0.\n     * The outer padding determines the ratio of the range that is reserved for blank space\n     * before the first point and after the last point.\n     */\n    padding(): number;\n    /**\n     * Sets the outer padding to the specified value which must be in the range [0, 1].\n     * The outer padding determines the ratio of the range that is reserved for blank space\n     * before the first point and after the last point.\n     *\n     * The default is 0.\n     *\n     * @param padding Value for outer padding in [0, 1] interval.\n     */\n    padding(padding: number): this;\n\n    /**\n     * Returns the current alignment which defaults to 0.5.\n     */\n    align(): number;\n    /**\n     * Sets the alignment to the specified value which must be in the range [0, 1].\n     *\n     * The alignment determines how any leftover unused space in the range is distributed.\n     * A value of 0.5 indicates that the leftover space should be equally distributed before the first point and after the last point;\n     * i.e., the points should be centered within the range. A value of 0 or 1 may be used to shift the points to one side, say to position them adjacent to an axis.\n     *\n     * The default value is 0.5.\n     *\n     * @param align Value for alignment setting in [0, 1] interval.\n     */\n    align(align: number): this;\n\n    /**\n     * Return 0.\n     */\n    bandwidth(): number;\n\n    /**\n     * Returns the distance between the starts of adjacent points.\n     */\n    step(): number;\n\n    /**\n     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n     */\n    copy(): this;\n}\n\n/**\n * Constructs a new point scale with the specified range, no padding, no rounding and center alignment.\n * The domain defaults to the empty domain.\n * If range is not specified, it defaults to the unit range [0, 1].\n *\n * The generic corresponds to the data type of domain elements.\n *\n * @param range A two-element array of numeric values.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function scalePoint<Domain extends { toString(): string } = string>(\n    range?: Iterable<NumberValue>,\n): ScalePoint<Domain>;\n/**\n * Constructs a new point scale with the specified domain and range, no padding, no rounding and center alignment.\n * The domain defaults to the empty domain.\n *\n * The generic corresponds to the data type of domain elements.\n *\n * @param domain Array of domain values.\n * @param range A two-element array of numeric values.\n */\nexport function scalePoint<Domain extends { toString(): string }>(\n    domain: Iterable<Domain>,\n    range: Iterable<NumberValue>,\n): ScalePoint<Domain>;\n\n// Types from d3-scale-chromatic\n// Last module patch version validated against: 3.0.0\n\n// -----------------------------------------------------------------------\n// Categorical\n// -----------------------------------------------------------------------\n/**\n * An array of ten categorical colors represented as RGB hexadecimal strings.\n */\nexport const schemeCategory10: readonly string[];\n/**\n * An array of eight categorical colors represented as RGB hexadecimal strings.\n */\nexport const schemeAccent: readonly string[];\n/**\n * An array of eight categorical colors represented as RGB hexadecimal strings.\n */\nexport const schemeDark2: readonly string[];\n/**\n * An array of ten categorical colors represented as RGB hexadecimal strings.\n */\nexport const schemeObservable10: readonly string[];\n/**\n * An array of twelve categorical colors represented as RGB hexadecimal strings.\n */\nexport const schemePaired: readonly string[];\n/**\n * An array of nine categorical colors represented as RGB hexadecimal strings.\n */\nexport const schemePastel1: readonly string[];\n/**\n * An array of eight categorical colors represented as RGB hexadecimal strings.\n */\nexport const schemePastel2: readonly string[];\n/**\n * An array of nine categorical colors represented as RGB hexadecimal strings.\n */\nexport const schemeSet1: readonly string[];\n/**\n * An array of eight categorical colors represented as RGB hexadecimal strings.\n */\nexport const schemeSet2: readonly string[];\n/**\n * An array of twelve categorical colors represented as RGB hexadecimal strings.\n */\nexport const schemeSet3: readonly string[];\n/**\n * An array of ten categorical colors authored by Tableau as part of Tableau 10 represented as RGB hexadecimal strings.\n */\nexport const schemeTableau10: readonly string[];\n\n// -----------------------------------------------------------------------\n// Diverging\n// -----------------------------------------------------------------------\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “BrBG” diverging color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateBrBG(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “BrBG” diverging color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeBrBG[9] contains an array of nine strings representing the nine colors of the\n *  brown-blue-green diverging color scheme. Diverging color schemes support a size k ranging from 3 to 11.\n */\nexport const schemeBrBG: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “PRGn” diverging color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolatePRGn(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “PRGn” diverging color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemePRGn[9] contains an array of nine strings representing the nine colors of the\n *  purple-green diverging color scheme. Diverging color schemes support a size k ranging from 3 to 11.\n */\nexport const schemePRGn: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “PiYG” diverging color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolatePiYG(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “PiYG” diverging color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemePiYG[9] contains an array of nine strings representing the nine colors of the\n *  pink-yellow-green diverging color scheme. Diverging color schemes support a size k ranging from 3 to 11.\n */\nexport const schemePiYG: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “PuOr” diverging color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolatePuOr(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “PuOr” diverging color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemePuOr[9] contains an array of nine strings representing the nine colors of the\n *  purple-orange diverging color scheme. Diverging color schemes support a size k ranging from 3 to 11.\n */\nexport const schemePuOr: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “RdBu” diverging color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateRdBu(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “RdBu” diverging color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeRdBu[9] contains an array of nine strings representing the nine colors of the\n *  red-blue diverging color scheme. Diverging color schemes support a size k ranging from 3 to 11.\n */\nexport const schemeRdBu: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “RdGy” diverging color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateRdGy(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “RdGy” diverging color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeRdGy[9] contains an array of nine strings representing the nine colors of the\n *  red-grey diverging color scheme. Diverging color schemes support a size k ranging from 3 to 11.\n */\nexport const schemeRdGy: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “RdYlBu” diverging color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateRdYlBu(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “RdYlBu” diverging color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeRdYlBu[9] contains an array of nine strings representing the nine colors of the\n *  red-yellow-blue diverging color scheme. Diverging color schemes support a size k ranging from 3 to 11.\n */\nexport const schemeRdYlBu: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “RdYlGn” diverging color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateRdYlGn(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “RdYlGn” diverging color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeRdYlGn[9] contains an array of nine strings representing the nine colors of the\n *  red-yellow-green diverging color scheme. Diverging color schemes support a size k ranging from 3 to 11.\n */\nexport const schemeRdYlGn: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “Spectral” diverging color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateSpectral(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “Spectral” diverging color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeSpectral[9] contains an array of nine strings representing the nine colors of the\n *  spectral diverging color scheme. Diverging color schemes support a size k ranging from 3 to 11.\n */\nexport const schemeSpectral: ReadonlyArray<readonly string[]>;\n\n// -----------------------------------------------------------------------\n// Sequential\n// -----------------------------------------------------------------------\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “Blues” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateBlues(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “Blues” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeBlues[9] contains an array of nine strings representing the nine colors of the\n *  blue sequential color scheme. Sequential, single-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemeBlues: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “Greens” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateGreens(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “Greens” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeGreens[9] contains an array of nine strings representing the nine colors of the\n *  green sequential color scheme. Sequential, single-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemeGreens: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “Greys” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateGreys(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “Greys” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeGreys[9] contains an array of nine strings representing the nine colors of the\n *  grey sequential color scheme. Sequential, single-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemeGreys: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “Oranges” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateOranges(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “Oranges” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeOranges[9] contains an array of nine strings representing the nine colors of the\n *  orange sequential color scheme. Sequential, single-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemeOranges: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “Purples” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolatePurples(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “Purples” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemePurples[9] contains an array of nine strings representing the nine colors of the\n *  purple sequential color scheme. Sequential, single-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemePurples: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “Reds” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateReds(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “Reds” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeReds[9] contains an array of nine strings representing the nine colors of the\n *  red sequential color scheme. Sequential, single-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemeReds: ReadonlyArray<readonly string[]>;\n\n// -----------------------------------------------------------------------\n// Sequential(Multi-Hue)\n// -----------------------------------------------------------------------\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “turbo” color scheme by Anton Mikhailov.\n *\n * @param t A number in the interval [0, 1].\n */\nexport function interpolateTurbo(t: number): string;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “viridis” perceptually-uniform color scheme designed by van der Walt, Smith and Firing for matplotlib,\n * represented as an RGB string.\n *\n * @param t A number in the interval [0, 1].\n */\nexport function interpolateViridis(t: number): string;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “inferno” perceptually-uniform color scheme designed by van der Walt and Smith for matplotlib,\n * represented as an RGB string.\n *\n * @param t A number in the interval [0, 1].\n */\nexport function interpolateInferno(t: number): string;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “magma” perceptually-uniform color scheme designed by van der Walt and Smith for matplotlib,\n * represented as an RGB string.\n *\n * @param t A number in the interval [0, 1].\n */\nexport function interpolateMagma(t: number): string;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “plasma” perceptually-uniform color scheme designed by van der Walt and Smith for matplotlib,\n * represented as an RGB string.\n *\n * @param t A number in the interval [0, 1].\n */\nexport function interpolatePlasma(t: number): string;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “plasma” perceptually-uniform color scheme designed by van der Walt and Smith for matplotlib,\n * represented as an RGB string.\n *\n * @param t A number in the interval [0, 1].\n */\nexport function interpolateCividis(t: number): string;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from a 180° rotation of Niccoli’s perceptual rainbow, represented as an RGB string.\n *\n * @param t A number in the interval [0, 1].\n */\nexport function interpolateWarm(t: number): string;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from Niccoli’s perceptual rainbow, represented as an RGB string.\n *\n * @param t A number in the interval [0, 1].\n */\nexport function interpolateCool(t: number): string;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from d3.interpolateWarm scale from [0.0, 0.5] followed by the d3.interpolateCool scale from [0.5, 1.0],\n * thus implementing the cyclical less-angry rainbow color scheme.\n *\n * @param t A number in the interval [0, 1].\n */\nexport function interpolateRainbow(t: number): string;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “sinebow” color scheme by Jim Bumgardner and Charlie Loyd.\n *\n * @param t A number in the interval [0, 1].\n */\nexport function interpolateSinebow(t: number): string;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from Green’s default Cubehelix represented as an RGB string.\n *\n * @param t A number in the interval [0, 1].\n */\nexport function interpolateCubehelixDefault(t: number): string;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “BuGn” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateBuGn(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “BuGn” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeBuGn[9] contains an array of nine strings representing the nine colors of the\n *  blue-green sequential color scheme. Sequential, multi-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemeBuGn: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “BuPu” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateBuPu(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “BuPu” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeBuPu[9] contains an array of nine strings representing the nine colors of the\n *  blue-purple sequential color scheme. Sequential, multi-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemeBuPu: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “GnBu” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateGnBu(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “GnBu” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeGnBu[9] contains an array of nine strings representing the nine colors of the\n *  green-blue sequential color scheme. Sequential, multi-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemeGnBu: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “OrRd” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateOrRd(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “OrRd” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeOrRd[9] contains an array of nine strings representing the nine colors of the\n *  orange-red sequential color scheme. Sequential, multi-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemeOrRd: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “PuBuGn” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolatePuBuGn(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “PuBuGn” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemePuBuGn[9] contains an array of nine strings representing the nine colors of the\n *  purple-blue-green sequential color scheme. Sequential, multi-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemePuBuGn: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “PuBu” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolatePuBu(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “PuBu” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemePuBu[9] contains an array of nine strings representing the nine colors of the\n *  purple-blue sequential color scheme. Sequential, multi-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemePuBu: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “PuRd” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolatePuRd(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “PuRd” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemePuRd[9] contains an array of nine strings representing the nine colors of the\n *  purple-red sequential color scheme. Sequential, multi-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemePuRd: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “RdPu” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateRdPu(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “RdPu” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeRdPu[9] contains an array of nine strings representing the nine colors of the\n *  red-purple sequential color scheme. Sequential, multi-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemeRdPu: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “YlGnBu” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateYlGnBu(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “YlGnBu” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeYlGnBu[9] contains an array of nine strings representing the nine colors of the\n *  yellow-green-blue sequential color scheme. Sequential, multi-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemeYlGnBu: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “YlGn” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateYlGn(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “YlGn” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeYlGn[9] contains an array of nine strings representing the nine colors of the\n *  yellow-green sequential color scheme. Sequential, multi-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemeYlGn: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “YlOrBr” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateYlOrBr(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “YlOrBr” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeYlOrBr[9] contains an array of nine strings representing the nine colors of the\n *  yellow-orange-brown sequential color scheme. Sequential, multi-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemeYlOrBr: ReadonlyArray<readonly string[]>;\n\n/**\n * Given a number t in the range [0,1], returns the corresponding color from the “YlOrRd” sequential color scheme represented as an RGB string.\n *\n * @param t Number in the range [0, 1].\n */\nexport function interpolateYlOrRd(t: number): string;\n\n/**\n * An array of arrays of hexadecimal color strings from the “YlOrRd” sequential color scheme. The kth element of this array contains\n *  the color scheme of size k; for example, d3.schemeYlOrRd[9] contains an array of nine strings representing the nine colors of the\n *  yellow-orange-red sequential color scheme. Sequential, multi-hue color schemes support a size k ranging from 3 to 9.\n */\nexport const schemeYlOrRd: ReadonlyArray<readonly string[]>;\n\n// Types from d3-selection\n// Last module patch version validated against: 3.0.0\n\n// --------------------------------------------------------------------------\n// Shared Type Definitions and Interfaces\n// --------------------------------------------------------------------------\n\n/**\n * BaseType serves as an alias for the 'minimal' data type which can be selected\n * without 'd3-selection' trying to use properties internally which would otherwise not\n * be supported.\n */\nexport type BaseType = Element | EnterElement | Document | Window | null;\n\n/**\n * KeyType serves as alias for valid types that d3 supports as key for data binding\n */\nexport type KeyType = string | number;\n\n/**\n * A helper interface which covers arguments like NodeListOf<T> or HTMLCollectionOf<T>\n * argument types\n */\nexport interface ArrayLike<T> {\n    length: number;\n    item(index: number): T | null;\n    [index: number]: T;\n}\n\n/**\n * An interface describing the element type of the Enter Selection group elements\n * created when invoking selection.enter().\n */\nexport interface EnterElement {\n    ownerDocument: Document;\n    namespaceURI: string;\n    appendChild(newChild: Node): Node;\n    insertBefore(newChild: Node, refChild: Node): Node;\n    querySelector(selectors: string): Element;\n    querySelectorAll(selectors: string): NodeListOf<Element>;\n}\n\n/**\n * Container element type usable for mouse/touch functions\n */\nexport type ContainerElement = HTMLElement | SVGSVGElement | SVGGElement;\n\n/**\n * A User interface event (e.g. mouse event, touch or MSGestureEvent) with captured clientX and clientY properties.\n */\nexport interface ClientPointEvent {\n    clientX: number;\n    clientY: number;\n}\n\n/**\n * Interface for optional parameters map, when dispatching custom events\n * on a selection\n */\nexport interface CustomEventParameters {\n    /**\n     * If true, the event is dispatched to ancestors in reverse tree order\n     */\n    bubbles: boolean;\n    /**\n     * If true, event.preventDefault is allowed\n     */\n    cancelable: boolean;\n    /**\n     * Any custom data associated with the event\n     */\n    detail: any;\n}\n\n/**\n * Callback type for selections and transitions\n */\nexport type ValueFn<T extends BaseType, Datum, Result> = (\n    this: T,\n    datum: Datum,\n    index: number,\n    groups: T[] | ArrayLike<T>,\n) => Result;\n\n/**\n * TransitionLike is a helper interface to represent a quasi-Transition, without specifying the full Transition  interface in this file.\n * For example, wherever d3-zoom allows a Transition to be passed in as an argument, it internally immediately invokes its `selection()`\n * method to retrieve the underlying Selection object before proceeding.\n * d3-brush uses a subset of Transition methods internally.\n * The use of this interface instead of the full \n    on(type: string, listener: null): TransitionLike<GElement, Datum>;\n    on(type: string, listener: ValueFn<GElement, Datum, void>): TransitionLike<GElement, Datum>;\n    tween(name: string, tweenFn: null): TransitionLike<GElement, Datum>;\n    tween(name: string, tweenFn: ValueFn<GElement, Datum, ((t: number) => void)>): TransitionLike<GElement, Datum>;\n}\n\n// --------------------------------------------------------------------------\n// All Selection related interfaces and function\n// --------------------------------------------------------------------------\n\n/**\n * Select the first element that matches the specified selector string. If no elements match the selector, returns an empty selection.\n * If multiple elements match the selector, only the first matching element (in document order) will be selected.\n *\n * The first generic  \"GElement\" refers to the type of element to be selected. The second generic \"OldDatum\" refers to the type of the\n * datum, on the selected element. This is useful when re-selecting an element with a previously set, know datum type.\n *\n * @param selector CSS selector string\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function select<GElement extends BaseType, OldDatum>(\n    selector: string,\n): Selection<GElement, OldDatum, HTMLElement, any>;\n/**\n * Select the specified node element.\n *\n * The first generic  \"GElement\" refers to the type of element to be selected. The second generic \"OldDatum\" refers to the type of the\n * datum, on the selected element. This is useful when re-selecting an element with a previously set, know datum type.\n *\n * @param node An element to be selected\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function select<GElement extends BaseType, OldDatum>(\n    node: GElement,\n): Selection<GElement, OldDatum, null, undefined>;\n\n/**\n * Create an empty selection.\n */\nexport function selectAll(selector?: null): Selection<null, undefined, null, undefined>;\n/**\n * Select all elements that match the specified selector string. The elements will be selected in document order (top-to-bottom).\n * If no elements in the document match the selector, returns an empty selection.\n *\n * The first generic \"GElement\" refers to the type of element to be selected. The second generic \"OldDatum\" refers to the type of the\n * datum, of a selected element. This is useful when re-selecting elements with a previously set, know datum type.\n *\n * @param selector CSS selector string\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function selectAll<GElement extends BaseType, OldDatum>(\n    selector: string,\n): Selection<GElement, OldDatum, HTMLElement, any>;\n/**\n * Select the specified array, array-like, or iterable of nodes.\n * This is useful if you already have a reference to nodes, such as `this.childNodes` within an event listener or a global such as `document.links`.\n * The nodes may instead be an iterable, or a pseudo-array such as a NodeList.\n *\n * The first generic \"GElement\" refers to the type of element to be selected.\n * The second generic \"OldDatum\" refers to the type of the datum, of a selected element.\n *\n * @param nodes An array, array-like, or iterable of nodes\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function selectAll<GElement extends BaseType, OldDatum>(\n    nodes: GElement[] | ArrayLike<GElement> | Iterable<GElement>,\n): Selection<GElement, OldDatum, null, undefined>;\n\n/**\n * A D3 Selection of elements.\n *\n * The first generic \"GElement\" refers to the type of the selected element(s).\n * The second generic \"Datum\" refers to the type of the datum of a selected element(s).\n * The third generic \"PElement\" refers to the type of the parent element(s) in the D3 selection.\n * The fourth generic \"PDatum\" refers to the type of the datum of the parent element(s).\n */\nexport interface Selection<GElement extends BaseType, Datum, PElement extends BaseType, PDatum> {\n    // Sub-selection -------------------------\n\n    /**\n     * For each selected element, select the first descendant element that matches the specified selector string.\n     * If no element matches the specified selector for the current element, the element at the current index will\n     * be null in the returned selection. If multiple elements match the selector, only the first matching element\n     * in document order is selected. Selection.select does not affect grouping: it preserves the existing group\n     * structure and indexes, and propagates data (if any) to selected children.\n     *\n     * If the current element has associated data, this data is propagated to the\n     * corresponding selected element.\n     *\n     * The generic represents the type of the descendant element to be selected.\n     *\n     * @param selector CSS selector string\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    select<DescElement extends BaseType>(selector: string): Selection<DescElement, Datum, PElement, PDatum>;\n    /**\n     * Create an empty sub-selection. Selection.select does not affect grouping: it preserves the existing group\n     * structure and indexes.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    select<DescElement extends BaseType>(selector: null): Selection<null, undefined, PElement, PDatum>;\n    /**\n     * For each selected element, select the descendant element returned by the selector function.\n     * If no element is returned by the selector function for the current element, the element at the\n     * current index will be null in the returned selection. Selection.select does not affect grouping:\n     * it preserves the existing group structure and indexes, and propagates data (if any) to selected children.\n     *\n     * If the current element has associated data, this data is propagated to the\n     * corresponding selected element.\n     *\n     * The generic represents the type of the descendant element to be selected.\n     *\n     * @param selector A selector function, which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).\n     * It must return an element, or null if there is no matching element.\n     */\n    select<DescElement extends BaseType>(\n        selector: ValueFn<GElement, Datum, DescElement>,\n    ): Selection<DescElement, Datum, PElement, PDatum>;\n\n    /**\n     * Create an empty sub-selection. Selection.selectAll does affect grouping: The elements in the returned\n     * selection are grouped by their corresponding parent node in this selection, the group at the current index will be empty.\n     */\n    selectAll(selector?: null): Selection<null, undefined, GElement, Datum>;\n    /**\n     * For each selected element, selects the descendant elements that match the specified selector string. The elements in the returned\n     * selection are grouped by their corresponding parent node in this selection. If no element matches the specified selector\n     * for the current element, the group at the current index will be empty. Selection.selectAll does affect grouping: each selected descendant\n     * is grouped by the parent element in the originating selection.\n     *\n     * The selected elements do not inherit data from this selection; use selection.data to propagate data to children.\n     *\n     * The first generic \"DescElement\" refers to the type of descendant element to be selected. The second generic \"OldDatum\" refers to the type of the\n     * datum, of a selected element. This is useful when re-selecting elements with a previously set, know datum type.\n     *\n     * @param selector CSS selector string\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    selectAll<DescElement extends BaseType, OldDatum>(\n        selector: string,\n    ): Selection<DescElement, OldDatum, GElement, Datum>;\n    /**\n     * For each selected element, selects the descendant elements returned by the selector function. The elements in the returned\n     * selection are grouped by their corresponding parent node in this selection. If no element matches the specified selector\n     * for the current element, the group at the current index will be empty. Selection.selectAll does affect grouping: each selected descendant\n     * is grouped by the parent element in the originating selection.\n     *\n     * The selected elements do not inherit data from this selection; use selection.data to propagate data to children.\n     *\n     * The first generic \"DescElement\" refers to the type of descendant element to be selected. The second generic \"OldDatum\" refers to the type of the\n     * datum, of a selected element. This is useful when re-selecting elements with a previously set, know datum type.\n     *\n     * @param selector A selector function which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). It must return an array of elements\n     * (or an iterable, or a pseudo-array, such as a NodeList), or the empty array if there are no matching elements.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    selectAll<DescElement extends BaseType, OldDatum>(\n        selector: ValueFn<GElement, Datum, DescElement[] | ArrayLike<DescElement> | Iterable<DescElement>>,\n    ): Selection<DescElement, OldDatum, GElement, Datum>;\n\n    /**\n     * Filters the selection, returning a new selection that contains only the elements for\n     * which the specified filter is true.\n     *\n     * The returned filtered selection preserves the parents of this selection, but like array.filter,\n     * it does not preserve indexes as some elements may be removed; use selection.select to preserve the index, if needed.\n     *\n     * @param selector A CSS selector string to match when filtering.\n     */\n    filter(selector: string): Selection<GElement, Datum, PElement, PDatum>;\n    /**\n     * Filters the selection, returning a new selection that contains only the elements for\n     * which the specified filter is true.\n     *\n     * The returned filtered selection preserves the parents of this selection, but like array.filter,\n     * it does not preserve indexes as some elements may be removed; use selection.select to preserve the index, if needed.\n     *\n     * The generic refers to the type of element which will be selected after applying the filter, i.e. if the element types\n     * contained in a pre-filter selection are narrowed to a subset as part of the filtering.\n     *\n     * @param selector A CSS selector string to match when filtering.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    filter<FilteredElement extends BaseType>(selector: string): Selection<FilteredElement, Datum, PElement, PDatum>;\n    /**\n     * Filter the selection, returning a new selection that contains only the elements for\n     * which the specified filter is true.\n     *\n     * The returned filtered selection preserves the parents of this selection, but like array.filter,\n     * it does not preserve indexes as some elements may be removed; use selection.select to preserve the index, if needed.\n     *\n     * @param selector  A value function which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). This function should return true\n     * for an element to be included, and false otherwise.\n     */\n    filter(selector: ValueFn<GElement, Datum, boolean>): Selection<GElement, Datum, PElement, PDatum>;\n    /**\n     * Filter the selection, returning a new selection that contains only the elements for\n     * which the specified filter is true.\n     *\n     * The returned filtered selection preserves the parents of this selection, but like array.filter,\n     * it does not preserve indexes as some elements may be removed; use selection.select to preserve the index, if needed.\n     *\n     * @param selector  A value function which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). This function should return true\n     * for an element to be included, and false otherwise.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    filter<FilteredElement extends BaseType>(\n        selector: ValueFn<GElement, Datum, boolean>,\n    ): Selection<FilteredElement, Datum, PElement, PDatum>;\n\n    /**\n     * Returns a new selection merging this selection with the specified other selection or transition.\n     * The returned selection has the same number of groups and the same parents as this selection.\n     * Any missing (null) elements in this selection are filled with the corresponding element,\n     * if present (not null), from the specified selection. (If the other selection has additional groups or parents,\n     * they are ignored.)\n     *\n     * This method is commonly used to merge the enter and update selections after a data-join.\n     * After modifying the entering and updating elements separately, you can merge the two selections and\n     * perform operations on both without duplicate code.\n     *\n     * This method is not intended for concatenating arbitrary selections, however: if both this selection\n     * and the specified other selection have (non-null) elements at the same index, this selection’s element\n     * is returned in the merge and the other selection’s element is ignored.\n     *\n     * @param other Selection to be merged.\n     */\n    merge(\n        other: Selection<GElement, Datum, PElement, PDatum> | TransitionLike<GElement, Datum>,\n    ): Selection<GElement, Datum, PElement, PDatum>;\n\n    /**\n     * Returns a new selection with the (first) child of each element of the current selection matching the selector.\n     * Selects the first child that matches (if any).\n     *\n     * The generic represents the type of the descendant element to be selected.\n     *\n     * @param selector CSS selector string\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    selectChild<DescElement extends BaseType>(selector?: string): Selection<DescElement, Datum, PElement, PDatum>;\n    /**\n     * Returns a new selection with the (first) child of each element of the current selection matching the selector.\n     *\n     * The first generic represents the type of the descendant element to be selected.\n     * The second generic represents the type of any of the child elements.\n     *\n     * @param selector A selector function, which is evaluated for each of the children nodes, in order, being passed the child (child), the child’s index (i), and the list of children (children);\n     * the method selects the first child for which the selector return truthy, if any.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    selectChild<ResultElement extends BaseType, ChildElement extends BaseType>(\n        selector: (child: ChildElement, i: number, children: ChildElement[]) => boolean,\n    ): Selection<ResultElement, Datum, PElement, PDatum>;\n\n    /**\n     * Returns a new selection with the children of each element of the current selection matching the selector.\n     * Selects the children that match (if any)\n     *\n     * The first generic represents the type of the descendant element to be selected.\n     * The second generic refers to the type of the datum of the element to be selected.\n     *\n     * @param selector CSS selector string\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    selectChildren<DescElement extends BaseType, OldDatum>(\n        selector?: string,\n    ): Selection<DescElement, OldDatum, GElement, Datum>;\n    /**\n     * Returns a new selection with the children of each element of the current selection matching the selector.\n     *\n     * The first generic represents the type of the descendant element to be selected.\n     * The second generic refers to the type of the datum of the element to be selected.\n     * The third generic represents the type of any of the child elements.\n     *\n     * @param selector A selector function, which is evaluated for each of the children nodes, in order, being passed the child (child), the child’s index (i), and the list of children (children);\n     * the method selects the first child for which the selector return truthy, if any.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    selectChildren<ResultElement extends BaseType, ResultDatum, ChildElement extends BaseType>(\n        selector: (child: ChildElement, i: number, children: ChildElement[]) => boolean,\n    ): Selection<ResultElement, ResultDatum, GElement, Datum>;\n\n    /**\n     * Returns the selection (for symmetry with transition.selection).\n     */\n    selection(): this;\n\n    // Modifying -------------------------------\n\n    /**\n     * Return the current value of the specified attribute for the first (non-null) element in the selection.\n     * This is generally useful only if you know that the selection contains exactly one element.\n     *\n     * @param name Name of the attribute\n     */\n    attr(name: string): string;\n    /**\n     * Sets the attribute with the specified name to the specified value on the selected elements and returns this selection.\n     * If the value is a constant, all elements are given the same attribute value;\n     * otherwise, if the value is a function, it is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).\n     * The function’s return value is then used to set each element’s attribute.\n     * A null value will remove the specified attribute.\n     */\n    attr(\n        name: string,\n        value:\n            | null\n            | string\n            | number\n            | boolean\n            | ReadonlyArray<string | number>\n            | ValueFn<GElement, Datum, null | string | number | boolean | ReadonlyArray<string | number>>,\n    ): this;\n\n    /**\n     * Returns true if and only if the first (non-null) selected element has the specified classes.\n     * This is generally useful only if you know the selection contains exactly one element.\n     *\n     * @param names A string of space-separated class names.\n     */\n    classed(names: string): boolean;\n    /**\n     * Assigns or unassigns the specified CSS class names on the selected elements by setting\n     * the class attribute or modifying the classList property and returns this selection.\n     * If the constant value is truthy, then all elements are assigned the specified classes; otherwise, the classes are unassigned.\n     *\n     * @param names A string of space-separated class names.\n     * @param value A boolean flag (true = assign / false = unassign)\n     */\n    classed(names: string, value: boolean): this;\n    /**\n     * Assigns or unassigns the specified CSS class names on the selected elements by setting\n     * the class attribute or modifying the classList property and returns this selection.\n     * The assign/unassign status for the individual selected elements is determined by the boolean return\n     * value of the value function.\n     *\n     * @param names A string of space-separated class names.\n     * @param value A value function which is evaluated for each selected element, in order,\n     * being passed the current datum (d), the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).\n     * The function’s return value is then used to assign or unassign classes on each element.\n     */\n    classed(names: string, value: ValueFn<GElement, Datum, boolean>): this;\n\n    /**\n     * Returns the current value of the specified style property for the first (non-null) element in the selection.\n     * The current value is defined as the element’s inline value, if present, and otherwise its computed value.\n     * Accessing the current style value is generally useful only if you know the selection contains exactly one element.\n     *\n     * @param name Name of the style\n     */\n    style(name: string): string;\n    /**\n     * Clear the style with the specified name for the selected elements and returns this selection.\n     *\n     * @param name Name of the style\n     * @param value null,to clear the style\n     */\n    style(name: string, value: null): this;\n    /**\n     * Sets the value of the style with the specified name for the selected elements and returns this selection.\n     * All elements are given the same style value.\n     *\n     * @param name Name of the style\n     * @param value Constant value for the style\n     * @param priority An optional priority flag, either null or the string \n    /**\n     * Sets the value of the style with the specified name for the selected elements and returns this selection.\n     * The value for the individual selected elements is determined by the value function.\n     *\n     * @param name Name of the style\n     * @param value A value function which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).  A null value will clear the style.\n     * @param priority An optional priority flag, either null or the string \n\n    /**\n     * Return the current value of the specified property for the first (non-null) element in the selection.\n     * This is generally useful only if you know that the selection contains exactly one element.\n     *\n     * @param name Name of the property\n     */\n    property(name: string): any;\n    /**\n     * Look up a local variable on the first node of this selection. Note that this is not equivalent to `local.get(selection.node())` in that it will not look up locals set on the parent node(s).\n     *\n     * @param name The `d3.local` variable to look up.\n     */\n    property<T>(name: Local<T>): T | undefined;\n    /**\n     * Sets the property with the specified name to the specified value on selected elements.\n     * If the value is a constant, then all elements are given the same property value;\n     * otherwise, if the value is a function, it is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).\n     * The function’s return value is then used to set each element’s property. A null value will delete the specified property.\n     */\n    property(name: string, value: ValueFn<GElement, Datum, any> | null): this;\n    /**\n     * Sets the value of the property with the specified name for the selected elements and returns this selection.\n     * All elements are given the same property value.\n     *\n     * @param name Name of the property\n     * @param value Constant value for the property\n     */\n    property(name: string, value: any): this;\n    /**\n     * Store a value in a `d3.local` variable.\n     * This is equivalent to `selection.each(function (d, i, g) { name.set(this, value.call(this, d, i, g)); })` but more concise.\n     *\n     * @param name A `d3.local` variable\n     * @param value A callback that returns the value to store\n     */\n    property<T>(name: Local<T>, value: ValueFn<GElement, Datum, T>): this;\n    /**\n     * Store a value in a `d3.local` variable for each node in the selection.\n     * This is equivalent to `selection.each(function () { name.set(this, value); })` but more concise.\n     *\n     * @param name A `d3.local` variable\n     * @param value A callback that returns the value to store\n     */\n    property<T>(name: Local<T>, value: T): this;\n\n    /**\n     * Returns the text content for the first (non-null) element in the selection.\n     * This is generally useful only if you know the selection contains exactly one element.\n     */\n    text(): string;\n    /**\n     * Sets the text content to the specified value on all selected elements, replacing any existing child elements.\n     * If the value is a constant, then all elements are given the same text content;\n     * otherwise, if the value is a function, it is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).\n     * The function’s return value is then used to set each element’s text content.\n     * A null value will clear the content.\n     */\n    text(value: null | string | number | boolean | ValueFn<GElement, Datum, string | number | boolean | null>): this;\n\n    /**\n     * Returns a string representation of the inner HTML for the first (non-null) element in the selection.\n     * This is generally useful only if you know the selection contains exactly one element.\n     */\n    html(): string;\n    /**\n     * Sets the inner HTML to the specified value on all selected elements, replacing any existing child elements.\n     * If the value is a constant, then all elements are given the same inner HTML;\n     * otherwise, if the value is a function, it is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).\n     * The function’s return value is then used to set each element’s inner HTML.\n     * A null value will clear the content.\n     */\n    html(value: null | string | ValueFn<GElement, Datum, string | null>): this;\n\n    /**\n     * Appends a new element of this type (tag name) as the last child of each selected element,\n     * or before the next following sibling in the update selection if this is an enter selection.\n     * The latter behavior for enter selections allows you to insert elements into the DOM in an order consistent with the new bound data;\n     * however, note that selection.order may still be required if updating elements change order\n     * (i.e., if the order of new data is inconsistent with old data).\n     *\n     * This method returns a new selection containing the appended elements.\n     * Each new element inherits the data of the current elements, if any.\n     *\n     * @param type A string representing the tag name.\n     */\n    append<K extends keyof ElementTagNameMap>(type: K): Selection<ElementTagNameMap[K], Datum, PElement, PDatum>;\n    /**\n     * Appends a new element of this type (tag name) as the last child of each selected element,\n     * or before the next following sibling in the update selection if this is an enter selection.\n     * The latter behavior for enter selections allows you to insert elements into the DOM in an order consistent with the new bound data;\n     * however, note that selection.order may still be required if updating elements change order\n     * (i.e., if the order of new data is inconsistent with old data).\n     *\n     * This method returns a new selection containing the appended elements.\n     * Each new element inherits the data of the current elements, if any.\n     *\n     * The generic refers to the type of the child element to be appended.\n     *\n     * @param type A string representing the tag name. The specified name may have a namespace prefix, such as svg:text\n     * to specify a text attribute in the SVG namespace. If no namespace is specified, the namespace will be inherited\n     * from the parent element; or, if the name is one of the known prefixes, the corresponding namespace will be used\n     * (for example, svg implies svg:svg)\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    append<ChildElement extends BaseType>(type: string): Selection<ChildElement, Datum, PElement, PDatum>;\n    /**\n     * Appends a new element of the type provided by the element creator function as the last child of each selected element,\n     * or before the next following sibling in the update selection if this is an enter selection.\n     * The latter behavior for enter selections allows you to insert elements into the DOM in an order consistent with the new bound data;\n     * however, note that selection.order may still be required if updating elements change order\n     * (i.e., if the order of new data is inconsistent with old data).\n     *\n     * This method returns a new selection containing the appended elements.\n     * Each new element inherits the data of the current elements, if any.\n     *\n     * The generic refers to the type of the child element to be appended.\n     *\n     * @param type A creator function which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). This function should return\n     * an element to be appended. (The function typically creates a new element, but it may instead return an existing element.)\n     */\n    append<ChildElement extends BaseType>(\n        type: ValueFn<GElement, Datum, ChildElement>,\n    ): Selection<ChildElement, Datum, PElement, PDatum>;\n\n    /**\n     * Inserts a new element of the specified type (tag name) before the first element matching the specified\n     * before selector for each selected element. For example, a before selector :first-child will prepend nodes before the first child.\n     * If before is not specified, it defaults to null. (To append elements in an order consistent with bound data, use selection.append.)\n     *\n     * This method returns a new selection containing the appended elements.\n     * Each new element inherits the data of the current elements, if any.\n     *\n     * The generic refers to the type of the child element to be appended.\n     *\n     * @param type A string representing the tag name for the element type to be inserted.\n     * @param before One of:\n     *   * A CSS selector string for the element before which the insertion should occur.\n     *   * A child selector function which is evaluated for each selected element, in order, being passed the current datum (d),\n     *     the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). This function should return the child element\n     *     before which the element should be inserted.\n     */\n    insert<K extends keyof ElementTagNameMap>(\n        type: K,\n        before?: string | ValueFn<GElement, Datum, BaseType>,\n    ): Selection<ElementTagNameMap[K], Datum, PElement, PDatum>;\n    /**\n     * Inserts a new element of the specified type (tag name) before the first element matching the specified\n     * before selector for each selected element. For example, a before selector :first-child will prepend nodes before the first child.\n     * If before is not specified, it defaults to null. (To append elements in an order consistent with bound data, use selection.append.)\n     *\n     * This method returns a new selection containing the appended elements.\n     * Each new element inherits the data of the current elements, if any.\n     *\n     * The generic refers to the type of the child element to be appended.\n     *\n     * @param type One of:\n     *   * A string representing the tag name for the element type to be inserted. The specified name may have a namespace prefix,\n     *     such as svg:text to specify a text attribute in the SVG namespace. If no namespace is specified, the namespace will be inherited\n     *     from the parent element; or, if the name is one of the known prefixes, the corresponding namespace will be used\n     *     (for example, svg implies svg:svg)\n     *   * A creator function which is evaluated for each selected element, in order, being passed the current datum (d),\n     *     the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). This function should return\n     *     an element to be inserted. (The function typically creates a new element, but it may instead return an existing element.)\n     * @param before One of:\n     *   * A CSS selector string for the element before which the insertion should occur.\n     *   * A child selector function which is evaluated for each selected element, in order, being passed the current datum (d),\n     *     the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). This function should return the child element\n     *     before which the element should be inserted.\n     */\n    insert<ChildElement extends BaseType>(\n        type: string | ValueFn<GElement, Datum, ChildElement>,\n        before?: string | ValueFn<GElement, Datum, BaseType>,\n    ): Selection<ChildElement, Datum, PElement, PDatum>;\n\n    /**\n     * Removes the selected elements from the document.\n     * Returns this selection (the removed elements) which are now detached from the DOM.\n     */\n    remove(): this;\n\n    /**\n     * Inserts clones of the selected elements immediately following the selected elements and returns a selection of the newly\n     * added clones. If deep is true, the descendant nodes of the selected elements will be cloned as well. Otherwise, only the elements\n     * themselves will be cloned.\n     *\n     * @param deep Perform deep cloning if this flag is set to true.\n     */\n    clone(deep?: boolean): Selection<GElement, Datum, PElement, PDatum>;\n\n    /**\n     * Return a new selection that contains a copy of each group in this selection sorted according\n     * to the compare function. After sorting, re-inserts elements to match the resulting order (per selection.order).\n     *\n     * Note that sorting is not guaranteed to be stable; however, it is guaranteed to have the same\n     * behavior as your browser’s built-in sort method on arrays.\n     *\n     * @param comparator An optional comparator function, which defaults to \"ascending\". The function is passed\n     * two elements’ data a and b to compare. It should return either a negative, positive, or zero value.\n     * If negative, then a should be before b; if positive, then a should be after b; otherwise, a and b are\n     * considered equal and the order is arbitrary.\n     */\n    sort(comparator?: (a: Datum, b: Datum) => number): this;\n\n    /**\n     * Re-insert elements into the document such that the document order of each group matches the selection order.\n     * This is equivalent to calling selection.sort if the data is already sorted, but much faster.\n     */\n    order(): this;\n\n    /**\n     * Re-insert each selected element, in order, as the last child of its parent.\n     */\n    raise(): this;\n\n    /**\n     * Re-insert each selected element, in order, as the first child of its parent.\n     */\n    lower(): this;\n\n    // Data Join ---------------------------------\n\n    /**\n     * Returns the array of data for the selected elements.\n     */\n    data(): Datum[];\n    /**\n     * Joins the specified array of data with the selected elements, returning a new selection that represents\n     * the update selection: the elements successfully bound to data. Also defines the enter and exit selections on\n     * the returned selection, which can be used to add or remove elements to correspond to the new data.\n     *\n     * The data is specified for each group in the selection. If the selection has multiple groups\n     * (such as d3.selectAll followed by selection.selectAll), then data should typically be specified as a function.\n     *\n     * If a key function is not specified, then the first datum in data is assigned to the first selected element,\n     * the second datum to the second selected element, and so on.\n     * A key function may be specified to control which datum is assigned to which element, replacing the default join-by-index,\n     * by computing a string identifier for each datum and element.\n     *\n     * The update and enter selections are returned in data order, while the exit selection preserves the selection\n     * order prior to the join. If a key function is specified, the order of elements in the selection may not match\n     * their order in the document; use selection.order or selection.sort as needed.\n     *\n     * This method cannot be used to clear bound data; use selection.datum instead.\n     *\n     * For details see: {@link https://github.com/d3/d3-selection#joining-data }\n     *\n     * The generic refers to the type of the new datum to be used for the selected elements.\n     *\n     * @param data The specified data is an array or iterable of arbitrary values (e.g., numbers or objects)\n     * or a value function which will be evaluated for each group in order, being passed the group’s parent datum\n     * (d, which may be undefined), the group index (i), and the selection’s parent nodes (nodes),\n     * with this as the group’s parent element. The function returns an array or iterable of values for each group.\n     * @param key An optional key function which is evaluated for each selected element, in order, being passed the\n     * current datum (d), the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]); the returned string is the element’s key.\n     * The key function is then also evaluated for each new datum in data, being passed the current datum (d),\n     * the current index (i), and the group’s new data, with this as the group’s parent DOM element (nodes[i]); the returned string is the datum’s key.\n     * The datum for a given key is assigned to the element with the matching key. If multiple elements have the same key,\n     * the duplicate elements are put into the exit selection; if multiple data have the same key, the duplicate data are put into the enter selection.\n     */\n    data<NewDatum>(\n        data: NewDatum[] | Iterable<NewDatum> | ValueFn<PElement, PDatum, NewDatum[] | Iterable<NewDatum>>,\n        key?: ValueFn<GElement | PElement, Datum | NewDatum, KeyType>,\n    ): Selection<GElement, NewDatum, PElement, PDatum>;\n\n    /**\n     * Appends, removes and reorders elements as necessary to match the data that was previously bound by `selection.data`, returning the merged enter and update selection.\n     * This method is a convenient alternative to the more explicit `selection.enter`, `selection.exit`, `selection.append` and `selection.remove`.\n     *\n     * The \"matching\" logic is determined by the key function passed to `selection.data`.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    join<K extends keyof ElementTagNameMap, OldDatum = Datum>(\n        enter: K,\n        update?: (\n            elem: Selection<GElement, Datum, PElement, PDatum>,\n        ) => Selection<GElement, Datum, PElement, PDatum> | TransitionLike<GElement, Datum> | undefined,\n        exit?: (elem: Selection<GElement, OldDatum, PElement, PDatum>) => void,\n    ): Selection<GElement | ElementTagNameMap[K], Datum, PElement, PDatum>;\n    /**\n     * Appends, removes and reorders elements as necessary to match the data that was previously bound by `selection.data`, returning the merged enter and update selection.\n     * This method is a convenient alternative to the more explicit `selection.enter`, `selection.exit`, `selection.append` and `selection.remove`.\n     *\n     * The \"matching\" logic is determined by the key function passed to `selection.data`.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    join<ChildElement extends BaseType, OldDatum = Datum>(\n        enter:\n            | string\n            | ((\n                elem: Selection<EnterElement, Datum, PElement, PDatum>,\n            ) => Selection<ChildElement, Datum, PElement, PDatum> | TransitionLike<GElement, Datum>),\n        update?: (\n            elem: Selection<GElement, Datum, PElement, PDatum>,\n        ) => Selection<GElement, Datum, PElement, PDatum> | TransitionLike<GElement, Datum> | undefined,\n        exit?: (elem: Selection<GElement, OldDatum, PElement, PDatum>) => void,\n    ): Selection<ChildElement | GElement, Datum, PElement, PDatum>;\n\n    /**\n     * Return the enter selection: placeholder nodes for each datum that had no corresponding DOM element\n     * in the selection. (The enter selection is empty for selections not returned by selection.data.)\n     */\n    enter(): Selection<EnterElement, Datum, PElement, PDatum>;\n\n    /**\n     * Returns the exit selection: existing DOM elements in the selection for which no new datum was found.\n     * (The exit selection is empty for selections not returned by selection.data.)\n     *\n     * IMPORTANT: The generic refers to the type of the old datum associated with the exit selection elements.\n     * Ensure you set the generic to the correct type, if you need to access the data on the exit selection in\n     * follow-up steps, e.g. to set styles as part of an exit transition before removing them.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    exit<OldDatum>(): Selection<GElement, OldDatum, PElement, PDatum>;\n\n    /**\n     * Returns the bound datum for the first (non-null) element in the selection.\n     * This is generally useful only if you know the selection contains exactly one element.\n     */\n    datum(): Datum;\n    /**\n     * Delete the bound data for each element in the selection.\n     */\n    datum(value: null): Selection<GElement, undefined, PElement, PDatum>;\n    /**\n     * Sets the element’s bound data using the specified value function on all selected elements.\n     * Unlike selection.data, this method does not compute a join and does not affect\n     * indexes or the enter and exit selections.\n     *\n     * The generic refers to the type of the new datum to be used for the selected elements.\n     *\n     * @param value A value function which is evaluated for each selected element, in order,\n     * being passed the current datum (d), the current index (i), and the current group (nodes),\n     * with this as the current DOM element (nodes[i]). The function is then used to set each element’s new data.\n     * A null value will delete the bound data.\n     */\n    datum<NewDatum>(value: ValueFn<GElement, Datum, NewDatum>): Selection<GElement, NewDatum, PElement, PDatum>;\n    /**\n     * Sets the element’s bound data to the specified value on all selected elements.\n     * Unlike selection.data, this method does not compute a join and does not affect\n     * indexes or the enter and exit selections.\n     *\n     * The generic refers to the type of the new datum to be used for the selected elements.\n     *\n     * @param value A value object to be used as the datum for each element.\n     */\n    datum<NewDatum>(value: NewDatum): Selection<GElement, NewDatum, PElement, PDatum>;\n\n    // Event Handling -------------------\n\n    /**\n     * Return the currently-assigned listener for the specified event typename on the first (non-null) selected element,\n     * if any, If multiple typenames are specified, the first matching listener is returned.\n     *\n     * @param typenames The typenames is a string event type, such as click, mouseover, or submit; any DOM event type supported by your browser may be used.\n     * The type may be optionally followed by a period (.) and a name; the optional name allows multiple callbacks to be registered\n     * to receive events of the same type, such as click.foo and click.bar. To specify multiple typenames, separate typenames with spaces,\n     * such as \"input change\"\" or \"click.foo click.bar\".\n     */\n    on(typenames: string): ((this: GElement, event: any, d: Datum) => void) | undefined;\n    /**\n     * Remove a listener for the specified event type names. To remove all listeners for a given name,\n     * pass null as the listener and \".foo\" as the typename, where foo is the name; to remove all listeners with no name, specify \".\" as the typename.\n     *\n     * @param typenames The typenames is a string event type, such as click, mouseover, or submit; any DOM event type supported by your browser may be used.\n     * The type may be optionally followed by a period (.) and a name; the optional name allows multiple callbacks to be registered\n     * to receive events of the same type, such as click.foo and click.bar. To specify multiple typenames, separate typenames with spaces,\n     * such as \"input change\"\" or \"click.foo click.bar\".\n     * @param listener null to indicate removal of listener\n     */\n    on(typenames: string, listener: null): this;\n    /**\n     * Add an event listener for the specified event type names. If an event listener was previously registered for the same typename\n     * on a selected element, the old listener is removed before the new listener is added.\n     *\n     * When a specified event is dispatched on a selected node, the specified listener will be evaluated for each selected element.\n     *\n     * @param typenames The typenames is a string event type, such as click, mouseover, or submit; any DOM event type supported by your browser may be used.\n     * The type may be optionally followed by a period (.) and a name; the optional name allows multiple callbacks to be registered\n     * to receive events of the same type, such as click.foo and click.bar. To specify multiple typenames, separate typenames with spaces,\n     * such as \"input change\"\" or \"click.foo click.bar\".\n     * @param listener A listener function which will be evaluated for each selected element,\n     * being passed the current event (event) and the current datum (d), with this as the current DOM element (event.currentTarget).\n     * Listeners always see the latest datum for their element.\n     * Note: while you can use event.pageX and event.pageY directly,\n     * it is often convenient to transform the event position to the local coordinate system of that element that received the event using d3.pointer.\n     * @param options An optional options object may specify characteristics about the event listener, such as wehether it is captures or passive; see element.addEventListener.\n     */\n    on(typenames: string, listener: (this: GElement, event: any, d: Datum) => void, options?: any): this;\n\n    /**\n     * Dispatches a custom event of the specified type to each selected element, in order.\n     * An optional parameters map may be specified to set additional properties of the event.\n     *\n     * @param type Name of event to dispatch\n     * @param parameters An optional value map with custom event parameters\n     */\n    dispatch(type: string, parameters?: CustomEventParameters): this;\n    /**\n     * Dispatches a custom event of the specified type to each selected element, in order.\n     * An optional value function returning a parameters map for each element in the selection may be specified to set additional properties of the event.\n     *\n     * @param type Name of event to dispatch\n     * @param parameters A value function which is evaluated for each selected element, in order,\n     * being passed the current datum (d), the current index (i), and the current group (nodes),\n     * with this as the current DOM element (nodes[i]). It must return the parameters map for the current element.\n     */\n    dispatch(type: string, parameters?: ValueFn<GElement, Datum, CustomEventParameters>): this;\n\n    // Control Flow ----------------------\n\n    /**\n     * Invoke the specified function for each selected element, passing in the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).\n     * This method can be used to invoke arbitrary code for each selected element, and is useful for creating a context to access parent and child data simultaneously.\n     *\n     * @param func A function which is invoked for each selected element,\n     *             being passed the current datum (d), the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).\n     */\n    each(func: ValueFn<GElement, Datum, void>): this;\n\n    /**\n     * Invoke the specified function exactly once, passing in this selection along with any optional arguments.\n     * Returns this selection.\n     *\n     * @param func A function which is passed this selection as the first argument along with any optional arguments.\n     * @param args List of optional arguments to be passed to the callback function.\n     */\n    call<Args extends any[]>(\n        func: (selection: Selection<GElement, Datum, PElement, PDatum>, ...args: Args) => void,\n        ...args: Args\n    ): this;\n\n    /**\n     * Return true if this selection contains no (non-null) elements.\n     */\n    empty(): boolean;\n\n    /**\n     * Return an array of all (non-null) elements in this selection.\n     */\n    nodes(): GElement[];\n\n    /**\n     * Return the first (non-null) element in this selection. If the selection is empty, returns null.\n     */\n    node(): GElement | null;\n\n    /**\n     * Returns the total number of elements in this selection.\n     */\n    size(): number;\n\n    /**\n     * Returns an iterator over the selected (non-null) elements.\n     */\n    [Symbol.iterator](): Iterator<GElement>;\n}\n\n/**\n * Selects the root element, document.documentElement. This function can also be used to test for selections\n * (instanceof d3.selection) or to extend the selection prototype.\n */\nexport type SelectionFn = () => Selection<HTMLElement, any, null, undefined>;\n\n/**\n * Selects the root element, document.documentElement. This function can also be used to test for selections\n * (instanceof d3.selection) or to extend the selection prototype.\n */\nexport const selection: SelectionFn;\n\n// ---------------------------------------------------------------------------\n// pointer.js and pointers.js related\n// ---------------------------------------------------------------------------\n\n/**\n * Returns a two-element array of numbers [x, y] representing the coordinates of the specified event relative to the specified target.\n * event can be a MouseEvent, a PointerEvent, a Touch, or a custom event holding a UIEvent as event.sourceEvent.\n *\n * If target is not specified, it defaults to the source event’s currentTarget property, if available.\n * If the target is an SVG element, the event’s coordinates are transformed using the inverse of the screen coordinate transformation matrix.\n * If the target is an HTML element, the event’s coordinates are translated relative to the top-left corner of the target’s bounding client rectangle.\n * (As such, the coordinate system can only be translated relative to the client coordinates. See also GeometryUtils.)\n * Otherwise, [event.pageX, event.pageY] is returned.\n *\n * @param event The specified event.\n * @param target The target which the coordinates are relative to.\n */\nexport function pointer(event: any, target?: any): [number, number];\n\n/**\n * Returns an array [[x0, y0], [x1, y1]…] of coordinates of the specified event’s pointer locations relative to the specified target.\n * For touch events, the returned array of positions corresponds to the event.touches array; for other events, returns a single-element array.\n *\n * If target is not specified, it defaults to the source event’s currentTarget property, if any.\n *\n * @param event The specified event.\n * @param target The target which the coordinates are relative to.\n */\nexport function pointers(event: any, target?: any): Array<[number, number]>;\n\n// ---------------------------------------------------------------------------\n// style\n// ---------------------------------------------------------------------------\n\n/**\n * Returns the value of the style property with the specified name for the specified node.\n * If the node has an inline style with the specified name, its value is returned; otherwise, the computed property value is returned.\n * See also selection.style.\n *\n * @param node A DOM node (e.g. HTMLElement, SVGElement) for which to retrieve the style property.\n * @param name Style property name.\n */\nexport function style(node: Element, name: string): string;\n\n// ---------------------------------------------------------------------------\n// local.js related\n// ---------------------------------------------------------------------------\n\nexport interface Local<T> {\n    /**\n     * Retrieves a local variable stored on the node (or one of its parents).\n     *\n     * @param node A node element.\n     */\n    get(node: Element): T | undefined;\n    /**\n     * Deletes the value associated with the given node. Values stored on ancestors are not affected, meaning that child nodes will still see inherited values.\n     *\n     * This function returns true if there was a value stored directly on the node, and false otherwise.\n     *\n     * @param node A node element.\n     */\n    remove(node: Element): boolean;\n    /**\n     * Store a value for this local variable. Calling `.get()` on children of this node will also retrieve the variable's value.\n     *\n     * @param node A node element.\n     * @param value Value to store locally\n     */\n    set(node: Element, value: T): T;\n    /**\n     * Obtain a string with the internally assigned property name for the local\n     * which is used to store the value on a node\n     */\n    toString(): string;\n}\n\n/**\n * Obtain a new local variable\n *\n * The generic refers to the type of the variable to store locally.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function local<T>(): Local<T>;\n\n// ---------------------------------------------------------------------------\n// namespace.js related\n// ---------------------------------------------------------------------------\n\n/**\n * Interface for object literal containing local name with related fully qualified namespace\n */\nexport interface NamespaceLocalObject {\n    /**\n     * Fully qualified namespace\n     */\n    space: string;\n    /**\n     * Name of the local to be namespaced.\n     */\n    local: string;\n}\n\n/**\n * Obtain an object with properties of fully qualified namespace string and\n * name of local by parsing a shorthand string \"prefix:local\". If the prefix\n * does not exist in the \"namespaces\" object provided by d3-selection, then\n * the local name is returned as a simple string.\n *\n * @param prefixedLocal A string composed of the namespace prefix and local\n * name separated by colon, e.g. \"svg:text\".\n */\nexport function namespace(prefixedLocal: string): NamespaceLocalObject | string;\n\n// ---------------------------------------------------------------------------\n// namespaces.js related\n// ---------------------------------------------------------------------------\n\n/**\n * Interface for maps of namespace prefixes to corresponding fully qualified namespace strings\n */\nexport interface NamespaceMap {\n    [prefix: string]: string;\n}\n\n/**\n * Map of namespace prefixes to corresponding fully qualified namespace strings\n */\nexport const namespaces: NamespaceMap;\n\n// ---------------------------------------------------------------------------\n// window.js related\n// ---------------------------------------------------------------------------\n\n/**\n * Returns the owner window for the specified node. If node is a node, returns the owner document’s default view;\n * if node is a document, returns its default view; otherwise returns the node.\n *\n * @param DOMNode A DOM element\n */\nexport function window(DOMNode: Window | Document | Element): Window;\n\n// ---------------------------------------------------------------------------\n// creator.js and matcher.js Complex helper closure generating functions\n// for explicit bound-context dependent use\n// ---------------------------------------------------------------------------\n\n/**\n * Given the specified element name, returns a single-element selection containing\n * a detached element of the given name in the current document.\n *\n * @param name tag name of the element to be added.\n */\nexport function create<K extends keyof ElementTagNameMap>(\n    name: K,\n): Selection<ElementTagNameMap[K], undefined, null, undefined>;\n/**\n * Given the specified element name, returns a single-element selection containing\n * a detached element of the given name in the current document.\n *\n * @param name Tag name of the element to be added. See \"namespace\" for details on supported namespace prefixes,\n * such as for SVG elements.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function create<NewGElement extends Element>(name: string): Selection<NewGElement, undefined, null, undefined>;\n\n/**\n * Given the specified element name, returns a function which creates an element of the given name,\n * assuming that \"this\" is the parent element.\n *\n * @param name Tag name of the element to be added.\n */\nexport function creator<K extends keyof ElementTagNameMap>(name: K): (this: BaseType) => ElementTagNameMap[K];\n/**\n * Given the specified element name, returns a function which creates an element of the given name,\n * assuming that \"this\" is the parent element.\n *\n * The generic refers to the type of the new element to be returned by the creator function.\n *\n * @param name Tag name of the element to be added. See \"namespace\" for details on supported namespace prefixes,\n * such as for SVG elements.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function creator<NewGElement extends Element>(name: string): (this: BaseType) => NewGElement;\n\n/**\n * Given the specified selector, returns a function which returns true if \"this\" element matches the specified selector.\n *\n * @param selector A CSS selector string.\n */\nexport function matcher(selector: string): (this: BaseType) => boolean;\n\n// ----------------------------------------------------------------------------\n// selector.js and selectorAll.js related functions\n// ----------------------------------------------------------------------------\n\n/**\n * Given the specified selector, returns a function which returns the first descendant of \"this\" element\n * that matches the specified selector.\n *\n * The generic refers to the type of the returned descendant element.\n *\n * @param selector A CSS selector string.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function selector<DescElement extends Element>(selector: string): (this: BaseType) => DescElement;\n\n/**\n * Given the specified selector, returns a function which returns all descendants of \"this\" element that match the specified selector.\n *\n * The generic refers to the type of the returned descendant element.\n *\n * @param selector A CSS selector string.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function selectorAll<DescElement extends Element>(selector: string): (this: BaseType) => NodeListOf<DescElement>;\n\n// Types from d3-shape\n// Last module patch version validated against: 3.1.0\n\ndeclare global {\n    interface CanvasRenderingContext2D {} // eslint-disable-line @typescript-eslint/no-empty-interface\n}\n\n// -----------------------------------------------------------------------------------\n// Shared Types and Interfaces\n// -----------------------------------------------------------------------------------\n\n/**\n * @deprecated\n * This interface is used to bridge the gap between two incompatible versions of TypeScript (see [#25944](https://github.com/Microsoft/TypeScript/pull/25944)).\n * Use `CanvasPathMethods` instead with TS <= 3.0 and `CanvasPath` with TS >= 3.1.\n */\nexport interface CanvasPath_D3Shape {\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;\n    closePath(): void;\n    ellipse(\n        x: number,\n        y: number,\n        radiusX: number,\n        radiusY: number,\n        rotation: number,\n        startAngle: number,\n        endAngle: number,\n        anticlockwise?: boolean,\n    ): void;\n    lineTo(x: number, y: number): void;\n    moveTo(x: number, y: number): void;\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;\n    rect(x: number, y: number, w: number, h: number): void;\n}\n\n// -----------------------------------------------------------------------------------\n// Arc Generator\n// -----------------------------------------------------------------------------------\n\n/**\n * Interface corresponding to the minimum data type assumed by the accessor functions of the Arc generator.\n */\nexport interface DefaultArcObject {\n    /**\n     * Inner radius of arc.\n     */\n    innerRadius: number;\n    /**\n     * Outer radius of arc.\n     */\n    outerRadius: number;\n    /**\n     * Start angle of arc. The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.\n     */\n    startAngle: number;\n    /**\n     * End angle of arc. The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.\n     */\n    endAngle: number;\n    /**\n     * Optional. Pad angle of arc in radians.\n     */\n    padAngle?: number | undefined;\n}\n\n/**\n * The arc generator produces a circular or annular sector, as in a pie or donut chart.\n *\n * If the difference between the start and end angles (the angular span) is greater than τ, the arc generator will produce a complete circle or annulus.\n * If it is less than τ, arcs may have rounded corners and angular padding. Arcs are always centered at ⟨0,0⟩; use a transform (see: SVG, Canvas) to move the arc to a different position.\n *\n * See also the pie generator, which computes the necessary angles to represent an array of data as a pie or donut chart; these angles can then be passed to an arc generator.\n *\n * The first generic corresponds to the type of the \"this\" context within which the arc generator and its accessor functions will be invoked.\n *\n * The second generic corresponds to the datum type for which the arc is to be generated.\n */\nexport interface Arc<This, Datum> {\n    /**\n     * Generates an arc for the given arguments.\n     *\n     * IMPORTANT: If the rendering context of the arc generator is null,\n     * then the arc is returned as a path data string.\n     *\n     * The \"this\" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.\n     * All arguments passed into this function, will be passed to the accessor functions of the generator.\n     *\n     * @param d The datum for which the arc is to be generated.\n     */\n    (this: This, d: Datum, ...args: any[]): string | null;\n    /**\n     * Generates an arc for the given arguments.\n     *\n     * IMPORTANT: If the arc generator has been configured with a rendering context,\n     * then the arc is rendered to this context as a sequence of path method calls and this function returns void.\n     *\n     * The \"this\" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.\n     * All arguments passed into this function, will be passed to the accessor functions of the generator.\n     *\n     * @param d The datum for which the arc is to be generated.\n     */\n    (this: This, d: Datum, ...args: any[]): void;\n\n    /**\n     * Computes the midpoint [x, y] of the center line of the arc that would be generated by the given arguments.\n     *\n     * To be consistent with the generated arc, the accessors must be deterministic, i.e., return the same value given the same arguments.\n     * The midpoint is defined as (startAngle + endAngle) / 2 and (innerRadius + outerRadius) / 2.\n     *\n     * Note that this is not the geometric center of the arc, which may be outside the arc;\n     * this method is merely a convenience for positioning labels.\n     *\n     * The method is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that are passed into the arc generator.\n     *\n     * @param d The datum for which the arc is to be generated.\n     */\n    centroid(d: Datum, ...args: any[]): [number, number];\n\n    /**\n     * Returns the current inner radius accessor, which defaults to a function returning the innerRadius property\n     * of the first argument passed into it.\n     */\n    innerRadius(): (this: This, d: Datum, ...args: any[]) => number;\n    /**\n     * Sets the inner radius to the specified number and returns this arc generator.\n     *\n     * Specifying the inner radius as a function is useful for constructing a stacked polar bar chart, often in conjunction with a sqrt scale.\n     * More commonly, a constant inner radius is used for a donut or pie chart. If the outer radius is smaller than the inner radius, the inner and outer radii are swapped.\n     * A negative value is treated as zero.\n     *\n     * @param radius Constant radius.\n     */\n    innerRadius(radius: number): this;\n    /**\n     * Sets the inner radius to the specified function and returns this arc generator.\n     *\n     * Specifying the inner radius as a function is useful for constructing a stacked polar bar chart, often in conjunction with a sqrt scale.\n     * More commonly, a constant inner radius is used for a donut or pie chart. If the outer radius is smaller than the inner radius, the inner and outer radii are swapped.\n     * A negative value is treated as zero.\n     *\n     * @param radius An accessor function returning a number to be used as a radius. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that were passed into the arc generator.\n     */\n    innerRadius(radius: (this: This, d: Datum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current outer radius accessor, which defaults to a function returning the outerRadius property\n     * of the first argument passed into it.\n     */\n    outerRadius(): (this: This, d: Datum, ...args: any[]) => number;\n    /**\n     * Sets the outer radius to the specified number and returns this arc generator.\n     *\n     * Specifying the outer radius as a function is useful for constructing a coxcomb or polar bar chart,\n     * often in conjunction with a sqrt scale. More commonly, a constant outer radius is used for a pie or donut chart.\n     * If the outer radius is smaller than the inner radius, the inner and outer radii are swapped.\n     * A negative value is treated as zero.\n     *\n     * @param radius Constant radius.\n     */\n    outerRadius(radius: number): this;\n    /**\n     * Sets the outer radius to the specified function and returns this arc generator.\n     *\n     * Specifying the outer radius as a function is useful for constructing a coxcomb or polar bar chart,\n     * often in conjunction with a sqrt scale. More commonly, a constant outer radius is used for a pie or donut chart.\n     * If the outer radius is smaller than the inner radius, the inner and outer radii are swapped.\n     * A negative value is treated as zero.\n     *\n     * @param radius An accessor function returning a number to be used as a radius. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that were passed into the arc generator.\n     */\n    outerRadius(radius: (this: This, d: Datum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current corner radius accessor, which defaults to a function returning a constant value of zero.\n     */\n    cornerRadius(): (this: This, d: Datum, ...args: any[]) => number;\n    /**\n     * Sets the corner radius to the specified number and returns this arc generator.\n     *\n     * If the corner radius is greater than zero, the corners of the arc are rounded using circles of the given radius.\n     * For a circular sector, the two outer corners are rounded; for an annular sector, all four corners are rounded.\n     *\n     * The corner radius may not be larger than (outerRadius - innerRadius) / 2.\n     * In addition, for arcs whose angular span is less than π, the corner radius may be reduced as two adjacent rounded corners intersect.\n     * This is occurs more often with the inner corners.\n     *\n     * @param radius Constant radius.\n     */\n    cornerRadius(radius: number): this;\n    /**\n     * Sets the corner radius to the specified function and returns this arc generator.\n     *\n     * The corner radius may not be larger than (outerRadius - innerRadius) / 2.\n     * In addition, for arcs whose angular span is less than π, the corner radius may be reduced as two adjacent rounded corners intersect.\n     * This is occurs more often with the inner corners.\n     *\n     * @param radius An accessor function returning a number to be used as a radius. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that were passed into the arc generator.\n     */\n    cornerRadius(radius: (this: This, d: Datum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current start angle accessor, which defaults to a function returning the startAngle property\n     * of the first argument passed into it.\n     */\n    startAngle(): (this: This, d: Datum, ...args: any[]) => number;\n    /**\n     * Sets the start angle to the specified number and returns this arc generator.\n     *\n     * The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.\n     * If |endAngle - startAngle| ≥ τ, a complete circle or annulus is generated rather than a sector.\n     *\n     * @param angle Constant angle in radians.\n     */\n    startAngle(angle: number): this;\n    /**\n     * Sets the start angle to the specified function and returns this arc generator.\n     *\n     * The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.\n     * If |endAngle - startAngle| ≥ τ, a complete circle or annulus is generated rather than a sector.\n     *\n     * @param angle An accessor function returning a number in radians to be used as an angle. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that were passed into the arc generator.\n     */\n    startAngle(angle: (this: This, d: Datum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current end angle accessor, which defaults to a function returning the endAngle property\n     * of the first argument passed into it.\n     */\n    endAngle(): (this: This, d: Datum, ...args: any[]) => number;\n    /**\n     * Sets the end angle to the specified number and returns this arc generator.\n     *\n     * The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.\n     * If |endAngle - startAngle| ≥ τ, a complete circle or annulus is generated rather than a sector.\n     *\n     * @param angle Constant angle in radians.\n     */\n    endAngle(angle: number): this;\n    /**\n     * Sets the end angle to the specified function and returns this arc generator.\n     *\n     * The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.\n     * If |endAngle - startAngle| ≥ τ, a complete circle or annulus is generated rather than a sector.\n     *\n     * @param angle An accessor function returning a number in radians to be used as an angle. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that were passed into the arc generator.\n     */\n    endAngle(angle: (this: This, d: Datum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current pad angle accessor, which defaults to a function returning the padAngle property\n     * of the first argument passed into it, or false if no data are passed in or the property is not defined.\n     */\n    padAngle(): (this: This, d: Datum, ...args: any[]) => number | undefined;\n    /**\n     * Sets the pad angle to the specified number and returns this arc generator.\n     *\n     * The pad angle is converted to a fixed linear distance separating adjacent arcs, defined as padRadius * padAngle. This distance is subtracted equally from the start and end of the arc.\n     * If the arc forms a complete circle or annulus, as when |endAngle - startAngle| ≥ τ, the pad angle is ignored. If the inner radius or angular span is small relative to the pad angle,\n     * it may not be possible to maintain parallel edges between adjacent arcs. In this case, the inner edge of the arc may collapse to a point, similar to a circular sector.\n     * For this reason, padding is typically only applied to annular sectors (i.e., when innerRadius is positive).\n     *\n     * The recommended minimum inner radius when using padding is outerRadius * padAngle / sin(θ), where θ is the angular span of the smallest arc before padding.\n     * For example, if the outer radius is 200 pixels and the pad angle is 0.02 radians, a reasonable θ is 0.04 radians, and a reasonable inner radius is 100 pixels.\n     *\n     * Often, the pad angle is not set directly on the arc generator, but is instead computed by the pie generator so as to ensure that the area of padded arcs is proportional to their value;\n     * see pie.padAngle. See the pie padding animation for illustration.\n     * If you apply a constant pad angle to the arc generator directly, it tends to subtract disproportionately from smaller arcs, introducing distortion.\n     *\n     * @param angle Constant angle in radians.\n     */\n    padAngle(angle: number | undefined): this;\n    /**\n     * Sets the pad angle to the specified function and returns this arc generator.\n     *\n     * The pad angle is converted to a fixed linear distance separating adjacent arcs, defined as padRadius * padAngle. This distance is subtracted equally from the start and end of the arc.\n     * If the arc forms a complete circle or annulus, as when |endAngle - startAngle| ≥ τ, the pad angle is ignored. If the inner radius or angular span is small relative to the pad angle,\n     * it may not be possible to maintain parallel edges between adjacent arcs. In this case, the inner edge of the arc may collapse to a point, similar to a circular sector.\n     * For this reason, padding is typically only applied to annular sectors (i.e., when innerRadius is positive).\n     *\n     * The recommended minimum inner radius when using padding is outerRadius * padAngle / sin(θ), where θ is the angular span of the smallest arc before padding.\n     * For example, if the outer radius is 200 pixels and the pad angle is 0.02 radians, a reasonable θ is 0.04 radians, and a reasonable inner radius is 100 pixels.\n     *\n     * Often, the pad angle is not set directly on the arc generator, but is instead computed by the pie generator so as to ensure that the area of padded arcs is proportional to their value;\n     * see pie.padAngle. See the pie padding animation for illustration.\n     * If you apply a constant pad angle to the arc generator directly, it tends to subtract disproportionately from smaller arcs, introducing distortion.\n     *\n     * @param angle An accessor function returning a number in radians to be used as an angle. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that were passed into the arc generator.\n     */\n    padAngle(angle: (this: This, d: Datum, ...args: any[]) => number | undefined): this;\n\n    /**\n     * Returns the current pad radius accessor, which defaults to null, indicating that the pad radius should be automatically computed as sqrt(innerRadius * innerRadius + outerRadius * outerRadius).\n     */\n    padRadius(): ((this: This, d: Datum, ...args: any[]) => number) | null;\n    /**\n     * Sets the pad radius to the specified function or number and returns this arc generator.\n     * The pad radius determines the fixed linear distance separating adjacent arcs, defined as padRadius * padAngle.\n     */\n    padRadius(radius: null | number | ((this: This, d: Datum, ...args: any[]) => number)): this;\n\n    /**\n     * Returns the current rendering context, which defaults to null.\n     */\n    context(): CanvasRenderingContext2D | null;\n    /**\n     * Sets the context and returns this arc generator.\n     * If context is not specified, returns the current context, which defaults to null.\n     */\n    context(context: CanvasRenderingContext2D | null): this;\n}\n\n/**\n * Constructs a new arc generator with the default settings.\n *\n * Ensure that the accessors used with the arc generator correspond to the arguments passed into them,\n * or set them to constants as appropriate.\n */\nexport function arc(): Arc<any, DefaultArcObject>;\n/**\n * Constructs a new arc generator with the default settings.\n *\n * Ensure that the accessors used with the arc generator correspond to the arguments passed into them,\n * or set them to constants as appropriate.\n *\n * The generic corresponds to the datum type representing a arc.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function arc<Datum>(): Arc<any, Datum>;\n/**\n * Constructs a new arc generator with the default settings.\n *\n * Ensure that the accessors used with the arc generator correspond to the arguments passed into them,\n * or set them to constants as appropriate.\n *\n * The first generic corresponds to the type of the \"this\" context within which the arc generator and its accessor functions will be invoked.\n *\n * The second generic corresponds to the datum type representing a arc.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function arc<This, Datum>(): Arc<This, Datum>;\n\n// -----------------------------------------------------------------------------------\n// Pie Generator\n// -----------------------------------------------------------------------------------\n\n/**\n * Element of the Arc Datums Array created by invoking the Pie generator.\n *\n * The generic refers to the data type of an element in the input array passed into the Pie generator.\n */\nexport interface PieArcDatum<T> {\n    /**\n     * The input datum; the corresponding element in the input data array of the Pie generator.\n     */\n    data: T;\n    /**\n     * The numeric value of the arc.\n     */\n    value: number;\n    /**\n     * The zero-based sorted index of the arc.\n     */\n    index: number;\n    /**\n     * The start angle of the arc.\n     * If the pie generator was configured to be used for the arc generator,\n     * then the units are in radians with 0 at -y (12 o’clock) and positive angles proceeding clockwise.\n     */\n    startAngle: number;\n    /**\n     * The end angle of the arc.\n     * If the pie generator was configured to be used for the arc generator,\n     * then the units are in radians with 0 at -y (12 o’clock) and positive angles proceeding clockwise.\n     */\n    endAngle: number;\n    /**\n     * The pad angle of the arc. If the pie generator was configured to be used for the arc generator, than the units are in radians.\n     */\n    padAngle: number;\n}\n\n/**\n * The pie generator does not produce a shape directly, but instead computes the necessary angles to represent a tabular dataset as a pie or donut chart;\n * these angles can then be passed to an arc generator.\n *\n * The first generic corresponds to the type of the \"this\" context within which the pie generator and its accessor functions will be invoked.\n *\n * The second generic refers to the data type of an element in the input array passed into the Pie generator.\n */\nexport interface Pie<This, Datum> {\n    /**\n     * Generates a pie for the given array of data, returning an array of objects representing each datum’s arc angles.\n     * Any additional arguments are arbitrary; they are simply propagated to the pie generator’s accessor functions along with the this object.\n     * The length of the returned array is the same as data, and each element i in the returned array corresponds to the element i in the input data.\n     *\n     * This representation is designed to work with the arc generator’s default startAngle, endAngle and padAngle accessors.\n     * The angular units are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator,\n     * you should specify angles in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.\n     *\n     * @param data Array of data elements.\n     */\n    (this: This, data: Datum[], ...args: any[]): Array<PieArcDatum<Datum>>;\n\n    /**\n     * Returns the current value accessor, which defaults to a function returning the first argument passed into it.\n     * The default value accessor assumes that the input data are numbers, or that they are coercible to numbers using valueOf.\n     */\n    value(): (d: Datum, i: number, data: Datum[]) => number;\n    /**\n     * Sets the value accessor to use the specified constant number and returns this pie generator.\n     *\n     * @param value Constant value to be used.\n     */\n    value(value: number): this;\n    /**\n     * Sets the value accessor to use the specified function and returns this pie generator.\n     *\n     * When a pie is generated, the value accessor will be invoked for each element in the input data array.\n     * The default value accessor assumes that the input data are numbers, or that they are coercible to numbers using valueOf.\n     * If your data are not simply numbers, then you should specify an accessor that returns the corresponding numeric value for a given datum.\n     *\n     * @param value A value accessor function, which is invoked for each element in the input data array, being passed the element d, the index i, and the array data as three arguments.\n     * It returns a numeric value.\n     */\n    value(value: (d: Datum, i: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current data comparator, which defaults to null.\n     */\n    sort(): ((a: Datum, b: Datum) => number) | null;\n    /**\n     * Sets the data comparator to the specified function and returns this pie generator.\n     *\n     * If both the data comparator and the value comparator are null, then arcs are positioned in the original input order.\n     * Otherwise, the data is sorted according to the data comparator, and the resulting order is used. Setting the data comparator implicitly sets the value comparator to null.\n     *\n     * Sorting does not affect the order of the generated arc array which is always in the same order as the input data array; it merely affects the computed angles of each arc.\n     * The first arc starts at the start angle and the last arc ends at the end angle.\n     *\n     * @param comparator A compare function takes two arguments a and b, each elements from the input data array.\n     * If the arc for a should be before the arc for b, then the comparator must return a number less than zero;\n     * if the arc for a should be after the arc for b, then the comparator must return a number greater than zero;\n     * returning zero means that the relative order of a and b is unspecified.\n     */\n    sort(comparator: (a: Datum, b: Datum) => number): this;\n    /**\n     * Sets the data comparator to null and returns this pie generator.\n     *\n     * If both the data comparator and the value comparator are null, then arcs are positioned in the original input order.\n     *\n     * @param comparator null, to set the pie generator to use the original input order or use the sortValues comparator, if any.\n     */\n    sort(comparator: null): this;\n\n    /**\n     * Returns the current value comparator, which defaults to descending value.\n     */\n    sortValues(): ((a: number, b: number) => number) | null;\n    /**\n     * Sets the value comparator to the specified function and returns this pie generator.\n     *\n     * If both the data comparator and the value comparator are null, then arcs are positioned in the original input order.\n     * Otherwise, the data is sorted according to the data comparator, and the resulting order is used.\n     * Setting the value comparator implicitly sets the data comparator to null.\n     *\n     * The value comparator is similar to the data comparator, except the two arguments a and b are values derived from the input data array using the value accessor, not the data elements.\n     * If the arc for a should be before the arc for b, then the comparator must return a number less than zero;\n     * if the arc for a should be after the arc for b, then the comparator must return a number greater than zero;\n     * returning zero means that the relative order of a and b is unspecified.\n     */\n    sortValues(comparator: ((a: number, b: number) => number) | null): this;\n\n    /**\n     * Returns the current start angle accessor, which defaults to a function returning a constant zero.\n     */\n    startAngle(): (this: This, data: Datum[], ...args: any[]) => number;\n    /**\n     * Sets the overall start angle of the pie to the specified number and returns this pie generator.\n     *\n     * The default start angle is zero.\n     *\n     * The start angle here means the overall start angle of the pie, i.e., the start angle of the first arc.\n     * The start angle accessor is invoked once, being passed the same arguments and this context as the pie generator.\n     * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator,\n     * you should specify an angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.\n     *\n     * @param angle A constant angle.\n     */\n    startAngle(angle: number): this;\n    /**\n     * Sets the overall start angle of the pie to the specified function and returns this pie generator.\n     *\n     * The default start angle is zero.\n     *\n     * The start angle here means the overall start angle of the pie, i.e., the start angle of the first arc.\n     * The start angle accessor is invoked once, being passed the same arguments and this context as the pie generator.\n     * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator,\n     * you should specify an angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.\n     *\n     * @param angle An angle accessor function, which is invoked once, being passed the same arguments and this context as the pie generator.\n     */\n    startAngle(angle: (this: This, data: Datum[], ...args: any[]) => number): this;\n\n    /**\n     * Returns the current end angle accessor, which defaults to a function returning a constant 2*pi.\n     */\n    endAngle(): (this: This, data: Datum[], ...args: any[]) => number;\n    /**\n     * Sets the overall end angle of the pie to the specified number and returns this pie generator.\n     *\n     * The default end angle is 2*pi.\n     *\n     * The end angle here means the overall end angle of the pie, i.e., the end angle of the last arc.\n     * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator,\n     * you should specify an angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.\n     *\n     * The value of the end angle is constrained to startAngle ± τ, such that |endAngle - startAngle| ≤ τ.\n     *\n     * @param angle A constant angle.\n     */\n    endAngle(angle: number): this;\n    /**\n     * Sets the overall end angle of the pie to the specified function and returns this pie generator.\n     *\n     * The default end angle is 2*pi.\n     *\n     * The end angle here means the overall end angle of the pie, i.e., the end angle of the last arc.\n     * The end angle accessor is invoked once, being passed the same arguments and this context as the pie generator.\n     * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator,\n     * you should specify an angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.\n     *\n     * The value of the end angle is constrained to startAngle ± τ, such that |endAngle - startAngle| ≤ τ.\n     *\n     * @param angle An angle accessor function, which is invoked once, being passed the same arguments and this context as the pie generator.\n     */\n    endAngle(angle: (this: This, data: Datum[], ...args: any[]) => number): this;\n\n    /**\n     * Returns the current pad angle accessor, which defaults to a function returning a constant zero.\n     */\n    padAngle(): (this: This, data: Datum[], ...args: any[]) => number;\n    /**\n     * Sets the pad angle to the specified number and returns this pie generator.\n     *\n     * The pad angle here means the angular separation between each adjacent arc.\n     * The total amount of padding reserved is the specified angle times the number of elements in the input data array, and at most |endAngle - startAngle|;\n     * the remaining space is then divided proportionally by value such that the relative area of each arc is preserved.\n     * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator, you should specify an angle in radians.\n     *\n     * @param angle A constant angle.\n     */\n    padAngle(angle: number): this;\n    /**\n     * Sets the pad angle to the specified function and returns this pie generator.\n     *\n     * The pad angle here means the angular separation between each adjacent arc.\n     * The total amount of padding reserved is the specified angle times the number of elements in the input data array, and at most |endAngle - startAngle|;\n     * the remaining space is then divided proportionally by value such that the relative area of each arc is preserved.\n     * The pad angle accessor is invoked once, being passed the same arguments and this context as the pie generator.\n     * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator, you should specify an angle in radians.\n     *\n     * @param angle An angle accessor function, which is invoked once, being passed the same arguments and this context as the pie generator.\n     */\n    padAngle(angle: (this: This, data: Datum[], ...args: any[]) => number): this;\n}\n\n/**\n * Constructs a new pie generator with the default settings.\n *\n * Ensure that the accessors used with the pie generator correspond to the arguments passed into them,\n * or set them to constants as appropriate.\n */\nexport function pie(): Pie<any, number | { valueOf(): number }>;\n/**\n * Constructs a new pie generator with the default settings.\n *\n * Ensure that the accessors used with the pie generator correspond to the arguments passed into them,\n * or set them to constants as appropriate.\n *\n * The generic refers to the data type of an element in the input array passed into the Pie generator.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function pie<Datum>(): Pie<any, Datum>;\n/**\n * Constructs a new pie generator with the default settings.\n *\n * Ensure that the accessors used with the pie generator correspond to the arguments passed into them,\n * or set them to constants as appropriate.\n *\n * The first generic corresponds to the type of the \"this\" context within which the pie generator and its accessor functions will be invoked.\n *\n * The second generic refers to the data type of an element in the input array passed into the Pie generator.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function pie<This, Datum>(): Pie<This, Datum>;\n\n// -----------------------------------------------------------------------------------\n// Line Generators\n// -----------------------------------------------------------------------------------\n\n/**\n * The line generator produces a spline or polyline, as in a line chart.\n * Lines also appear in many other visualization types, such as the links in hierarchical edge bundling.\n *\n * The generic refers to the data type of an element in the input array passed into the line generator.\n */\nexport interface Line<Datum> {\n    /**\n     * Generates a line for the given array of data. Depending on this line generator’s associated curve,\n     * the given input data may need to be sorted by x-value before being passed to the line generator.\n     *\n     * IMPORTANT: If the rendering context of the line generator is null,\n     * then the line is returned as a path data string.\n     *\n     * @param data Array of data elements.\n     */\n    (data: Iterable<Datum> | Datum[]): string | null;\n    /**\n     * Generates a line for the given array of data. Depending on this line generator’s associated curve,\n     * the given input data may need to be sorted by x-value before being passed to the line generator.\n     *\n     * IMPORTANT: If the line generator has been configured with a rendering context,\n     * then the line is rendered to this context as a sequence of path method calls and this function returns void.\n     *\n     * @param data Array of data elements.\n     */\n    (data: Iterable<Datum> | Datum[]): void;\n\n    /**\n     * Returns the current x-coordinate accessor function, which defaults to a function returning first element of a two-element array of numbers.\n     */\n    x(): (d: Datum, index: number, data: Datum[]) => number;\n    /**\n     * Sets the x accessor to the specified number and returns this line generator.\n     *\n     * @param x A constant x-coordinate value.\n     */\n    x(x: number): this;\n    /**\n     * Sets the x accessor to the specified function and returns this line generator.\n     *\n     * When a line is generated, the x accessor will be invoked for each defined element in the input data array.\n     *\n     * The default x accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering,\n     * then you should specify a custom accessor.\n     *\n     * @param x A coordinate accessor function which returns the x-coordinate value. The x accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    x(x: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current y-coordinate accessor function, which defaults to a function returning second element of a two-element array of numbers.\n     */\n    y(): (d: Datum, index: number, data: Datum[]) => number;\n    /**\n     * Sets the y accessor to the specified number and returns this line generator.\n     *\n     * @param y A constant y-coordinate value.\n     */\n    y(y: number): this;\n    /**\n     * Sets the y accessor to the specified function and returns this line generator.\n     *\n     * When a line is generated, the y accessor will be invoked for each defined element in the input data array.\n     *\n     * The default y accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering,\n     * then you should specify a custom accessor.\n     *\n     * @param y A coordinate accessor function which returns the y-coordinate value. The y accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    y(y: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current defined accessor, which defaults to a function returning a constant boolean value of true.\n     */\n    defined(): (d: Datum, index: number, data: Datum[]) => boolean;\n    /**\n     * Sets the defined accessor to the specified boolean and returns this line generator.\n     *\n     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.\n     *\n     * When a line is generated, the defined accessor will be invoked for each element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),\n     * the x and y accessors will subsequently be evaluated and the point will be added to the current line segment.\n     * Otherwise, the element will be skipped, the current line segment will be ended, and a new line segment will be generated for the next defined point.\n     * As a result, the generated line may have several discrete segments.\n     *\n     * Note that if a line segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.\n     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.\n     *\n     * @param defined A boolean constant.\n     */\n    defined(defined: boolean): this;\n    /**\n     * Sets the defined accessor to the specified function and returns this line generator.\n     *\n     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.\n     *\n     * When a line is generated, the defined accessor will be invoked for each element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),\n     * the x and y accessors will subsequently be evaluated and the point will be added to the current line segment.\n     * Otherwise, the element will be skipped, the current line segment will be ended, and a new line segment will be generated for the next defined point.\n     * As a result, the generated line may have several discrete segments.\n     *\n     * Note that if a line segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.\n     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.\n     *\n     * @param defined An accessor function which returns a boolean value. The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    defined(defined: (d: Datum, index: number, data: Datum[]) => boolean): this;\n\n    /**\n     * Returns the current curve factory, which defaults to curveLinear.\n     */\n    curve(): CurveFactory | CurveFactoryLineOnly;\n    /**\n     * Returns the current curve factory, which defaults to curveLinear.\n     *\n     * The generic allows to cast the curve factory to a specific type, if known.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    curve<C extends CurveFactory | CurveFactoryLineOnly>(): C;\n    /**\n     * Sets the curve factory and returns this line generator.\n     *\n     * @param curve A valid curve factory.\n     */\n    curve(curve: CurveFactory | CurveFactoryLineOnly): this;\n\n    /**\n     * Returns the current rendering context, which defaults to null.\n     */\n    context(): CanvasRenderingContext2D | null;\n    /**\n     * Sets the context and returns this line generator.\n     */\n    context(context: CanvasRenderingContext2D | null): this;\n}\n\n/**\n * Constructs a new line generator with the default settings.\n *\n * If x or y are specified, sets the corresponding accessors to the specified function or number and returns this line generator.\n *\n * The generic refers to the data type of an element in the input array passed into the line generator.\n *\n * @param x Sets the x accessor\n * @param y Sets the y accessor\n */\nexport function line<Datum = [number, number]>(\n    x?: number | ((d: Datum, index: number, data: Datum[]) => number),\n    y?: number | ((d: Datum, index: number, data: Datum[]) => number),\n): Line<Datum>;\n\n/**\n * The radial line generator produces a spline or polyline, as in a line chart.\n *\n * A radial line generator is equivalent to the standard Cartesian line generator,\n * except the x and y accessors are replaced with angle and radius accessors.\n * Radial lines are always positioned relative to ⟨0,0⟩; use a transform (see: SVG, Canvas) to change the origin.\n *\n * The generic refers to the data type of an element in the input array passed into the line generator.\n */\nexport interface LineRadial<Datum> {\n    /**\n     * Generates a radial line for the given array of data. Depending on this radial line generator’s associated curve,\n     * the given input data may need to be sorted by x-value before being passed to the line generator.\n     *\n     * IMPORTANT: If the rendering context of the radial line generator is null,\n     * then the radial line is returned as a path data string.\n     *\n     * @param data Array of data elements.\n     */\n    (data: Iterable<Datum> | Datum[]): string | null;\n    /**\n     * Generates a radial line for the given array of data. Depending on this radial line generator’s associated curve,\n     * the given input data may need to be sorted by x-value before being passed to the radial line generator.\n     *\n     * IMPORTANT: If the radial line generator has been configured with a rendering context,\n     * then the radial line is rendered to this context as a sequence of path method calls and this function returns void.\n     *\n     * @param data Array of data elements.\n     */\n    (data: Iterable<Datum> | Datum[]): void;\n\n    /**\n     * Returns the current angle accessor function, which defaults to a function returning first element of a two-element array of numbers.\n     */\n    angle(): (d: Datum, index: number, data: Datum[]) => number;\n    /**\n     * Sets the angle accessor to the specified number and returns this radial line generator.\n     *\n     * @param angle A constant angle value in radians, with 0 at -y (12 o’clock).\n     */\n    angle(angle: number): this;\n    /**\n     * Sets the angle accessor to the specified function and returns this radial line generator.\n     *\n     * When a radial line is generated, the angle accessor will be invoked for each defined element in the input data array.\n     *\n     * The default angle accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering,\n     * then you should specify a custom accessor.\n     *\n     * @param angle An angle accessor function which returns the angle value in radians, with 0 at -y (12 o’clock). The angle accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    angle(angle: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current radius accessor function, which defaults to a function returning second element of a two-element array of numbers.\n     */\n    radius(): (d: Datum, index: number, data: Datum[]) => number;\n    /**\n     * Sets the radius accessor to the specified number and returns this radial line generator.\n     *\n     * @param radius A constant radius value.\n     */\n    radius(radius: number): this;\n    /**\n     * Sets the radius accessor to the specified function and returns this radial line generator.\n     *\n     * When a radial line is generated, the radius accessor will be invoked for each defined element in the input data array.\n     *\n     * The default radius accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering,\n     * then you should specify a custom accessor.\n     *\n     * @param radius A radius accessor function which returns the radius value. The radius accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    radius(radius: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current defined accessor, which defaults to a function returning a constant boolean value of true.\n     */\n    defined(): (d: Datum, index: number, data: Datum[]) => boolean;\n    /**\n     * Sets the defined accessor to the specified boolean and returns this radial line generator.\n     *\n     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.\n     *\n     * When a radial line is generated, the defined accessor will be invoked for each element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),\n     * the angle and radius accessors will subsequently be evaluated and the point will be added to the current radial line segment.\n     * Otherwise, the element will be skipped, the current radial line segment will be ended, and a new radial line segment will be generated for the next defined point.\n     * As a result, the generated radial line may have several discrete segments.\n     *\n     * Note that if a radial line segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.\n     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.\n     *\n     * @param defined A boolean constant.\n     */\n    defined(defined: boolean): this;\n    /**\n     * Sets the defined accessor to the specified function and returns this radial line generator.\n     *\n     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.\n     *\n     * When a radial line is generated, the defined accessor will be invoked for each element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),\n     * the angle and radius accessors will subsequently be evaluated and the point will be added to the current radial line segment.\n     * Otherwise, the element will be skipped, the current radial line segment will be ended, and a new radial line segment will be generated for the next defined point.\n     * As a result, the generated radial line may have several discrete segments.\n     *\n     * Note that if a radial line segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.\n     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.\n     *\n     * @param defined An accessor function which returns a boolean value. The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    defined(defined: (d: Datum, index: number, data: Datum[]) => boolean): this;\n\n    /**\n     * Returns the current curve factory, which defaults to curveLinear.\n     */\n    curve(): CurveFactory | CurveFactoryLineOnly;\n    /**\n     * Returns the current curve factory, which defaults to curveLinear.\n     *\n     * The generic allows to cast the curve factory to a specific type, if known.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    curve<C extends CurveFactory | CurveFactoryLineOnly>(): C;\n    /**\n     * Sets the curve factory and returns this radial line generator.\n     *\n     * Note that curveMonotoneX or curveMonotoneY are not recommended for radial lines because they assume that the data is monotonic in x or y,\n     * which is typically untrue of radial lines.\n     *\n     * @param curve A valid curve factory.\n     */\n    curve(curve: CurveFactory | CurveFactoryLineOnly): this;\n\n    /**\n     * Returns the current rendering context, which defaults to null.\n     */\n    context(): CanvasRenderingContext2D | null;\n    /**\n     * Equivalent to line.context.\n     */\n    context(context: CanvasRenderingContext2D | null): this;\n}\n\n/**\n * Constructs a new radial line generator with the default settings.\n *\n * Ensure that the accessors used with the radial line generator correspond to the arguments passed into them,\n * or set them to constants as appropriate.\n */\nexport function lineRadial(): LineRadial<[number, number]>;\n/**\n * Constructs a new radial line generator with the default settings.\n *\n * Ensure that the accessors used with the radial line generator correspond to the arguments passed into them,\n * or set them to constants as appropriate.\n *\n * The generic refers to the data type of an element in the input array passed into the radial line generator.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function lineRadial<Datum>(): LineRadial<Datum>;\n\n/**\n * @deprecated Use LineRadial<Datum>\n */\nexport type RadialLine<Datum> = LineRadial<Datum>;\n\n/**\n * @deprecated Use lineRadial()\n */\nexport function radialLine(): RadialLine<[number, number]>;\n/**\n * @deprecated Use lineRadial<Datum>()\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function radialLine<Datum>(): RadialLine<Datum>;\n\n// -----------------------------------------------------------------------------------\n// Area Generators\n// -----------------------------------------------------------------------------------\n\n/**\n * The area generator produces an area, as in an area chart. An area is defined by two bounding lines, either splines or polylines.\n * Typically, the two lines share the same x-values (x0 = x1), differing only in y-value (y0 and y1); most commonly, y0 is defined as a constant representing zero.\n * The first line (the topline) is defined by x1 and y1 and is rendered first; the second line (the baseline) is defined by x0 and y0 and is rendered second, with the points in reverse order.\n * With a curveLinear curve, this produces a clockwise polygon.\n *\n * The generic refers to the data type of an element in the input array passed into the area generator.\n */\nexport interface Area<Datum> {\n    /**\n     * Generates an area for the given array of data. Depending on this area generator’s associated curve,\n     * the given input data may need to be sorted by x-value before being passed to the area generator.\n     *\n     * IMPORTANT: If the rendering context of the area generator is null,\n     * then the area is returned as a path data string.\n     *\n     * @param data Array of data elements.\n     */\n    (data: Iterable<Datum> | Datum[]): string | null;\n    /**\n     * Generates an area for the given array of data. Depending on this area generator’s associated curve,\n     * the given input data may need to be sorted by x-value before being passed to the area generator.\n     *\n     * IMPORTANT: If the area generator has been configured with a rendering context,\n     * then the area is rendered to this context as a sequence of path method calls and this function returns void.\n     *\n     * @param data Array of data elements.\n     */\n    (data: Iterable<Datum> | Datum[]): void;\n\n    /**\n     * Returns the current x0 accessor. The default x0 accessor is a function returning the first element of a\n     * two-element array of numbers.\n     */\n    x(): (d: Datum, index: number, data: Datum[]) => number;\n    /**\n     * Sets x0 to a constant number x and x1 to null and returns this area generator.\n     *\n     * Setting x1 to null indicates that the previously-computed x0 value should be reused for the x1 value.\n     *\n     * @param x A constant value to be used for x0.\n     */\n    x(x: number): this;\n    /**\n     * Sets x0 to the specified function x and x1 to null and returns this area generator.\n     *\n     * The default x0 accessor assumes that the input data are two-element arrays of numbers and returns the first element.\n     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.\n     *\n     * @param x An accessor function returning a value to be used for x0. The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    x(x: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current x0 accessor. The default x0 accessor is a function returning the first element of a\n     * two-element array of numbers.\n     */\n    x0(): (d: Datum, index: number, data: Datum[]) => number;\n    /**\n     * Sets x0 to a constant number and returns this area generator.\n     *\n     * @param x A constant value.\n     */\n    x0(x: number): this;\n    /**\n     * Sets x0 to the specified function and returns this area generator.\n     *\n     * The default x0 accessor assumes that the input data are two-element arrays of numbers and returns the first element.\n     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.\n     *\n     * @param x An accessor function returning a value to be used for x0. The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    x0(x: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current x1 accessor, which defaults to null, indicating that the previously-computed x0 value should be reused for the x1 value.\n     */\n    x1(): ((d: Datum, index: number, data: Datum[]) => number) | null;\n    /**\n     * Sets the x1 accessor to the specified number and returns this area generator.\n     */\n    x1(x: null | number): this;\n    /**\n     * Sets x1 to the specified function and returns this area generator.\n     *\n     * The default x1 accessor is null, indicating that the previously-computed x0 value should be reused for the x1 value.\n     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.\n     *\n     * @param x An accessor function returning a value to be used for x1. The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    x1(x: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current y0 accessor. The default y0 accessor is a function returning a constant value of zero.\n     */\n    y(): (d: Datum, index: number, data: Datum[]) => number;\n    /**\n     * Sets y0 to a constant number y and y1 to null and returns this area generator.\n     *\n     * Setting y1 to null indicates that the previously-computed y0 value should be reused for the y1 value.\n     *\n     * @param y A constant value to be used for y0.\n     */\n    y(y: number): this;\n    /**\n     * Sets y0 to the accessor function y and y1 to null and returns this area generator.\n     *\n     * The default y0 accessor returns a constant value of zero.\n     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.\n     *\n     * @param y An accessor function returning a value to be used for y0. The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    y(y: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current y0 accessor. The default y0 accessor is a function a constant value of zero.\n     */\n    y0(): (d: Datum, index: number, data: Datum[]) => number;\n    /**\n     * Sets y0 to a constant number and returns this area generator.\n     *\n     * @param y A constant value.\n     */\n    y0(y: number): this;\n    /**\n     * Sets y0 to the specified function and returns this area generator.\n     *\n     * The default y0 accessor is a function which returns a constant value of zero.\n     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.\n     *\n     * @param y An accessor function returning a value to be used for y0. The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    y0(y: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current y1 accessor or null. The default y1 accessor is a function returning the second element of a\n     * two-element array of numbers.\n     *\n     * If the y1 accessor is null, the previously-computed y0 value is reused for the y1 value.\n     */\n    y1(): ((d: Datum, index: number, data: Datum[]) => number) | null;\n    /**\n     * sets the y1 accessor to the specified number and returns this area generator.\n     */\n    y1(y: null | number): this;\n    /**\n     * Sets y1 to the specified function and returns this area generator.\n     *\n     * The default y1 accessor assumes that the input data are two-element arrays of numbers and returns the second element.\n     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.\n     *\n     * @param y An accessor function returning a value to be used for y1. The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    y1(y: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current defined accessor, which defaults to a function returning a constant boolean value of true.\n     */\n    defined(): (d: Datum, index: number, data: Datum[]) => boolean;\n    /**\n     * Sets the defined accessor to the specified boolean and returns this area generator.\n     *\n     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.\n     * When an area is generated, the defined accessor will be invoked for each element in the input data array, being passed the element d, the index i, and the array data as three arguments.\n     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),\n     * the x0, x1, y0 and y1 accessors will subsequently be evaluated and the point will be added to the current area segment.\n     * Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point.\n     * As a result, the generated area may have several discrete segments.\n     *\n     * Note that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.\n     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.\n     *\n     * @param defined A boolean constant.\n     */\n    defined(defined: boolean): this;\n    /**\n     * Sets the defined accessor to the specified function and returns this area generator.\n     *\n     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.\n     *\n     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.\n     * When an area is generated, the defined accessor will be invoked for each element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),\n     * the x0, x1, y0 and y1 accessors will subsequently be evaluated and the point will be added to the current area segment.\n     * Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point.\n     * As a result, the generated area may have several discrete segments.\n     *\n     * Note that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.\n     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.\n     *\n     * @param defined An accessor function which returns a boolean value. The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    defined(defined: (d: Datum, index: number, data: Datum[]) => boolean): this;\n\n    /**\n     * Returns the current curve factory, which defaults to curveLinear.\n     */\n    curve(): CurveFactory;\n    /**\n     * Returns the current curve factory, which defaults to curveLinear.\n     *\n     * The generic allows to cast the curve factory to a specific type, if known.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    curve<C extends CurveFactory>(): C;\n    /**\n     * Sets the curve factory and returns this area generator.\n     *\n     * @param curve A valid curve factory.\n     */\n    curve(curve: CurveFactory): this;\n\n    /**\n     * Returns the current rendering context, which defaults to null.\n     */\n    context(): CanvasRenderingContext2D | null;\n    /**\n     * Sets the context and returns this area generator.\n     */\n    context(context: CanvasRenderingContext2D | null): this;\n\n    /**\n     * Returns a new line generator that has this area generator’s current defined accessor, curve and context.\n     * The line’s x-accessor is this area’s x0-accessor, and the line’s y-accessor is this area’s y0-accessor.\n     */\n    lineX0(): Line<Datum>;\n    /**\n     * Returns a new line generator that has this area generator’s current defined accessor, curve and context.\n     * The line’s x-accessor is this area’s x0-accessor, and the line’s y-accessor is this area’s y0-accessor.\n     */\n    lineY0(): Line<Datum>;\n\n    /**\n     * Returns a new line generator that has this area generator’s current defined accessor, curve and context.\n     * The line’s x-accessor is this area’s x1-accessor, and the line’s y-accessor is this area’s y0-accessor.\n     */\n    lineX1(): Line<Datum>;\n    /**\n     * Returns a new line generator that has this area generator’s current defined accessor, curve and context.\n     * The line’s x-accessor is this area’s x0-accessor, and the line’s y-accessor is this area’s y1-accessor.\n     */\n    lineY1(): Line<Datum>;\n}\n\n/**\n * Constructs a new area generator with the default settings.\n *\n * If x, y0 or y1 are specified, sets the corresponding accessors to the specified function or number and returns this area generator.\n *\n * The generic refers to the data type of an element in the input array passed into the area generator.\n *\n * @param x Sets the x accessor.\n * @param y0 Sets the y0 accessor.\n * @param y1 Sets the y1 accessor.\n */\nexport function area<Datum = [number, number]>(\n    x?: number | ((d: Datum, index: number, data: Datum[]) => number),\n    y0?: number | ((d: Datum, index: number, data: Datum[]) => number),\n    y1?: number | ((d: Datum, index: number, data: Datum[]) => number),\n): Area<Datum>;\n\n/**\n * A radial area generator.\n *\n * A radial area generator is equivalent to the standard Cartesian area generator,\n * except the x and y accessors are replaced with angle and radius accessors.\n * Radial areas are always positioned relative to ⟨0,0⟩; use a transform (see: SVG, Canvas) to change the origin.\n *\n * The generic refers to the data type of an element in the input array passed into the area generator.\n */\nexport interface AreaRadial<Datum> {\n    /**\n     * Generates a radial area for the given array of data.\n     *\n     * IMPORTANT: If the rendering context of the radial area generator is null,\n     * then the radial area is returned as a path data string.\n     *\n     * @param data Array of data elements.\n     */\n    (data: Iterable<Datum> | Datum[]): string | null;\n    /**\n     * Generates a radial area for the given array of data.\n     *\n     * IMPORTANT: If the radial area generator has been configured with a rendering context,\n     * then the radial area is rendered to this context as a sequence of path method calls and this function returns void.\n     *\n     * @param data Array of data elements.\n     */\n    (data: Iterable<Datum> | Datum[]): void;\n\n    /**\n     * Returns the current startAngle accessor. The default startAngle accessor is a function returning the first element of a\n     * two-element array of numbers.\n     */\n    angle(): (d: Datum, index: number, data: Datum[]) => number;\n    /**\n     * Sets startAngle to a constant number angle and endAngle to null and returns this radial area generator.\n     *\n     * Setting endAngle to null indicates that the previously-computed startAngle value should be reused for the endAngle value.\n     *\n     * @param angle A constant value in radians with 0 at -y (12 o’clock).\n     */\n    angle(angle: number): this;\n    /**\n     * Sets startAngle to the specified function angle and endAngle to null and returns this radial area generator.\n     *\n     * The default startAngle accessor assumes that the input data are two-element arrays of numbers and returns the first element.\n     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.\n     *\n     * @param angle An accessor function returning a value to be used for startAngle in radians with 0 at -y (12 o’clock).\n     * The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    angle(angle: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current startAngle accessor. The default startAngle accessor is a function returning the first element of a\n     * two-element array of numbers.\n     */\n    startAngle(): (d: Datum, index: number, data: Datum[]) => number;\n    /**\n     * Sets startAngle to a constant number and returns this radial area generator.\n     *\n     * @param angle A constant value in radians with 0 at -y (12 o’clock).\n     */\n    startAngle(angle: number): this;\n    /**\n     * Sets startAngle to the specified function and returns this radial area generator.\n     *\n     * The default startAngle accessor assumes that the input data are two-element arrays of numbers and returns the first element.\n     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.\n     *\n     * @param angle An accessor function returning a value to be used for startAngle in radians with 0 at -y (12 o’clock).\n     * The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    startAngle(angle: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current endAngle accessor, which defaults to null, indicating that the previously-computed startAngle value should be reused for the endAngle value.\n     */\n    endAngle(): ((d: Datum, index: number, data: Datum[]) => number) | null;\n    /**\n     * Equivalent to area.x1, except the accessor returns the angle in radians, with 0 at -y (12 o’clock).\n     * Note: typically angle is used instead of setting separate start and end angles.\n     */\n    endAngle(angle: null | number): this;\n    /**\n     * Sets endAngle to the specified function and returns this radial area generator.\n     *\n     * The default endAngle accessor is null, indicating that the previously-computed startAngle value should be reused for the endAngle value.\n     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.\n     *\n     * @param angle An accessor function returning a value to be used for endAngle in radians with 0 at -y (12 o’clock).\n     * The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    endAngle(angle: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current innerRadius accessor. The default innerRadius accessor is a function returning a constant value of zero.\n     */\n    radius(): (d: Datum, index: number, data: Datum[]) => number;\n    /**\n     * Sets innerRadius to a constant number radius and outerRadius to null and returns this radial area generator.\n     *\n     * Setting outerRadius to null indicates that the previously-computed innerRadius value should be reused for the outerRadius value.\n     *\n     * @param radius A constant value to be used for innerRadius.\n     */\n    radius(radius: number): this;\n    /**\n     * Sets innerRadius to the accessor function radius and outerRadius to null and returns this radial area generator.\n     *\n     * The default innerRadius accessor returns a constant value of zero.\n     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.\n     *\n     * @param radius An accessor function returning a value to be used for innerRadius. The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    radius(radius: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current innerRadius accessor. The default innerRadius accessor is a function a constant value of zero.\n     */\n    innerRadius(): (d: Datum, index: number, data: Datum[]) => number;\n    /**\n     * Sets innerRadius to a constant number and returns this radial area generator.\n     *\n     * @param radius A constant value.\n     */\n    innerRadius(radius: number): this;\n    /**\n     * Sets innerRadius to the specified function and returns this radial area generator.\n     *\n     * The default innerRadius accessor is a function which returns a constant value of zero.\n     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.\n     *\n     * @param radius An accessor function returning a value to be used for innerRadius. The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    innerRadius(radius: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current outerRadius accessor or null. The default outerRadius accessor is a function returning the second element of a\n     * two-element array of numbers.\n     *\n     * If the outerRadius accessor is null, the previously-computed innerRadius value is reused for the outerRadius value.\n     */\n    outerRadius(): ((d: Datum, index: number, data: Datum[]) => number) | null;\n    /**\n     * Equivalent to area.y1, except the accessor returns the radius: the distance from the origin ⟨0,0⟩.\n     */\n    outerRadius(radius: null | number): this;\n    /**\n     * Sets outerRadius to the specified function and returns this radial area generator.\n     *\n     * The default outerRadius accessor assumes that the input data are two-element arrays of numbers and returns the second element.\n     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.\n     *\n     * @param radius An accessor function returning a value to be used for outerRadius. The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    outerRadius(radius: (d: Datum, index: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current defined accessor, which defaults to a function returning a constant boolean value of true.\n     */\n    defined(): (d: Datum, index: number, data: Datum[]) => boolean;\n    /**\n     * Sets the defined accessor to the specified boolean and returns this radial area generator.\n     *\n     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.\n     *\n     * When a radial area is generated, the defined accessor will be invoked for each element in the input data array, being passed the element d, the index i, and the array data as three arguments.\n     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),\n     * the startAngle, endAngle, innerRadius and outerRadius accessors will subsequently be evaluated and the point will be added to the current area segment.\n     *\n     * Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point.\n     * As a result, the generated area may have several discrete segments.\n     *\n     * Note that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.\n     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.\n     *\n     * @param defined A boolean constant.\n     */\n    defined(defined: boolean): this;\n    /**\n     * Sets the defined accessor to the specified function and returns this radial area generator.\n     *\n     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.\n     *\n     * When a radial area is generated, the defined accessor will be invoked for each element in the input data array, being passed the element d, the index i, and the array data as three arguments.\n     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),\n     * the startAngle, endAngle, innerRadius and outerRadius accessors will subsequently be evaluated and the point will be added to the current area segment.\n     *\n     * Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point.\n     * As a result, the generated area may have several discrete segments.\n     *\n     * Note that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.\n     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.\n     *\n     * @param defined An accessor function which returns a boolean value. The accessor will be invoked for each defined element in the input data array,\n     * being passed the element d, the index i, and the array data as three arguments.\n     */\n    defined(defined: (d: Datum, index: number, data: Datum[]) => boolean): this;\n\n    /**\n     * Returns the current curve factory, which defaults to curveLinear.\n     */\n    curve(): CurveFactory;\n    /**\n     * Returns the current curve factory, which defaults to curveLinear.\n     *\n     * The generic allows to cast the curve factory to a specific type, if known.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    curve<C extends CurveFactory>(): C;\n    /**\n     * Sets the curve factory and returns this radial area generator.\n     *\n     * Note that curveMonotoneX or curveMonotoneY are not recommended for radial areas because they assume that the data is monotonic in x or y, which is typically untrue of radial areas.\n     *\n     * @param curve A valid curve factory.\n     */\n    curve(curve: CurveFactory): this;\n\n    /**\n     * Returns the current rendering context, which defaults to null.\n     */\n    context(): CanvasRenderingContext2D | null;\n    /**\n     * Equivalent to line.context.\n     */\n    context(context: CanvasRenderingContext2D | null): this;\n\n    /**\n     * Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context.\n     * The line’s angle accessor is this area’s start angle accessor, and the line’s radius accessor is this area’s inner radius accessor.\n     */\n    lineStartAngle(): LineRadial<Datum>;\n\n    /**\n     * Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context.\n     * The line’s angle accessor is this area’s start angle accessor, and the line’s radius accessor is this area’s inner radius accessor.\n     */\n    lineInnerRadius(): LineRadial<Datum>;\n\n    /**\n     * Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context.\n     * The line’s angle accessor is this area’s end angle accessor, and the line’s radius accessor is this area’s inner radius accessor.\n     */\n    lineEndAngle(): LineRadial<Datum>;\n\n    /**\n     * Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context.\n     * The line’s angle accessor is this area’s start angle accessor, and the line’s radius accessor is this area’s outer radius accessor.\n     */\n    lineOuterRadius(): LineRadial<Datum>;\n}\n\n/**\n * Constructs a new radial area generator with the default settings.\n *\n * Ensure that the accessors used with the area generator correspond to the arguments passed into them,\n * or set them to constants as appropriate.\n */\nexport function areaRadial(): AreaRadial<[number, number]>;\n/**\n * Constructs a new radial area generator with the default settings.\n *\n * Ensure that the accessors used with the area generator correspond to the arguments passed into them,\n * or set them to constants as appropriate.\n *\n * The generic refers to the data type of an element in the input array passed into the radial area generator.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function areaRadial<Datum>(): AreaRadial<Datum>;\n\n/**\n * @deprecated Use AreaRadial interface\n */\nexport type RadialArea<Datum> = AreaRadial<Datum>;\n\n/**\n * @deprecated Use areaRadial()\n */\nexport function radialArea(): RadialArea<[number, number]>;\n/**\n * @deprecated Use areaRadial<Datum>()\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function radialArea<Datum>(): RadialArea<Datum>;\n\n// -----------------------------------------------------------------------------------\n// Curve Factories\n// -----------------------------------------------------------------------------------\n\n/**\n * A minimal interface for a curve generator which supports only the rendering of lines.\n * Methods for related to the rendering of areas are not implemented in this minimal interface.\n *\n * While lines are defined as a sequence of two-dimensional [x, y] points,\n * there remains the task of transforming this discrete representation into a continuous shape: i.e., how to interpolate between the points.\n * A curve generator serves this purpose.\n *\n * Curves are typically not constructed or used directly, instead being passed to line.curve.\n */\nexport interface CurveGeneratorLineOnly {\n    /**\n     * Indicates the start of a new line segment. Zero or more points will follow.\n     */\n    lineStart(): void;\n    /**\n     * Indicates the end of the current line segment.\n     */\n    lineEnd(): void;\n    /**\n     * Indicates a new point in the current line segment with the given x- and y-values.\n     */\n    point(x: number, y: number): void;\n}\n\n/**\n * A factory for curve generators addressing only lines, but not areas.\n */\nexport type CurveFactoryLineOnly =\n    /**\n     * Returns a \"lines only\" curve generator which renders to the specified context.\n     *\n     * @param context A rendering context.\n     */\n    (context: CanvasRenderingContext2D | Path) => CurveGeneratorLineOnly;\n\n/**\n * A minimal interface for a curve generator which supports the rendering of lines and areas.\n *\n * While lines are defined as a sequence of two-dimensional [x, y] points,\n * and areas are similarly defined by a topline and a baseline,\n * there remains the task of transforming this discrete representation into a continuous shape: i.e., how to interpolate between the points.\n * A curve generator serves this purpose.\n *\n * Curves are typically not constructed or used directly, instead being passed to line.curve and area.curve.\n */\nexport interface CurveGenerator extends CurveGeneratorLineOnly {\n    /**\n     * Indicates the start of a new area segment.\n     * Each area segment consists of exactly two line segments: the topline, followed by the baseline, with the baseline points in reverse order.\n     */\n    areaStart(): void;\n    /**\n     * Indicates the end of the current area segment.\n     */\n    areaEnd(): void;\n}\n\n/**\n * A factory for curve generators addressing both lines and areas.\n */\nexport type CurveFactory =\n    /**\n     * Returns a curve generator which renders to the specified context.\n     *\n     * @param context A rendering context.\n     */\n    (context: CanvasRenderingContext2D | Path) => CurveGenerator;\n\n/**\n * A curve factory for cubic basis spline generators.\n *\n * The curve generators produce a cubic basis spline using the specified control points.\n * The first and last points are triplicated such that the spline starts at the first point and ends at the last point,\n * and is tangent to the line between the first and second points, and to the line between the penultimate and last points.\n */\nexport const curveBasis: CurveFactory;\n\n/**\n * A curve factory for closed cubic basis spline generators.\n *\n * The curve generators produce a closed cubic basis spline using the specified control points.\n * When a line segment ends, the first three control points are repeated, producing a closed loop with C2 continuity.\n */\nexport const curveBasisClosed: CurveFactory;\n\n/**\n * A curve factory for open cubic basis spline generators.\n *\n * The curve generators produce a cubic basis spline using the specified control points.\n * Unlike basis, the first and last points are not repeated, and thus the curve typically does not intersect these points.\n */\nexport const curveBasisOpen: CurveFactory;\n\n/**\n * Produces a Bézier curve between each pair of points, with horizontal tangents at each point.\n */\nexport const curveBumpX: CurveFactory;\n\n/**\n * Produces a Bézier curve between each pair of points, with vertical tangents at each point.\n */\nexport const curveBumpY: CurveFactory;\n\n/**\n * A curve factory for straightened cubic basis spline generators.\n *\n * The curve generators produce a straightened cubic basis spline using the specified control points,\n * with the spline straightened according to the curve’s beta, which defaults to 0.85.\n * This curve is typically used in hierarchical edge bundling to disambiguate connections,\n * as proposed by Danny Holten in Hierarchical Edge Bundles: Visualization of Adjacency Relations in Hierarchical Data.\n *\n * This curve does not implement curve.areaStart and curve.areaEnd; it is intended to work with d3.line, not d3.area.\n */\nexport interface CurveBundleFactory extends CurveFactoryLineOnly {\n    /**\n     * Returns a bundle curve factory with the specified beta in the range [0, 1], representing the bundle strength.\n     * If beta equals zero, a straight line between the first and last point is produced; if beta equals one,\n     * a standard basis spline is produced.\n     *\n     * @param beta A constant value in the [0, 1] interval.\n     */\n    beta(beta: number): this;\n}\n\n/**\n * A curve factory for straightened cubic basis spline generators.\n *\n * The curve generators produce a straightened cubic basis spline using the specified control points,\n * with the spline straightened according to the curve’s beta, which defaults to 0.85.\n * This curve is typically used in hierarchical edge bundling to disambiguate connections,\n * as proposed by Danny Holten in Hierarchical Edge Bundles: Visualization of Adjacency Relations in Hierarchical Data.\n *\n * This curve does not implement curve.areaStart and curve.areaEnd; it is intended to work with d3.line, not d3.area.\n */\nexport const curveBundle: CurveBundleFactory;\n\n/**\n * A curve factory for cubic cardinal spline generators.\n */\nexport interface CurveCardinalFactory extends CurveFactory {\n    /**\n     * Returns a cardinal curve factory with the specified tension in the range [0, 1].\n     * The tension determines the length of the tangents: a tension of one yields all zero tangents, equivalent to curveLinear; a tension of zero produces a uniform Catmull–Rom spline.\n     *\n     * @param tension A constant in the [0, 1] interval.\n     */\n    tension(tension: number): this;\n}\n\n/**\n * A curve factory for cubic cardinal spline generators.\n *\n * The curve generators produce a cubic cardinal spline using the specified control points, with one-sided differences used for the first and last piece.\n * The default tension is 0.\n */\nexport const curveCardinal: CurveCardinalFactory;\n\n/**\n * A curve factory for closed cubic cardinal spline generators.\n *\n * The curve generators produce closed cubic cardinal spline using the specified control points.\n * When a line segment ends, the first three control points are repeated, producing a closed loop.\n * The default tension is 0.\n */\nexport const curveCardinalClosed: CurveCardinalFactory;\n\n/**\n * A curve factory for open cubic cardinal spline generators.\n *\n * The curve generators produce a cubic cardinal spline using the specified control points.\n * Unlike curveCardinal, one-sided differences are not used for the first and last piece,\n * and thus the curve starts at the second point and ends at the penultimate point.\n * The default tension is 0.\n */\nexport const curveCardinalOpen: CurveCardinalFactory;\n\n/**\n * A curve factory for cubic Catmull–Rom spline generators.\n */\nexport interface CurveCatmullRomFactory extends CurveFactory {\n    /**\n     * Returns a cubic Catmull–Rom curve factory with the specified alpha in the range [0, 1].\n     * If alpha is zero, produces a uniform spline, equivalent to curveCardinal with a tension of zero;\n     * if alpha is one, produces a chordal spline; if alpha is 0.5, produces a centripetal spline.\n     * Centripetal splines are recommended to avoid self-intersections and overshoot.\n     *\n     * @param alpha A constant in the [0, 1] interval.\n     */\n    alpha(alpha: number): this;\n}\n\n/**\n * A curve factory for cubic Catmull–Rom spline generators.\n *\n * The curve generators produce a cubic Catmull–Rom spline using the specified control points and the parameter alpha,\n * which defaults to 0.5, as proposed by Yuksel et al. in On the Parameterization of Catmull–Rom Curves,\n * with one-sided differences used for the first and last piece.\n */\nexport const curveCatmullRom: CurveCatmullRomFactory;\n\n/**\n * A curve factory for cubic Catmull–Rom spline generators.\n *\n * The curve generators produce a closed cubic Catmull–Rom spline using the specified control points and the parameter alpha,\n * which defaults to 0.5, as proposed by Yuksel et al. When a line segment ends,\n * the first three control points are repeated, producing a closed loop.\n */\nexport const curveCatmullRomClosed: CurveCatmullRomFactory;\n\n/**\n * A curve factory for cubic Catmull–Rom spline generators.\n *\n * The curve generators produce a cubic Catmull–Rom spline using the specified control points and the parameter alpha,\n * which defaults to 0.5, as proposed by Yuksel et al. Unlike curveCatmullRom, one-sided differences are not used for the first and last piece,\n * and thus the curve starts at the second point and ends at the penultimate point.\n */\nexport const curveCatmullRomOpen: CurveCatmullRomFactory;\n\n/**\n * A curve factory for polyline generators.\n *\n * The curve generators produce a polyline through the specified points.\n */\nexport const curveLinear: CurveFactory;\n\n/**\n * A curve factory for closed polyline generators.\n *\n * The curve generators produce a closed polyline through the specified points by repeating the first point when the line segment ends.\n */\nexport const curveLinearClosed: CurveFactory;\n\n/**\n * A curve factory for cubic spline generators preserving monotonicity in y.\n *\n * The curve generators produce a cubic spline that preserves monotonicity in y, assuming monotonicity in x, as proposed by Steffen in A simple method for monotonic interpolation in one dimension:\n * “a smooth curve with continuous first-order derivatives that passes through any given set of data points without spurious oscillations.\n * Local extrema can occur only at grid points where they are given by the data, but not in between two adjacent grid points.”\n */\nexport const curveMonotoneX: CurveFactory;\n\n/**\n * A curve factory for cubic spline generators preserving monotonicity in x.\n *\n * The curve generators produce a cubic spline that preserves monotonicity in x, assuming monotonicity in y, as proposed by Steffen in A simple method for monotonic interpolation in one dimension:\n * “a smooth curve with continuous first-order derivatives that passes through any given set of data points without spurious oscillations.\n * Local extrema can occur only at grid points where they are given by the data, but not in between two adjacent grid points.”\n */\nexport const curveMonotoneY: CurveFactory;\n\n/**\n * A curve factory for natural cubic spline generators.\n *\n * The curve generators produce a natural cubic spline with the second derivative of the spline set to zero at the endpoints.\n */\nexport const curveNatural: CurveFactory;\n\n/**\n * A curve factory for step function (midpoint) generators.\n *\n * The curve generators produce a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines.\n * The y-value changes at the midpoint of each pair of adjacent x-values.\n */\nexport const curveStep: CurveFactory;\n\n/**\n * A curve factory for step function (after) generators.\n *\n * The curve generators produce a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines.\n * The y-value changes after the x-value.\n */\nexport const curveStepAfter: CurveFactory;\n\n/**\n * A curve factory for step function (before) generators.\n *\n * The curve generators produce a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines.\n * The y-value changes before the x-value.\n */\nexport const curveStepBefore: CurveFactory;\n\n// -----------------------------------------------------------------------------------\n// LINKS\n// -----------------------------------------------------------------------------------\n\n/**\n * An interface describing the default Link Data structure expected\n * by the Link and LinkRadial generators.\n */\nexport interface DefaultLinkObject {\n    /**\n     * Source node of the link.\n     *\n     * For a link in a Cartesian coordinate system, the two element array contains\n     * the coordinates [x, y].\n     *\n     * For a radial link, the two element array contains\n     * the coordinates [angle, radius]. The angle is stated in radians, with 0 at -y (12 o’clock).\n     * The radius measures the distance from the origin ⟨0,0⟩.\n     */\n    source: [number, number];\n    /**\n     * Target node of the link.\n     *\n     * For a link in a Cartesian coordinate system, the two element array contains\n     * the coordinates [x, y].\n     *\n     * For a radial link, the two element array contains\n     * the coordinates [angle, radius]. The angle is stated in radians, with 0 at -y (12 o’clock).\n     * The radius measures the distance from the origin ⟨0,0⟩.\n     */\n    target: [number, number];\n}\n\n/**\n * A link generator for a Cartesian coordinate system. The link shape generates a smooth cubic Bézier curve from a\n * source point to a target point. The tangents of the curve at the start and end are either vertical, horizontal.\n *\n * The first generic corresponds to the type of the \"this\" context within which the link generator and its accessor functions will be invoked.\n *\n * The second generic corresponds to the datum type of the link object for which the link is to be generated.\n *\n * The third generic corresponds to the datum type of the source/target node contained in the link object.\n */\nexport interface Link<This, LinkDatum, NodeDatum> {\n    /**\n     * Generates a link for the given arguments.\n     *\n     * IMPORTANT: If the rendering context of the link generator is null,\n     * then the link is returned as a path data string.\n     *\n     * The \"this\" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.\n     * All arguments passed into this function, will be passed to the accessor functions of the generator.\n     *\n     * @param d The datum for which the link is to be generated.\n     */\n    (this: This, d: LinkDatum, ...args: any[]): string | null;\n    /**\n     * Generates an link for the given arguments.\n     *\n     * IMPORTANT: If the link generator has been configured with a rendering context,\n     * then the link is rendered to this context as a sequence of path method calls and this function returns void.\n     *\n     * The \"this\" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.\n     * All arguments passed into this function, will be passed to the accessor functions of the generator.\n     *\n     * @param d The datum for which the link is to be generated.\n     */\n    (this: This, d: LinkDatum, ...args: any[]): void;\n\n    /**\n     * Returns the current source node accessor function.\n     * The default source accessor function returns a two element array [x, y].\n     */\n    source(): (this: This, d: LinkDatum, ...args: any[]) => NodeDatum;\n    /**\n     * Sets the source accessor to the specified function and returns this link generator.\n     *\n     * @param source Source node accessor function. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that were passed into the link generator. The default target accessor function returns a two element array [x, y].\n     */\n    source(source: (this: This, d: LinkDatum, ...args: any[]) => NodeDatum): this;\n\n    /**\n     * Returns the current target node accessor function.\n     * The default target accessor function returns a two element array [x, y].\n     */\n    target(): (this: This, d: LinkDatum, ...args: any[]) => NodeDatum;\n    /**\n     * Sets the target accessor to the specified function and returns this link generator.\n     *\n     * @param target Target node accessor function. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that were passed into the link generator. The default target accessor function returns a two element array [x, y].\n     */\n    target(target: (this: This, d: LinkDatum, ...args: any[]) => NodeDatum): this;\n\n    /**\n     * Returns the current x-accessor, which defaults to a function accepting an number array\n     * as its argument an returning the first element of the array.\n     */\n    x(): (this: This, node: NodeDatum, ...args: any[]) => number;\n    /**\n     * Sets the x-accessor to the specified function and returns this link generator.\n     *\n     * @param x x-coordinate accessor function. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives as its first argument a node object followed by all additional arguments that were passed into the link generator.\n     */\n    x(x: (this: This, node: NodeDatum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current y-accessor, which defaults to a function accepting an number array\n     * as its argument an returning the second element of the array.\n     */\n    y(): (this: This, node: NodeDatum, ...args: any[]) => number;\n    /**\n     * Sets the y-accessor to the specified function and returns this link generator.\n     *\n     * @param y y-coordinate accessor function. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives as its first argument a node object followed by all additional arguments that were passed into the link generator.\n     */\n    y(y: (this: This, node: NodeDatum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current rendering context, which defaults to null.\n     */\n    context(): CanvasRenderingContext2D | null;\n    /**\n     * Sets the context and returns this link generator.\n     */\n    context(context: CanvasRenderingContext2D | null): this;\n}\n\n/**\n * Returns a new link generator using the specified curve. For example, to visualize links in a tree diagram rooted on the top edge of the display\n *\n * With the default settings the link generator accepts a link object conforming to the DefaultLinkObject interface.\n */\nexport function link(curve: CurveFactory): Link<any, DefaultLinkObject, [number, number]>;\n/**\n * Returns a new link generator using the specified curve. For example, to visualize links in a tree diagram rooted on the top edge of the display\n *\n * Important: Ensure that the accessor functions are configured to work with the link and node datum types\n * specified in the generics.\n *\n * The first generic corresponds to the datum type of the link object for which the link is to be generated.\n *\n * The second generic corresponds to the datum type of the source/target node contained in the link object.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function link<LinkDatum, NodeDatum>(curve: CurveFactory): Link<any, LinkDatum, NodeDatum>;\n/**\n * Returns a new link generator using the specified curve. For example, to visualize links in a tree diagram rooted on the top edge of the display\n *\n * Important: Ensure that the accessor functions are configured to work with the link and node datum types\n * specified in the generics.\n *\n * The first generic corresponds to the type of the \"this\" context within which the link generator and its accessor functions will be invoked.\n *\n * The second generic corresponds to the datum type of the link object for which the link is to be generated.\n *\n * The third generic corresponds to the datum type of the source/target node contained in the link object.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function link<This, LinkDatum, NodeDatum>(curve: CurveFactory): Link<This, LinkDatum, NodeDatum>;\n\n/**\n * Shorthand for d3.link with d3.curveBumpX; suitable for visualizing links in a tree diagram rooted on the left edge of the display.\n *\n * With the default settings the link generator accepts a link object conforming to the DefaultLinkObject interface.\n */\nexport function linkHorizontal(): Link<any, DefaultLinkObject, [number, number]>;\n/**\n * Shorthand for d3.link with d3.curveBumpX; suitable for visualizing links in a tree diagram rooted on the left edge of the display.\n *\n * Important: Ensure that the accessor functions are configured to work with the link and node datum types\n * specified in the generics.\n *\n * The first generic corresponds to the datum type of the link object for which the link is to be generated.\n *\n * The second generic corresponds to the datum type of the source/target node contained in the link object.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function linkHorizontal<LinkDatum, NodeDatum>(): Link<any, LinkDatum, NodeDatum>;\n/**\n * Shorthand for d3.link with d3.curveBumpX; suitable for visualizing links in a tree diagram rooted on the left edge of the display.\n *\n * Important: Ensure that the accessor functions are configured to work with the link and node datum types\n * specified in the generics.\n *\n * The first generic corresponds to the type of the \"this\" context within which the link generator and its accessor functions will be invoked.\n *\n * The second generic corresponds to the datum type of the link object for which the link is to be generated.\n *\n * The third generic corresponds to the datum type of the source/target node contained in the link object.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function linkHorizontal<This, LinkDatum, NodeDatum>(): Link<This, LinkDatum, NodeDatum>;\n\n/**\n * Shorthand for d3.link with d3.curveBumpX; suitable for visualizing links in a tree diagram rooted on the left edge of the display.\n *\n * With the default settings the link generator accepts a link object conforming to the DefaultLinkObject interface.\n */\nexport function linkVertical(): Link<any, DefaultLinkObject, [number, number]>;\n/**\n * Shorthand for d3.link with d3.curveBumpY; suitable for visualizing links in a tree diagram rooted on the top edge of the display.\n *\n * Important: Ensure that the accessor functions are configured to work with the link and node datum types\n * specified in the generics.\n *\n * The first generic corresponds to the datum type of the link object for which the link is to be generated.\n *\n * The second generic corresponds to the datum type of the source/target node contained in the link object.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function linkVertical<LinkDatum, NodeDatum>(): Link<any, LinkDatum, NodeDatum>;\n/**\n * Shorthand for d3.link with d3.curveBumpY; suitable for visualizing links in a tree diagram rooted on the top edge of the display.\n *\n * Important: Ensure that the accessor functions are configured to work with the link and node datum types\n * specified in the generics.\n *\n * The first generic corresponds to the type of the \"this\" context within which the link generator and its accessor functions will be invoked.\n *\n * The second generic corresponds to the datum type of the link object for which the link is to be generated.\n *\n * The third generic corresponds to the datum type of the source/target node contained in the link object.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function linkVertical<This, LinkDatum, NodeDatum>(): Link<This, LinkDatum, NodeDatum>;\n\n/**\n * Shorthand for d3.link with d3.curveBumpY; suitable for visualizing links in a tree diagram rooted on the top edge of the display.\n *\n * The first generic corresponds to the type of the \"this\" context within which the radial link generator and its accessor functions will be invoked.\n *\n * The second generic corresponds to the datum type of the link object for which the link is to be generated.\n *\n * The third generic corresponds to the datum type of the source/target node contained in the link object.\n */\nexport interface LinkRadial<This, LinkDatum, NodeDatum> {\n    /**\n     * Generates a radial link for the given arguments.\n     *\n     * IMPORTANT: If the rendering context of the radial link generator is null,\n     * then the link is returned as a path data string.\n     *\n     * The \"this\" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.\n     * All arguments passed into this function, will be passed to the accessor functions of the generator.\n     *\n     * @param d The datum for which the link is to be generated.\n     */\n    (this: This, d: LinkDatum, ...args: any[]): string | null;\n    /**\n     * Generates an link for the given arguments.\n     *\n     * IMPORTANT: If the radial link generator has been configured with a rendering context,\n     * then the link is rendered to this context as a sequence of path method calls and this function returns void.\n     *\n     * The \"this\" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.\n     * All arguments passed into this function, will be passed to the accessor functions of the generator.\n     *\n     * @param d The datum for which the link is to be generated.\n     */\n    (this: This, d: LinkDatum, ...args: any[]): void;\n\n    /**\n     * Returns the current source node accessor function.\n     * The default source accessor function returns a two element array [x, y].\n     */\n    source(): (this: This, d: LinkDatum, ...args: any[]) => NodeDatum;\n    /**\n     * Sets the source accessor to the specified function and returns this radial link generator.\n     *\n     * @param source Source node accessor function. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that were passed into the radial link generator. The default target accessor function returns a two element array [x, y].\n     */\n    source(source: (this: This, d: LinkDatum, ...args: any[]) => NodeDatum): this;\n\n    /**\n     * Returns the current target node accessor function.\n     * The default target accessor function returns a two element array [x, y].\n     */\n    target(): (this: This, d: LinkDatum, ...args: any[]) => NodeDatum;\n    /**\n     * Sets the target accessor to the specified function and returns this radial link generator.\n     *\n     * @param target Target node accessor function. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that were passed into the radial link generator. The default target accessor function returns a two element array [x, y].\n     */\n    target(target: (this: This, d: LinkDatum, ...args: any[]) => NodeDatum): this;\n\n    /**\n     * Returns the current angle accessor, which defaults to a function accepting an number array\n     * as its argument an returning the first element of the array.\n     */\n    angle(): (this: This, node: NodeDatum, ...args: any[]) => number;\n    /**\n     * Sets the angle accessor to the specified function and returns this radial link generator.\n     * The angle is stated in radians, with 0 at -y (12 o’clock).\n     *\n     * @param angle Angle accessor function. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives as its first argument a node object followed by all additional arguments that were passed into the radial link generator.\n     */\n    angle(angle: (this: This, node: NodeDatum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current radius accessor, which defaults to a function accepting an number array\n     * as its argument an returning the second element of the array.\n     */\n    radius(): (this: This, node: NodeDatum, ...args: any[]) => number;\n    /**\n     * Sets the radius accessor to the specified function and returns this radial link generator.\n     * The radius is measured as the distance from the origin ⟨0,0⟩.\n     *\n     * @param radius Radius accessor function. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives as its first argument a node object followed by all additional arguments that were passed into the radial link generator.\n     */\n    radius(radius: (this: This, node: NodeDatum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current rendering context, which defaults to null.\n     */\n    context(): CanvasRenderingContext2D | null;\n    /**\n     * Sets the context and returns this link generator.\n     */\n    context(context: CanvasRenderingContext2D | null): this;\n}\n\n/**\n * @deprecated Use LinkRadial interface\n */\nexport type RadialLink<This, LinkDatum, NodeDatum> = LinkRadial<This, LinkDatum, NodeDatum>;\n\n/**\n * Constructs a new default link generator with radial tangents, for example, to visualize links in a tree diagram\n * rooted in the center of the display.\n *\n * With the default settings the link generator accepts a link object conforming to the DefaultLinkObject interface.\n */\nexport function linkRadial(): LinkRadial<any, DefaultLinkObject, [number, number]>;\n/**\n * Constructs a new link generator with radial tangents, for example, to visualize links in a tree diagram\n * rooted in the center of the display.\n *\n * Important: Ensure that the accessor functions are configured to work with the link and node datum types\n * specified in the generics.\n *\n * The first generic corresponds to the datum type of the link object for which the link is to be generated.\n *\n * The second generic corresponds to the datum type of the source/target node contained in the link object.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function linkRadial<LinkDatum, NodeDatum>(): LinkRadial<any, LinkDatum, NodeDatum>;\n/**\n * Constructs a new link generator with radial tangents, for example, to visualize links in a tree diagram\n * rooted in the center of the display.\n *\n * Important: Ensure that the accessor functions are configured to work with the link and node datum types\n * specified in the generics.\n *\n * The first generic corresponds to the type of the \"this\" context within which the link generator and its accessor functions will be invoked.\n *\n * The second generic corresponds to the datum type of the link object for which the link is to be generated.\n *\n * The third generic corresponds to the datum type of the source/target node contained in the link object.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function linkRadial<This, LinkDatum, NodeDatum>(): LinkRadial<This, LinkDatum, NodeDatum>;\n\n// -----------------------------------------------------------------------------------\n// SYMBOLS\n// -----------------------------------------------------------------------------------\n\n/**\n * A Symbol Type.\n *\n * Symbol types are typically not used directly, instead being passed to symbol.type.\n * However, you can define your own symbol type implementation should none of the built-in types satisfy your needs using the following interface.\n * You can also use this low-level interface with a built-in symbol type as an alternative to the symbol generator.\n */\nexport interface SymbolType {\n    /**\n     * Renders this symbol type to the specified context with the specified size in square pixels. The context implements the CanvasPath interface.\n     * (Note that this is a subset of the CanvasRenderingContext2D interface!)\n     *\n     * @param context A rendering context implementing CanvasPath.\n     * @param size Size of the symbol to draw.\n     */\n    draw(context: CanvasPath_D3Shape, size: number): void;\n}\n\n/**\n * A symbol generator.\n *\n * Symbols provide a categorical shape encoding as is commonly used in scatterplots. Symbols are always centered at ⟨0,0⟩;\n * use a transform (see: SVG, Canvas) to move the arc to a different position.\n *\n * The first generic corresponds to the \"this\" context within which the symbol generator is invoked.\n * The second generic corresponds to the data type of the datum underlying the symbol.\n */\nexport interface Symbol<This, Datum> {\n    /**\n     * Generates a symbol for the given arguments.\n     *\n     * IMPORTANT: If the rendering context of the symbol generator is null,\n     * then the symbol is returned as a path data string.\n     *\n     * The \"this\" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.\n     * All arguments passed into this function, will be passed to the accessor functions of the generator.\n     *\n     * For example, with the default settings, no arguments are needed to produce a circle with area 64 square pixels.\n     *\n     * @param d The datum for which the symbol is to be generated.\n     */\n    (this: This, d?: Datum, ...args: any[]): string | null;\n    /**\n     * Generates an symbol for the given arguments.\n     *\n     * IMPORTANT: If the symbol generator has been configured with a rendering context,\n     * then the symbol is rendered to this context as a sequence of path method calls and this function returns void.\n     *\n     * The \"this\" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.\n     * All arguments passed into this function, will be passed to the accessor functions of the generator.\n     *\n     * For example, with the default settings, no arguments are needed to produce a circle with area 64 square pixels.\n     *\n     * @param d The datum for which the symbol is to be generated.\n     */\n    (this: This, d?: Datum, ...args: any[]): void;\n    /**\n     * Returns the current size accessor, which defaults to a function returning a constant value of 64.\n     */\n    size(): (this: This, d: Datum, ...args: any[]) => number;\n    /**\n     * Sets the size to the specified number and returns this symbol generator.\n     *\n     * @param size A fixed size (area in square pixels).\n     */\n    size(size: number): this;\n    /**\n     * Sets the size to the specified function and returns this symbol generator.\n     *\n     * Specifying the size as a function is useful for constructing a scatterplot with a size encoding.\n     * If you wish to scale the symbol to fit a given bounding box, rather than by area, try SVG’s getBBox.\n     *\n     * @param size An accessor function returning a number to be used as a symbol size. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that were passed into the symbol generator.\n     */\n    size(size: (this: This, d: Datum, ...args: any[]) => number): this;\n\n    /**\n     * Returns the current symbol type accessor, which defaults to a function returning the circle symbol type.\n     */\n    type(): (this: This, d: Datum, ...args: any[]) => SymbolType;\n    /**\n     * Sets the symbol type to the specified symbol type and returns this symbol generator.\n     *\n     * @param type A constant symbol type.\n     */\n    type(type: SymbolType): this;\n    /**\n     * Sets the symbol type to the specified function and returns this symbol generator.\n     *\n     * @param type An accessor function returning a symbol type. The accessor function is invoked in the same \"this\" context as the generator was invoked in and\n     * receives the same arguments that were passed into the symbol generator. See symbols for the set of built-in symbol types.\n     * To implement a custom symbol type, return an object that implements symbolType.draw.\n     */\n    type(type: (this: This, d: Datum, ...args: any[]) => SymbolType): this;\n\n    /**\n     * Returns the current rendering context, which defaults to null.\n     */\n    context(): CanvasRenderingContext2D | null;\n    /**\n     * Sets the context and returns this symbol generator.\n     */\n    context(context: CanvasRenderingContext2D | null): this;\n}\n\n/**\n * Constructs a new symbol generator of the specified type and size.\n * If not specified, type defaults to a circle, and size defaults to 64.\n *\n * The first generic corresponds to the \"this\" context within which the symbol generator is invoked.\n * The second generic corresponds to the data type of the datum underlying the symbol.\n *\n * @param type The specified type.\n * @param size The specified size.\n */\nexport function symbol<Datum = any>(\n    type?: SymbolType | ((this: any, d: Datum, ...args: any[]) => SymbolType),\n    size?: number | ((this: any, d: Datum, ...args: any[]) => number),\n): Symbol<any, Datum>;\n\n/**\n * Constructs a new symbol generator of the specified type and size.\n * If not specified, type defaults to a circle, and size defaults to 64.\n *\n * The first generic corresponds to the \"this\" context within which the symbol generator is invoked.\n * The second generic corresponds to the data type of the datum underlying the symbol.\n *\n * @param type The specified type.\n * @param size The specified size.\n */\nexport function symbol<This, Datum>(\n    type?: SymbolType | ((this: This, d: Datum, ...args: any[]) => SymbolType),\n    size?: number | ((this: This, d: Datum, ...args: any[]) => number),\n): Symbol<This, Datum>;\n\n/**\n * An array containing a set of symbol types designed for filling: circle, cross, diamond, square, star, triangle, and wye.\n * Useful for constructing the range of an ordinal scale should you wish to use a shape encoding for categorical data.\n */\nexport const symbolsFill: SymbolType[];\n\n/**\n * An array containing a set of symbol types designed for stroking: circle, plus, x, triangle2, asterisk, square2, and diamond2.\n * Useful for constructing the range of an ordinal scale should you wish to use a shape encoding for categorical data.\n */\nexport const symbolsStroke: SymbolType[];\n\n/**\n * @deprecated Use symbolsFill\n */\nexport const symbols: SymbolType[];\n\n/**\n * The asterisk symbol type; intended for stroking.\n */\nexport const symbolAsterisk: SymbolType;\n\n/**\n * The circle symbol type; intended for either filling or stroking.\n */\nexport const symbolCircle: SymbolType;\n\n/**\n * The Greek cross symbol type, with arms of equal length; intended for filling.\n */\nexport const symbolCross: SymbolType;\n\n/**\n * The rhombus symbol type; intended for filling.\n */\nexport const symbolDiamond: SymbolType;\n\n/**\n * The rotated square symbol type; intended for stroking.\n */\nexport const symbolDiamond2: SymbolType;\n\n/**\n * The plus symbol type; intended for stroking.\n */\nexport const symbolPlus: SymbolType;\n\n/**\n * The square symbol type; intended for filling.\n */\nexport const symbolSquare: SymbolType;\n\n/**\n * The square2 symbol type; intended for stroking.\n */\nexport const symbolSquare2: SymbolType;\n\n/**\n * The pentagonal star (pentagram) symbol type; intended for filling.\n */\nexport const symbolStar: SymbolType;\n\n/**\n * The up-pointing triangle symbol type; intended for filling.\n */\nexport const symbolTriangle: SymbolType;\n\n/**\n * The up-pointing triangle symbol type; intended for stroking.\n */\nexport const symbolTriangle2: SymbolType;\n\n/**\n * The Y-shape symbol type; intended for filling.\n */\nexport const symbolWye: SymbolType;\n\n/**\n * The X-shape symbol type; intended for stroking.\n */\nexport const symbolX: SymbolType;\n\n/**\n * The X-shape symbol type; intended for stroking.\n */\nexport const symbolTimes: SymbolType;\n\n// -----------------------------------------------------------------------------------\n// pointRadial\n// -----------------------------------------------------------------------------------\n\n/**\n * Returns the point [x, y] for the given angle and the given radius.\n * @param angle Angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.\n * @param radius Radius.\n */\nexport function pointRadial(angle: number, radius: number): [number, number];\n\n// -----------------------------------------------------------------------------------\n// STACKS\n// -----------------------------------------------------------------------------------\n\n/**\n * Each series point j in a stack chart corresponds to the jth element in the input data.\n * Each point is represented as an array [y0, y1] where y0 is the lower value (baseline) and y1 is the upper value (topline);\n * the difference between y0 and y1 corresponds to the computed value for this point.\n *\n * SeriesPoint is a [number, number] two-element Array with added data and index properties\n * related to the data element which formed the basis for theSeriesPoint.\n */\nexport interface SeriesPoint<Datum> extends Array<number> {\n    /**\n     * Corresponds to y0, the lower value (baseline).\n     */\n    0: number;\n    /**\n     * Corresponds to y1, the upper value (topline).\n     */\n    1: number;\n    /**\n     * The data element underlying the series point.\n     */\n    data: Datum;\n}\n\n/**\n * The series are determined by the keys accessor; each series i in the returned array corresponds to the ith key.\n * Each series is an array of points, where each point j corresponds to the jth element in the input data.\n *\n * The key for each series is available as series.key, and the index as series.index.\n */\nexport interface Series<Datum, Key> extends Array<SeriesPoint<Datum>> {\n    /**\n     * Key of the series.\n     */\n    key: Key;\n    /**\n     * Index of the series in the series array returned by stack generator.\n     */\n    index: number;\n}\n\n/**\n * A stack generator.\n *\n * Some shape types can be stacked, placing one shape adjacent to another.\n * For example, a bar chart of monthly sales might be broken down into a multi-series bar chart by product category, stacking bars vertically.\n * This is equivalent to subdividing a bar chart by an ordinal dimension (such as product category) and applying a color encoding.\n *\n * Stacked charts can show overall value and per-category value simultaneously; however, it is typically harder to compare across categories, as only the bottom layer of the stack is aligned.\n * So, chose the stack order carefully, and consider a streamgraph. (See also grouped charts.)\n *\n * Like the pie generator, the stack generator does not produce a shape directly. Instead it computes positions which you can then pass to an area generator or use directly, say to position bars.\n *\n * The first generic corresponds to the \"this\" context in which the stack generator and its accessor functions are invoked.\n *\n * The second generic corresponds to the data type of an element in the data array passed into the stack generator.\n *\n * The third generic corresponds to the data type of key used to identify a series.\n */\nexport interface Stack<This, Datum, Key> {\n    /**\n     * Generates a stack for the given array of data, returning an array representing each series.\n     * The resulting array has one element per series. Each series in then typically passed to an area generator to render an area chart,\n     * or used to construct rectangles for a bar chart.\n     *\n     * Any additional arguments are arbitrary; they are simply propagated to the generator’s accessor functions along with the this object.\n     *\n     * @param data Array of data elements.\n     */\n    (data: Iterable<Datum>, ...args: any[]): Array<Series<Datum, Key>>;\n\n    /**\n     * Returns the current keys accessor, which defaults to the empty array.\n     */\n    keys(): (this: This, data: Datum[], ...args: any[]) => Key[];\n    /**\n     * Sets the keys accessor to the specified function or array and returns this stack generator.\n     * A series (layer) is generated for each key.\n     * Keys are typically strings, but they may be arbitrary values.\n     * The series’ key is passed to the value accessor, along with each data point, to compute the point’s value.\n     */\n    keys(keys: Iterable<Key> | ((this: This, data: Datum[], ...args: any[]) => Key[])): this;\n\n    /**\n     * Returns the current value accessor, which defaults to a function return the property corresponding to the relevant key from the data element.\n     *\n     * Thus, by default the stack generator assumes that the input data is an array of objects, with each object exposing named properties with numeric values; see stack for an example.\n     */\n    value(): (d: Datum, key: Key, i: number, data: Datum[]) => number;\n    /**\n     * Sets the value accessor to the specified number and returns this stack generator.\n     *\n     * @param value A constant value.\n     */\n    value(value: number): this;\n    /**\n     * Sets the value accessor to the specified function and returns this stack generator.\n     *\n     * @param value A value accessor function which returns the numeric value for a given data element and key combination. The accessor function is invoked for each data element and key being passed\n     * the datum, the key, index of the data element in the input data array, and the complete data array.\n     */\n    value(value: (d: Datum, key: Key, i: number, data: Datum[]) => number): this;\n\n    /**\n     * Returns the current order accessor, which defaults to stackOrderNone; this uses the order given by the key accessor.\n     */\n    order(): (series: Series<Datum, Key>) => Iterable<number>;\n    /**\n     * Sets the order accessor to the specified array and returns this stack generator.\n     */\n    order(order: null | Iterable<number>): this;\n    /**\n     * Sets the order accessor to the specified function and returns this stack generator.\n     *\n     * The stack order is computed prior to the offset; thus, the lower value for all points is zero at the time the order is computed.\n     * The index attribute for each series is also not set until after the order is computed.\n     *\n     * See stack orders for the built-in orders.\n     *\n     * @param order A function returning a sort order array. It is passed the generated series array and must return an array of numeric indexes representing the stack order.\n     */\n    order(order: (series: Series<Datum, Key>) => Iterable<number>): this;\n\n    /**\n     * Returns the current offset accessor, which defaults to stackOffsetNone; this uses a zero baseline.\n     */\n    offset(): (series: Series<Datum, Key>, order: number[]) => void;\n    /**\n     * Reset the offset to use stackOffsetNone; this uses a zero baseline.\n     *\n     * @param offset null to set to the default stackOffsetNone.\n     */\n    offset(offset: null): this;\n    /**\n     * Sets the offset accessor to the specified function and returns this stack generator.\n     *\n     * @param offset A function which is passed the generated series array and the order index array;\n     *               it is then responsible for updating the lower and upper values in the series array.\n     */\n    offset(offset: (series: Series<Datum, Key>, order: number[]) => void): this;\n}\n\n/**\n * Constructs a new stack generator with the default settings.\n *\n * Ensure that the accessors used with the stack generator correspond to the arguments passed into them.\n */\nexport function stack(): Stack<any, { [key: string]: number }, string>;\n/**\n * Constructs a new stack generator with the default settings.\n *\n * Ensure that the accessors used with the stack generator correspond to the arguments passed into them.\n *\n * The generic corresponds to the data type of an element in the data array passed into the stack generator.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function stack<Datum>(): Stack<any, Datum, string>;\n/**\n * Constructs a new stack generator with the default settings.\n *\n * Ensure that the accessors used with the stack generator correspond to the arguments passed into them.\n *\n * The first generic corresponds to the data type of an element in the data array passed into the stack generator.\n *\n * The second generic corresponds to the data type of key used to identify a series.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function stack<Datum, Key>(): Stack<any, Datum, Key>;\n/**\n * Constructs a new stack generator with the default settings.\n *\n * Ensure that the accessors used with the stack generator correspond to the arguments passed into them.\n *\n * The first generic corresponds to the \"this\" context in which the stack generator and its accessor functions are invoked.\n *\n * The second generic corresponds to the data type of an element in the data array passed into the stack generator.\n *\n * The third generic corresponds to the data type of key used to identify a series.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function stack<This, Datum, Key>(): Stack<This, Datum, Key>;\n\n/**\n * Returns a series order such that the earliest series (according to the maximum value) is at the bottom.\n *\n * @param series A series generated by a stack generator.\n */\nexport function stackOrderAppearance(series: Series<any, any>): number[];\n\n/**\n * Returns a series order such that the smallest series (according to the sum of values) is at the bottom.\n *\n * @param series A series generated by a stack generator.\n */\nexport function stackOrderAscending(series: Series<any, any>): number[];\n\n/**\n * Returns a series order such that the largest series (according to the sum of values) is at the bottom.\n *\n * @param series A series generated by a stack generator.\n */\nexport function stackOrderDescending(series: Series<any, any>): number[];\n\n/**\n * Returns a series order such that the larger series (according to the sum of values) are on the inside and the smaller series are on the outside.\n * This order is recommended for streamgraphs in conjunction with the wiggle offset. See Stacked Graphs—Geometry & Aesthetics by Byron & Wattenberg for more information.\n *\n * @param series A series generated by a stack generator.\n */\nexport function stackOrderInsideOut(series: Series<any, any>): number[];\n\n/**\n * Returns the given series order [0, 1, … n - 1] where n is the number of elements in series. Thus, the stack order is given by the key accessor.\n *\n * @param series A series generated by a stack generator.\n */\nexport function stackOrderNone(series: Series<any, any>): number[];\n\n/**\n * Returns the reverse of the given series order [n - 1, n - 2, … 0] where n is the number of elements in series. Thus, the stack order is given by the reverse of the key accessor.\n *\n * @param series A series generated by a stack generator.\n */\nexport function stackOrderReverse(series: Series<any, any>): number[];\n\n/**\n * Applies a zero baseline and normalizes the values for each point such that the topline is always one.\n *\n * @param series A series generated by a stack generator.\n * @param order An array of numeric indexes representing the stack order.\n */\nexport function stackOffsetExpand(series: Series<any, any>, order: Iterable<number>): void;\n\n/**\n * Positive values are stacked above zero, while negative values are stacked below zero.\n *\n * @param series A series generated by a stack generator.\n * @param order An array of numeric indexes representing the stack order.\n */\nexport function stackOffsetDiverging(series: Series<any, any>, order: Iterable<number>): void;\n\n/**\n * Applies a zero baseline.\n *\n * @param series A series generated by a stack generator.\n * @param order An array of numeric indexes representing the stack order.\n */\nexport function stackOffsetNone(series: Series<any, any>, order: Iterable<number>): void;\n\n/**\n * Shifts the baseline down such that the center of the streamgraph is always at zero.\n *\n * @param series A series generated by a stack generator.\n * @param order An array of numeric indexes representing the stack order.\n */\nexport function stackOffsetSilhouette(series: Series<any, any>, order: Iterable<number>): void;\n\n/**\n * Shifts the baseline so as to minimize the weighted wiggle of layers. This offset is recommended for streamgraphs in conjunction with the inside-out order.\n * See Stacked Graphs—Geometry & Aesthetics by Bryon & Wattenberg for more information.\n *\n * @param series A series generated by a stack generator.\n * @param order An array of numeric indexes representing the stack order.\n */\nexport function stackOffsetWiggle(series: Series<any, any>, order: Iterable<number>): void;\n\n// Types from d3-time\n// Last module patch version validated against: 3.0.0\n\n// ---------------------------------------------------------------\n// Interfaces\n// ---------------------------------------------------------------\n\n/**\n * A D3 Time Interval\n */\nexport interface TimeInterval {\n    /**\n     * Returns a new date representing the latest interval boundary date before or equal to date.\n     * Equivalent to interval.floor, except it date is not specified, it defaults to the current time.\n     * For example, d3.timeYear(date) and d3.timeYear.floor(date) are equivalent.\n     *\n     * For example, timeDay(date) typically returns 12:00 AM local time on the given date.\n     *\n     * This function is idempotent: if the specified date is already floored to the current interval,\n     * a new date with an identical time is returned.\n     * Furthermore, the returned date is the minimum expressible value of the associated interval,\n     * such that interval.floor(interval.floor(date) - 1) returns the preceding interval boundary date.\n     *\n     * Note that the == and === operators do not compare by value with Date objects,\n     * and thus you cannot use them to tell whether the specified date has already been floored.\n     * Instead, coerce to a number and then compare.\n     *\n     * This is more reliable than testing whether the time is 12:00 AM, as in some time zones midnight may not exist due to daylight saving.\n     *\n     * @param date A date object.\n     */\n    (date?: Date): Date;\n\n    /**\n     * Returns a new date representing the latest interval boundary date before or equal to date.\n     *\n     * For example, timeDay.floor(date) typically returns 12:00 AM local time on the given date.\n     *\n     * This method is idempotent: if the specified date is already floored to the current interval,\n     * a new date with an identical time is returned.\n     * Furthermore, the returned date is the minimum expressible value of the associated interval,\n     * such that interval.floor(interval.floor(date) - 1) returns the preceding interval boundary date.\n     *\n     * Note that the == and === operators do not compare by value with Date objects,\n     * and thus you cannot use them to tell whether the specified date has already been floored.\n     * Instead, coerce to a number and then compare.\n     *\n     * This is more reliable than testing whether the time is 12:00 AM, as in some time zones midnight may not exist due to daylight saving.\n     *\n     * @param date A date object.\n     */\n    floor(date: Date): Date;\n\n    /**\n     * Returns a new date representing the closest interval boundary date to date.\n     *\n     * For example, timeDay.round(date) typically returns 12:00 AM local time on the given date if it is on or before noon,\n     * and 12:00 AM of the following day if it is after noon.\n     *\n     * This method is idempotent: if the specified date is already rounded to the current interval, a new date with an identical time is returned.\n     *\n     * @param date A date object.\n     */\n    round(date: Date): Date;\n\n    /**\n     * Returns a new date representing the earliest interval boundary date after or equal to date.\n     *\n     * For example, timeDay.ceil(date) typically returns 12:00 AM local time on the date following the given date.\n     *\n     * This method is idempotent: if the specified date is already ceilinged to the current interval,\n     * a new date with an identical time is returned. Furthermore,\n     * the returned date is the maximum expressible value of the associated interval,\n     * such that interval.ceil(interval.ceil(date) + 1) returns the following interval boundary date.\n     *\n     * @param date A date object.\n     */\n    ceil(date: Date): Date;\n\n    /**\n     * Returns a new date equal to date plus step intervals.\n     *\n     * If step is not specified it defaults to 1.\n     *\n     * This method does not round the specified date to the interval. For example, if date is today at 5:34 PM,\n     * then timeDay.offset(date, 1) returns 5:34 PM tomorrow (even if daylight saving changes!).\n     *\n     * @param date A date object.\n     * @param step An optional number of steps to apply when calculating the offset date.\n     * If step is negative, then the returned date will be before the specified date;\n     * if step is zero, then a copy of the specified date is returned; if step is not an integer, it is floored.\n     */\n    offset(date: Date, step?: number): Date;\n\n    /**\n     * Returns an array of dates representing every interval boundary after or equal to start (inclusive) and before stop (exclusive).\n     *\n     * If step is specified, then every step-th boundary will be returned; for example,\n     * for the timeDay interval a step of 2 will return every other day.\n     * If step is not an integer, it is floored.\n     *\n     * The first date in the returned array is the earliest boundary after or equal to start;\n     * subsequent dates are offset by step intervals and floored.\n     * Thus, two overlapping ranges may be inconsistent.\n     *\n     * To make ranges consistent when a step is specified, use CountableInterval.every instead.\n     *\n     * @param start A start date object for the range.\n     * @param stop A stop date object for the range.\n     * @param step An optional number of steps to apply when calculating the dates in the range.\n     */\n    range(start: Date, stop: Date, step?: number): Date[];\n\n    /**\n     * Returns a new interval that is a filtered subset of this interval using the specified test function.\n     *\n     * @param test A test function which is passed a date and should return true if and only if\n     * the specified date should be considered part of the interval.\n     */\n    filter(test: (date: Date) => boolean): TimeInterval;\n}\n\n/**\n * A D3 Countable Time Interval\n */\nexport interface CountableTimeInterval extends TimeInterval {\n    /**\n     * Returns the number of interval boundaries after start (exclusive) and before or equal to end (inclusive).\n     *\n     * Note that this behavior is slightly different than interval.range,\n     * because its purpose is to return the zero-based number of the specified end date relative to the specified start date.\n     *\n     * @param start A start date object.\n     * @param end An end date object.\n     */\n    count(start: Date, end: Date): number;\n    /**\n     * Returns a filtered view of this interval representing every stepth date.\n     *\n     * The meaning of step is dependent on this interval’s parent interval as defined by the field function.\n     *\n     * For example, timeMinute.every(15) returns an interval representing every fifteen minutes,\n     * starting on the hour: :00, :15, :30, :45, etc. Note that for some intervals,\n     * the resulting dates may not be uniformly-spaced;\n     * timeDay’s parent interval is timeMonth, and thus the interval number resets at the start of each month.\n     *\n     * If step is not valid, returns null. If step is one, returns this interval.\n     *\n     * This method can be used in conjunction with interval.range to ensure that two overlapping ranges are consistent.\n     *\n     * The returned filtered interval does not support interval.count. See also interval.filter.\n     *\n     * @param step Number of steps.\n     */\n    every(step: number): TimeInterval | null;\n}\n\n// ---------------------------------------------------------------\n// Custom (Countable)Interval Factories\n// ---------------------------------------------------------------\n\n/**\n * Constructs a new custom interval given the specified floor and offset functions.\n *\n * The returned custom interval is not countable, i.e. does not expose the methods \"count(..)\" and \"every(...)\".\n *\n * @param floor A floor function which takes a single date as an argument and rounds it down to the nearest interval boundary.\n * @param offset An offset function which takes a date and an integer step as arguments and advances\n * the specified date by the specified number of boundaries; the step may be positive, negative or zero.\n */\nexport function timeInterval(\n    floor: (date: Date) => void,\n    offset: (date: Date, step: number) => void,\n): TimeInterval;\n/**\n * Constructs a new custom interval given the specified floor, offset and count functions.\n *\n * The returned custom interval is countable and exposes the methods \"count(..)\" and \"every(...)\".\n *\n * Note: due to an internal optimization, the specified count function must not invoke interval.count on other time intervals.\n *\n * @param floor A floor function which takes a single date as an argument and rounds it down to the nearest interval boundary.\n * @param offset An offset function which takes a date and an integer step as arguments and advances\n * the specified date by the specified number of boundaries; the step may be positive, negative or zero.\n * @param count A count function which takes a start date and an end date, already floored to the current interval,\n * and returns the number of boundaries between the start (exclusive) and end (inclusive).\n * Note: due to an internal optimization, the specified count function must not invoke interval.count on other time intervals.\n * @param field An optional field function which takes a date, already floored to the current interval,\n * and returns the field value of the specified date,\n * corresponding to the number of boundaries between this date (exclusive) and the latest previous parent boundary.\n * For example, for the timeDay interval, this returns the number of days since the start of the month.\n * If a field function is not specified, it defaults to counting the number of interval boundaries since\n * the UNIX epoch of January 1, 1970 UTC. The field function defines the behavior of interval.every.\n */\nexport function timeInterval(\n    floor: (date: Date) => void,\n    offset: (date: Date, step: number) => void,\n    count: (start: Date, end: Date) => number,\n    field?: (date: Date) => number,\n): CountableTimeInterval;\n\n// ---------------------------------------------------------------\n// Built-In Factories and Date Array Creators\n// ---------------------------------------------------------------\n\n// local time ----------------------------------------------------------\n\n/**\n * Milliseconds Interval in Local Time; the shortest available time unit.\n */\nexport const timeMillisecond: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeMillisecond.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeMilliseconds(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Seconds Interval in Local Time; seconds (e.g., 01:23:45.0000 AM); 1,000 milliseconds.\n */\nexport const timeSecond: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeSecond.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeSeconds(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Minutes Interval in Local Time; minutes (e.g., 01:02:00 AM); 60 seconds. Note that ECMAScript ignores leap seconds.\n */\nexport const timeMinute: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeMinute.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeMinutes(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Hours Interval in Local Time; Hours (e.g., 01:00 AM); 60 minutes.\n *\n * Note that advancing time by one hour in local time can return the same hour or skip an hour due to daylight saving.\n */\nexport const timeHour: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeHour.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeHours(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Days Interval in Local Time; days (e.g., February 7, 2012 at 12:00 AM); typically 24 hours.\n * Days in local time may range from 23 to 25 hours due to daylight saving.\n */\nexport const timeDay: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeDay.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeDays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval in Local Time. Alias for sunday; 7 days and typically 168 hours.\n *\n * Weeks in local time may range from 167 to 169 hours due on daylight saving.\n */\nexport const timeWeek: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeWeek.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeWeeks(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval for Sunday-based weeks in Local Time (e.g., February 5, 2012 at 12:00 AM).\n * 7 days and typically 168 hours.\n *\n * Weeks in local time may range from 167 to 169 hours due on daylight saving.\n */\nexport const timeSunday: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeSunday.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeSundays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval for Monday-based weeks in Local Time (e.g., February 6, 2012 at 12:00 AM).\n * 7 days and typically 168 hours.\n *\n * Weeks in local time may range from 167 to 169 hours due on daylight saving.\n */\nexport const timeMonday: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeMonday.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeMondays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval for Tuesday-based weeks in Local Time (e.g., February 7, 2012 at 12:00 AM).\n * 7 days and typically 168 hours.\n *\n * Weeks in local time may range from 167 to 169 hours due on daylight saving.\n */\nexport const timeTuesday: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeTuesday.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeTuesdays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval for Wednesday-based weeks in Local Time (e.g., February 8, 2012 at 12:00 AM).\n * 7 days and typically 168 hours.\n *\n * Weeks in local time may range from 167 to 169 hours due on daylight saving.\n */\nexport const timeWednesday: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeWednesday.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeWednesdays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval for Thursday-based weeks in Local Time (e.g., February 9, 2012 at 12:00 AM).\n * 7 days and typically 168 hours.\n *\n * Weeks in local time may range from 167 to 169 hours due on daylight saving.\n */\nexport const timeThursday: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeThursday.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeThursdays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval for Friday-based weeks in Local Time (e.g., February 10, 2012 at 12:00 AM).\n * 7 days and typically 168 hours.\n *\n * Weeks in local time may range from 167 to 169 hours due on daylight saving.\n */\nexport const timeFriday: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeFriday.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeFridays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval for Saturday-based weeks in Local Time (e.g., February 11, 2012 at 12:00 AM).\n * 7 days and typically 168 hours.\n *\n * Weeks in local time may range from 167 to 169 hours due on daylight saving.\n */\nexport const timeSaturday: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeSaturday.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeSaturdays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Month Interval in Local Time; months (e.g., February 1, 2012 at 12:00 AM); ranges from 28 to 31 days.\n */\nexport const timeMonth: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeMonth.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeMonths(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Year Interval in Local Time; years (e.g., January 1, 2012 at 12:00 AM); ranges from 365 to 366 days.\n */\nexport const timeYear: CountableTimeInterval;\n\n/**\n * This is a convenience alias for timeYear.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function timeYears(start: Date, stop: Date, step?: number): Date[];\n\n// utc Coordinated Universal Time ----------------------------------------------------------\n\n/**\n * Milliseconds Interval in Coordinated Universal Time (UTC); the shortest available time unit.\n */\nexport const utcMillisecond: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcMillisecond.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcMilliseconds(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Seconds Interval in Coordinated Universal Time (UTC); seconds (e.g., 01:23:45.0000 AM); 1,000 milliseconds.\n */\nexport const utcSecond: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcSecond.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcSeconds(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Minutes Interval in Coordinated Universal Time (UTC); minutes (e.g., 01:02:00 AM); 60 seconds.\n * Note that ECMAScript ignores leap seconds.\n */\nexport const utcMinute: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcMinute.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcMinutes(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Hours Interval in Coordinated Universal Time (UTC); Hours (e.g., 01:00 AM); 60 minutes.\n */\nexport const utcHour: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcHour.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcHours(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Days Interval in Coordinated Universal Time (UTC); days (e.g., February 7, 2012 at 12:00 AM); 24 hours.\n */\nexport const utcDay: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcDay.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcDays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval in Local Time. Alias for sunday; 7 days and 168 hours.\n */\nexport const utcWeek: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcWeek.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcWeeks(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval for Sunday-based weeks in Coordinated Universal Time (UTC) (e.g., February 5, 2012 at 12:00 AM).\n * 7 days and 168 hours.\n */\nexport const utcSunday: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcSunday.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcSundays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval for Monday-based weeks in Coordinated Universal Time (UTC) (e.g., February 6, 2012 at 12:00 AM).\n * 7 days and 168 hours.\n */\nexport const utcMonday: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcMonday.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcMondays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval for Tuesday-based weeks in Coordinated Universal Time (UTC) (e.g., February 7, 2012 at 12:00 AM).\n * 7 days and 168 hours.\n */\nexport const utcTuesday: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcTuesday.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcTuesdays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval for Wednesday-based weeks in Coordinated Universal Time (UTC) (e.g., February 8, 2012 at 12:00 AM).\n * 7 days and 168 hours.\n */\nexport const utcWednesday: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcWednesday.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcWednesdays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval for Thursday-based weeks in Coordinated Universal Time (UTC) (e.g., February 9, 2012 at 12:00 AM).\n * 7 days and 168 hours.\n */\nexport const utcThursday: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcThursday.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcThursdays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval for Friday-based weeks in Coordinated Universal Time (UTC) (e.g., February 10, 2012 at 12:00 AM).\n * 7 days and 168 hours.\n */\nexport const utcFriday: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcFriday.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcFridays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Week Interval for Saturday-based weeks in Coordinated Universal Time (UTC) (e.g., February 11, 2012 at 12:00 AM).\n * 7 days and 168 hours.\n */\nexport const utcSaturday: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcSaturday.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcSaturdays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Month Interval in Coordinated Universal Time (UTC); months (e.g., February 1, 2012 at 12:00 AM); ranges from 28 to 31 days.\n */\nexport const utcMonth: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcMonth.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcMonths(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Year Interval in Coordinated Universal Time (UTC); years (e.g., January 1, 2012 at 12:00 AM); ranges from 365 to 366 days.\n */\nexport const utcYear: CountableTimeInterval;\n\n/**\n * This is a convenience alias for utcYear.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function utcYears(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Like d3.utcDay, except it counts days since the UNIX epoch (January 1, 1970) such that interval.every returns uniformly-spaced dates rather than varying based on day-of-month.\n */\nexport const unixDay: CountableTimeInterval;\n\n/**\n * This is a convenience alias for unixDay.range(...).\n *\n * @param start A start date object for the range.\n * @param stop A stop date object for the range.\n * @param step An optional number of steps to apply when calculating the dates in the range.\n */\nexport function unixDays(start: Date, stop: Date, step?: number): Date[];\n\n/**\n * Equivalent to d3.utcTicks, but in local time.\n */\nexport function timeTicks(start: Date, stop: Date, count: number): Date[];\n\n/**\n * Returns the time interval that would be used by d3.timeTicks given the same arguments.\n */\nexport function timeTickInterval(start: Date, stop: Date, count: number): TimeInterval | null;\n\n/**\n * Returns an array of approximately count dates at regular intervals between start and stop (inclusive).\n * If stop is before start, dates are returned in reverse chronological order; otherwise dates are returned in chronological order.\n */\nexport function utcTicks(start: Date, stop: Date, count: number): Date[];\n\n/**\n * Returns the time interval that would be used by d3.utcTicks given the same arguments.\n * If there is no associated interval, such as when start or stop is invalid, returns null.\n */\nexport function utcTickInterval(start: Date, stop: Date, count: number): TimeInterval | null;\n\n// Types from d3-time-format\n// Last module patch version validated against: 4.0.0\n\n/**\n * Specification of time locale to use when creating a new TimeLocaleObject\n */\nexport interface TimeLocaleDefinition {\n    /**\n     * The date and time (%c) format specifier (e.g., \"%a %b %e %X %Y\").\n     */\n    dateTime: string;\n    /**\n     * The date (%x) format specifier (e.g., \"%m/%d/%Y\").\n     */\n    date: string;\n    /**\n     *  The time (%X) format specifier (e.g., \"%H:%M:%S\").\n     */\n    time: string;\n    /**\n     * The A.M. and P.M. equivalents (e.g., [\"AM\", \"PM\"]).\n     */\n    periods: [string, string];\n    /**\n     * The full names of the weekdays, starting with Sunday.\n     */\n    days: [string, string, string, string, string, string, string];\n    /**\n     * The abbreviated names of the weekdays, starting with Sunday.\n     */\n    shortDays: [string, string, string, string, string, string, string];\n    /**\n     * The full names of the months (starting with January).\n     */\n    months: [string, string, string, string, string, string, string, string, string, string, string, string];\n    /**\n     * the abbreviated names of the months (starting with January).\n     */\n    shortMonths: [string, string, string, string, string, string, string, string, string, string, string, string];\n}\n\n/**\n * Interface describing a time-locale-based object which exposes time-formatting/parsing\n * methods for a specified locale definition.\n */\nexport interface TimeLocaleObject {\n    /**\n     * Returns a new formatter for the given string specifier. The specifier string may contain the following directives:\n     * - %a - abbreviated weekday name.*\n     * - %A - full weekday name.*\n     * - %b - abbreviated month name.*\n     * - %B - full month name.*\n     * - %c - the locale’s date and time, such as %x, %X.*\n     * - %d - zero-padded day of the month as a decimal number [01,31].\n     * - %e - space-padded day of the month as a decimal number [ 1,31]; equivalent to %_d.\n     * - %f - microseconds as a decimal number [000000, 999999].\n     * - %g - ISO 8601 week-based year without century as a decimal number [00,99].\n     * - %G - ISO 8601 week-based year with century as a decimal number.\n     * - %H - hour (24-hour clock) as a decimal number [00,23].\n     * - %I - hour (12-hour clock) as a decimal number [01,12].\n     * - %j - day of the year as a decimal number [001,366].\n     * - %m - month as a decimal number [01,12].\n     * - %M - minute as a decimal number [00,59].\n     * - %L - milliseconds as a decimal number [000, 999].\n     * - %p - either AM or PM.*\n     * - %q - quarter of the year as a decimal number [1,4].\n     * - %Q - milliseconds since UNIX epoch.\n     * - %s - seconds since UNIX epoch.\n     * - %S - second as a decimal number [00,61].\n     * - %u - Monday-based (ISO) weekday as a decimal number [1,7].\n     * - %U - Sunday-based week of the year as a decimal number [00,53].\n     * - %V - ISO 8601 week number of the year as a decimal number [01, 53].\n     * - %w - Sunday-based weekday as a decimal number [0,6].\n     * - %W - Monday-based week of the year as a decimal number [00,53].\n     * - %x - the locale’s date, such as %-m/%-d/%Y.*\n     * - %X - the locale’s time, such as %-I:%M:%S %p.*\n     * - %y - year without century as a decimal number [00,99].\n     * - %Y - year with century as a decimal number.\n     * - %Z - time zone offset, such as -0700, -07:00, -07, or Z.\n     * - %% - a literal percent sign (%).\n     *\n     * Directives marked with an asterisk (*) may be affected by the locale definition.\n     *\n     * For %U, all days in a new year preceding the first Sunday are considered to be in week 0.\n     * For %W, all days in a new year preceding the first Monday are considered to be in week 0.\n     * Week numbers are computed using interval.count. For example, 2015-52 and 2016-00 represent Monday, December 28, 2015, while 2015-53 and 2016-01 represent Monday, January 4, 2016.\n     * This differs from the ISO week date specification (%V), which uses a more complicated definition!\n     *\n     * For %V,%g and %G, per the strftime man page:\n     *\n     * In this system, weeks start on a Monday, and are numbered from 01, for the first week, up to 52 or 53, for the last week.\n     * Week 1 is the first week where four or more days fall within the new year (or, synonymously, week 01 is: the first week of the year that contains a Thursday;\n     * or, the week that has 4 January in it). If the ISO week number belongs to the previous or next year, that year is used instead.\n     *\n     * The % sign indicating a directive may be immediately followed by a padding modifier:\n     *\n     * 1) 0 - zero-padding\n     * 2) _ - space-padding\n     * 3) - disable padding\n     *\n     * If no padding modifier is specified, the default is 0 for all directives except %e, which defaults to _.\n     * (In some implementations of strftime and strptime, a directive may include an optional field width or precision; this feature is not yet implemented.)\n     *\n     * The returned function formats a specified date, returning the corresponding string.\n     *\n     * @param specifier A specifier string for the date format.\n     */\n    format(specifier: string): (date: Date) => string;\n    /**\n     * Returns a new parser for the given string specifier. The specifier string may contain the same directives as locale.format (TimeLocaleObject.format).\n     * The %d and %e directives are considered equivalent for parsing.\n     *\n     * The returned function parses a specified string, returning the corresponding date or null if the string could not be parsed according to this format’s specifier.\n     * Parsing is strict: if the specified string does not exactly match the associated specifier, this method returns null.\n     *\n     * For example, if the associated specifier is %Y-%m-%dT%H:%M:%SZ, then the string \"2011-07-01T19:15:28Z\" will be parsed as expected,\n     * but \"2011-07-01T19:15:28\", \"2011-07-01 19:15:28\" and \"2011-07-01\" will return null. (Note that the literal Z here is different from the time zone offset directive %Z.)\n     * If a more flexible parser is desired, try multiple formats sequentially until one returns non-null.\n     *\n     * @param specifier A specifier string for the date format.\n     */\n    parse(specifier: string): (dateString: string) => Date | null;\n    /**\n     * Equivalent to locale.format (TimeLocaleObject.format), except all directives are interpreted as Coordinated Universal Time (UTC) rather than local time.\n     *\n     * @param specifier A specifier string for the date format.\n     */\n    utcFormat(specifier: string): (date: Date) => string;\n    /**\n     * Equivalent to locale.parse (TimeLocaleObject.parse), except all directives are interpreted as Coordinated Universal Time (UTC) rather than local time.\n     *\n     * @param specifier A specifier string for the date format.\n     */\n    utcParse(specifier: string): (dateString: string) => Date | null;\n}\n\n/**\n * Create a new time-locale-based object which exposes time-formatting\n * methods for the specified locale definition.\n *\n * @param definition A time locale definition.\n */\nexport function timeFormatLocale(definition: TimeLocaleDefinition): TimeLocaleObject;\n\n/**\n * Create a new time-locale-based object which exposes time-formatting\n * methods for the specified locale definition. The new time locale definition\n * will be set as the new default time locale.\n *\n * @param definition A time locale definition.\n */\nexport function timeFormatDefaultLocale(definition: TimeLocaleDefinition): TimeLocaleObject;\n\n/**\n * Returns a new formatter for the given string specifier. The returned function formats a specified date, returning the corresponding string.\n *\n * An alias for locale.format (TimeLocaleObject.format) on the default locale.\n *\n * @param specifier A specifier string for the date format.\n */\nexport function timeFormat(specifier: string): (date: Date) => string;\n\n/**\n * Returns a new parser for the given string specifier.\n *\n * An alias for locale.parse (TimeLocaleObject.parse) on the default locale.\n *\n * @param specifier A specifier string for the date format.\n */\nexport function timeParse(specifier: string): (dateString: string) => Date | null;\n\n/**\n * Equivalent to timeFormat, except all directives are interpreted as Coordinated Universal Time (UTC) rather than local time.\n *\n * An alias for locale.utcFormat (TimeLocaleObject.utcFormat) on the default locale.\n *\n * @param specifier A specifier string for the date format.\n */\nexport function utcFormat(specifier: string): (date: Date) => string;\n\n/**\n * Equivalent to timeParse, except all directives are interpreted as Coordinated Universal Time (UTC) rather than local time.\n *\n * An alias for locale.utcParse (TimeLocaleObject.utcParse) on the default locale.\n *\n * @param specifier A specifier string for the date format.\n */\nexport function utcParse(specifier: string): (dateString: string) => Date | null;\n\n/**\n * The full ISO 8601 UTC time formatter. Where available, this method will use Date.toISOString to format.\n *\n * @param date A date to format.\n */\nexport function isoFormat(date: Date): string;\n\n/**\n * The full ISO 8601 UTC time parser. Where available, this method will use the Date constructor to parse strings.\n * If you depend on strict validation of the input format according to ISO 8601, you should construct a UTC parser function using utcParse.\n *\n * @param dateString A string encoded date to parse.\n */\nexport function isoParse(dateString: string): Date | null;\n\n// Types from d3-timer\n// Last module patch version validated against: 3.0.1\n\n/**\n * Returns the current time as defined by performance.now if available, and Date.now if not.\n * The current time is updated at the start of a frame; it is thus consistent during the frame, and any timers scheduled during the same frame will be synchronized.\n * If this method is called outside of a frame, such as in response to a user event, the current time is calculated and then fixed until the next frame,\n * again ensuring consistent timing during event handling.\n */\nexport function now(): number;\n\nexport interface Timer {\n    /**\n     * Restart a timer with the specified callback and optional delay and time.\n     * This is equivalent to stopping this timer and creating a new timer with the specified arguments,\n     * although this timer retains the original invocation priority.\n     *\n     * @param callback A callback function to be invoked and passed in the apparent\n     * elapsed time since the timer became active in milliseconds.\n     * @param delay An optional numeric delay in milliseconds (default = 0) relative to time.\n     * @param time An optional time in milliseconds relative to which the delay is calculated (default = now).\n     */\n    restart(callbackFn: (elapsed: number) => void, delay?: number, time?: number): void;\n\n    /**\n     * Stop the timer.\n     */\n    stop(): void;\n}\n\n/**\n * Schedules and returns a new timer, invoking the specified callback repeatedly until the timer is stopped.\n * The callback is passed the (apparent) elapsed time since the timer became active.\n *\n * @param callback A callback function to be invoked and passed in the apparent\n * elapsed time since the timer became active in milliseconds.\n * @param delay An optional numeric delay in milliseconds (default = 0) relative to time.\n * @param time An optional time in milliseconds relative to which the delay is calculated (default = now).\n */\nexport function timer(callback: (elapsed: number) => void, delay?: number, time?: number): Timer;\n\n/**\n * Immediately invoke any eligible timer callbacks.\n */\nexport function timerFlush(): void;\n\n/**\n * Schedules and returns a new timer, invoking the specified callback. The timer is stopped automatically\n * on its first callback. The callback is passed the (apparent) elapsed time since the timer became active.\n *\n * @param callback A callback function to be invoked and passed in the apparent\n * elapsed time since the timer became active in milliseconds.\n * @param delay An optional numeric delay in milliseconds (default = 0) relative to time.\n * @param time An optional time in milliseconds relative to which the delay is calculated (default = now).\n */\nexport function timeout(callback: (elapsed: number) => void, delay?: number, time?: number): Timer;\n\n/**\n * Schedules and returns a new timer, invoking the specified callback repeatedly every 'delay' milliseconds\n * until the timer is stopped.\n * The callback is passed the (apparent) elapsed time since the timer became active.\n *\n * @param callback A callback function to be invoked and passed in the apparent\n * elapsed time since the timer became active in milliseconds.\n * @param delay An optional numeric delay in milliseconds between repeat invocations of the callback.\n * If not specified, the interval timer behaves like the regular timer.\n * @param time An optional time in milliseconds relative to which the initial delay is calculated (default = now).\n */\nexport function interval(callback: (elapsed: number) => void, delay?: number, time?: number): Timer;\n\n// Types from d3-transition\n// Last module patch version validated against: 3.0.1\n\n/**\n * Extend interface 'Selection' by declaration merging with 'd3-selection'\n */\ndeclare module \"d3-selection\" {\n    /**\n     * A D3 Selection of elements.\n     *\n     * The first generic \"GElement\" refers to the type of the selected element(s).\n     * The second generic \"Datum\" refers to the type of the datum of a selected element(s).\n     * The third generic \"PElement\" refers to the type of the parent element(s) in the D3 selection.\n     * The fourth generic \"PDatum\" refers to the type of the datum of the parent element(s).\n     */\n    interface Selection<GElement extends BaseType, Datum, PElement extends BaseType, PDatum> {\n        /**\n         * Interrupts the active transition of the specified name on the selected elements, and cancels any pending transitions with the specified name, if any.\n         * If a name is not specified, null is used.\n         *\n         * IMPORTANT: Interrupting a transition on an element has no effect on any transitions on any descendant elements.\n         * For example, an axis transition consists of multiple independent, synchronized transitions on the descendants of the axis G element\n         * (the tick lines, the tick labels, the domain path, etc.). To interrupt the axis transition, you must therefore interrupt the descendants.\n         *\n         * @param name Name of the transition.\n         */\n        interrupt(name?: string): this;\n        /**\n         * Returns a new transition on the given selection with the specified name. If a name is not specified, null is used.\n         * The new transition is only exclusive with other transitions of the same name.\n         *\n         * @param name Name of the transition.\n         */\n        transition(name?: string): Transition<GElement, Datum, PElement, PDatum>;\n        /**\n         * Returns a new transition on the given selection.\n         *\n         * When using a transition instance, the returned transition has the same id and name as the specified transition.\n         * If a transition with the same id already exists on a selected element, the existing transition is returned for that element.\n         * Otherwise, the timing of the returned transition is inherited from the existing transition of the same id on the nearest ancestor of each selected element.\n         * Thus, this method can be used to synchronize a transition across multiple selections,\n         * or to re-select a transition for specific elements and modify its configuration.\n         *\n         * If the specified transition is not found on a selected node or its ancestors (such as if the transition already ended),\n         * the default timing parameters are used; however, in a future release, this will likely be changed to throw an error.\n         *\n         * @param transition A transition instance.\n         */\n        transition(transition: Transition<BaseType, any, any, any>): Transition<GElement, Datum, PElement, PDatum>;\n    }\n}\n\n/**\n * Return the active transition on the specified node with the specified name, if any.\n * If no name is specified, null is used. Returns null if there is no such active transition on the specified node.\n * This method is useful for creating chained transitions.\n *\n * The first generic \"GElement\" refers to the type of element on which the returned active transition was defined. The second generic \"Datum\" refers to the type of the\n * datum, of a selected element on which the transition is defined. The third generic refers to the type of the parent elements in the returned Transition.\n * The fourth generic refers to the type of the datum defined on the parent elements in the returned Transition.\n *\n * @param node Element for which the active transition should be returned.\n * @param name Name of the transition.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function active<GElement extends BaseType, Datum, PElement extends BaseType, PDatum>(\n    node: GElement,\n    name?: string,\n): Transition<GElement, Datum, PElement, PDatum> | null;\n\n/**\n * Interrupts the active transition of the specified name on the specified node, and cancels any pending transitions with the specified name, if any.\n * If a name is not specified, null is used.\n *\n * @param node Element for which the transition should be interrupted.\n * @param name Name of the transition to be interrupted. If a name is not specified, null is used.\n */\nexport function interrupt(node: BaseType, name?: string): void;\n\n/**\n * A D3 Transition.\n *\n * The first generic \"GElement\" refers to the type of the selected element(s) in the Transition.\n * The second generic \"Datum\" refers to the type of the datum of a selected element(s) in the Transition.\n * The third generic \"PElement\" refers to the type of the parent element(s) in the D3 selection in the Transition.\n * The fourth generic \"PDatum\" refers to the type of the datum of the parent element(s) in the Transition.\n */\nexport interface Transition<GElement extends BaseType, Datum, PElement extends BaseType, PDatum> {\n    // Sub-selection -------------------------\n\n    /**\n     * For each selected element, select the first descendant element that matches the specified selector string, if any,\n     * and returns a transition on the resulting selection. The new transition has the same id, name and timing as this transition;\n     * however, if a transition with the same id already exists on a selected element,\n     * the existing transition is returned for that element.\n     *\n     * The generic represents the type of the descendant element to be selected.\n     *\n     * @param selector CSS selector string\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    select<DescElement extends BaseType>(selector: string): Transition<DescElement, Datum, PElement, PDatum>;\n    /**\n     * For each selected element, select the descendant element returned by the selector function, if any,\n     * and returns a transition on the resulting selection. The new transition has the same id, name and timing as this transition;\n     * however, if a transition with the same id already exists on a selected element,\n     * the existing transition is returned for that element.\n     *\n     * The generic represents the type of the descendant element to be selected.\n     *\n     * @param selector A selector function, which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).\n     * It must return an element, or null if there is no matching element.\n     */\n    select<DescElement extends BaseType>(\n        selector: ValueFn<GElement, Datum, DescElement>,\n    ): Transition<DescElement, Datum, PElement, PDatum>;\n\n    /**\n     * For each selected element, select all descendant elements that match the specified selector string, if any,\n     * and returns a transition on the resulting selection. The new transition has the same id, name and timing as this transition;\n     * however, if a transition with the same id already exists on a selected element, the existing transition is returned for that element.\n     *\n     * The first generic \"DescElement\" refers to the type of descendant element to be selected. The second generic \"OldDatum\" refers to the type of the\n     * datum, of a selected element. This is useful when re-selecting elements with a previously set, know datum type.\n     *\n     * @param selector CSS selector string\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    selectAll<DescElement extends BaseType, OldDatum>(\n        selector: string,\n    ): Transition<DescElement, OldDatum, GElement, Datum>;\n    /**\n     * For each selected element, select all descendant elements returned by the selector function, if any,\n     * and returns a transition on the resulting selection. The new transition has the same id, name and timing as this transition;\n     * however, if a transition with the same id already exists on a selected element, the existing transition is returned for that element.\n     *\n     * The first generic \"DescElement\" refers to the type of descendant element to be selected. The second generic \"OldDatum\" refers to the type of the\n     * datum, of a selected element. This is useful when re-selecting elements with a previously set, know datum type.\n     *\n     * @param selector A selector function which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). It must return an array of elements\n     * (or a pseudo-array, such as a NodeList), or the empty array if there are no matching elements.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    selectAll<DescElement extends BaseType, OldDatum>(\n        selector: ValueFn<GElement, Datum, DescElement[] | ArrayLike<DescElement>>,\n    ): Transition<DescElement, OldDatum, GElement, Datum>;\n\n    /**\n     * For each selected element, selects the first child element that matches the specified selector string, if any, and returns a transition on the resulting selection.\n     * The selector may be specified either as a selector string or a function.\n     * If a function, it is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element.\n     * The new transition has the same id, name and timing as this transition;\n     * however, if a transition with the same id already exists on a selected element, the existing transition is returned for that element.\n     * This method is equivalent to deriving the selection for this transition via transition.selection,\n     * creating a subselection via selection.selectChild, and then creating a new transition via selection.transition.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    selectChild<DescElement extends BaseType, OldDatum>(\n        selector?: string | ValueFn<GElement, Datum, DescElement>,\n    ): Transition<DescElement, OldDatum, GElement, Datum>;\n\n    /**\n     * For each selected element, selects all children that match the specified selector string, if any, and returns a transition on the resulting selection.\n     * The selector may be specified either as a selector string or a function.\n     * If a function, it is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element.\n     * The new transition has the same id, name and timing as this transition;\n     * however, if a transition with the same id already exists on a selected element, the existing transition is returned for that element.\n     * This method is equivalent to deriving the selection for this transition via transition.selection,\n     * creating a subselection via selection.selectChildren, and then creating a new transition via selection.transition.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    selectChildren<DescElement extends BaseType, OldDatum>(\n        selector?: string | ValueFn<GElement, Datum, DescElement>,\n    ): Transition<DescElement, OldDatum, GElement, Datum>;\n\n    /**\n     * Return the selection corresponding to this transition.\n     */\n    selection(): Selection<GElement, Datum, PElement, PDatum>;\n\n    /**\n     * Returns a new transition on the same selected elements as this transition, scheduled to start when this transition ends.\n     * The new transition inherits a reference time equal to this transition’s time plus its delay and duration.\n     * The new transition also inherits this transition’s name, duration, and easing.\n     * This method can be used to schedule a sequence of chained transitions.\n     *\n     * A delay configured for the new transition will be relative to the previous transition.\n     */\n    transition(): Transition<GElement, Datum, PElement, PDatum>;\n\n    // Modifying -------------------------------\n\n    /**\n     * For each selected element, assigns the attribute tween for the attribute with the specified name to the specified target value.\n     * The starting value of the tween is the attribute’s value when the transition starts.\n     * If the target value is null, the attribute is removed when the transition starts.\n     */\n    attr(name: string, value: null | string | number | boolean): this;\n    /**\n     * For each selected element, assigns the attribute tween for the attribute with the specified name to the specified target value.\n     * The starting value of the tween is the attribute’s value when the transition starts.\n     * The target value is return value of the value function evaluated for the selected element.\n     *\n     * An interpolator is chosen based on the type of the target value, using the following algorithm:\n     * 1.) If value is a number, use interpolateNumber.\n     * 2.) If value is a color or a string coercible to a color, use interpolateRgb.\n     * 3.) Use interpolateString.\n     *\n     * To apply a different interpolator, use transition.attrTween.\n     *\n     * @param name Name of the attribute.\n     * @param value A value function which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).\n     * A null value will clear the attribute at the start of the transition.\n     */\n    attr(name: string, value: ValueFn<GElement, Datum, string | number | boolean | null>): this;\n\n    /**\n     * Return the current interpolator factory for attribute with the specified name, or undefined if no such tween exists.\n     *\n     * @param name Name of attribute.\n     */\n    attrTween(name: string): ValueFn<GElement, Datum, (this: GElement, t: number) => string> | undefined;\n    /**\n     * Remove the previously-assigned attribute tween of the specified name, if any.\n     *\n     * @param name Name of attribute.\n     * @param factory Use null to remove previously-assigned attribute tween.\n     */\n    attrTween(name: string, factory: null): this;\n    /**\n     * Assign the attribute tween for the attribute with the specified name to the specified interpolator factory.\n     * An interpolator factory is a function that returns an interpolator; when the transition starts, the factory is evaluated for each selected element.\n     * The returned interpolator will then be invoked for each frame of the transition, in order,\n     * being passed the eased time t, typically in the range [0, 1]. Lastly, the return value of the interpolator will be used to set the attribute value.\n     * The interpolator must return a string.\n     *\n     * @param name Name of attribute.\n     * @param factory An interpolator factory which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). The interpolator factory returns a string interpolator,\n     * which takes as its argument eased time t, typically in the range [0, 1] and returns the interpolated string.\n     */\n    attrTween(name: string, factory: ValueFn<GElement, Datum, (this: GElement, t: number) => string>): this;\n\n    /**\n     * For each selected element, the style with the specified name will be cleared at the start of the transition.\n     *\n     * @param name Name of the style.\n     * @param value Use null to clear the style.\n     */\n    style(name: string, value: null): this;\n    /**\n     * For each selected element, assigns the style tween for the style with the specified name to the specified target value with the\n     * specified priority.\n     * The starting value of the tween is the style’s inline value if present, and otherwise its computed value.\n     * The target value is the specified constant value for all elements.\n     *\n     * An interpolator is chosen based on the type of the target value, using the following algorithm:\n     * 1.) If value is a number, use interpolateNumber.\n     * 2.) If value is a color or a string coercible to a color, use interpolateRgb.\n     * 3.) Use interpolateString.\n     *\n     * To apply a different interpolator, use transition.attrTween.\n     *\n     * @param name Name of the style.\n     * @param value Target value for the style.\n     * @param priority An optional priority flag, either null or the string \n    /**\n     * For each selected element, assigns the style tween for the style with the specified name to the specified target value with the\n     * specified priority.\n     * The starting value of the tween is the style's inline value if present, and otherwise its computed value.\n     * The target value is return value of the value function evaluated for the selected element.\n     *\n     * An interpolator is chosen based on the type of the target value, using the following algorithm:\n     * 1.) If value is a number, use interpolateNumber.\n     * 2.) If value is a color or a string coercible to a color, use interpolateRgb.\n     * 3.) Use interpolateString.\n     *\n     * To apply a different interpolator, use transition.attrTween.\n     *\n     * @param name Name of the style.\n     * @param value A value function which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).\n     * A null value will clear the style at the start of the transition.\n     * @param priority An optional priority flag, either null or the string \n\n    /**\n     * Return the current interpolator factory for style with the specified name, or undefined if no such tween exists.\n     *\n     * @param name Name of style.\n     */\n    styleTween(name: string): ValueFn<GElement, Datum, (this: GElement, t: number) => string> | undefined;\n    /**\n     * Remove the previously-assigned style tween of the specified name, if any.\n     *\n     * @param name Name of style.\n     * @param factory Use null to remove previously-assigned style tween.\n     */\n    styleTween(name: string, factory: null): this;\n    /**\n     * Assign the style tween for the style with the specified name to the specified interpolator factory.\n     * An interpolator factory is a function that returns an interpolator; when the transition starts, the factory is evaluated for each selected element.\n     * The returned interpolator will then be invoked for each frame of the transition, in order,\n     * being passed the eased time t, typically in the range [0, 1]. Lastly, the return value of the interpolator will be used to set the style value.\n     * The interpolator must return a string.\n     *\n     * @param name Name of style.\n     * @param factory An interpolator factory which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). The interpolator factory returns a string interpolator,\n     * which takes as its argument eased time t, typically in the range [0, 1] and returns the interpolated string.\n     * @param priority An optional priority flag, either null or the string \n\n    /**\n     * For each selected element, sets the text content to the specified target value when the transition starts.\n     * A null value will clear the content.\n     */\n    text(value: null | string | number | boolean): this;\n    /**\n     * For each selected element, sets the text content returned by the value function for each selected element when the transition starts.\n     *\n     * To interpolate text rather than to set it on start, use transition.textTween (for example) or append a replacement element and cross-fade opacity (for example).\n     * Text is not interpolated by default because it is usually undesirable.\n     *\n     * @param value A value function which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).\n     * A null value will clear the text content at the start of the transition.\n     */\n    text(value: ValueFn<GElement, Datum, string | number | boolean>): this;\n\n    /**\n     * Returns the current interpolator factory for text, or undefined if no such tween exists.\n     */\n    textTween(): ValueFn<GElement, Datum, (this: GElement, t: number) => string> | undefined;\n    /**\n     * Removes the previously-assigned text tween, if any\n     *\n     * @param factory Use null to remove previously-assigned text tween.\n     */\n    textTween(factory: null): this;\n    /**\n     * Assigns the text tween to the specified interpolator factory.\n     * An interpolator factory is a function that returns an interpolator; when the transition starts, the factory is evaluated for each selected element,\n     * in order, being passed the current datum d and index i, with the this context as the current DOM element.\n     * The returned interpolator will then be invoked for each frame of the transition, in order, being passed the eased time t, typically in the range [0, 1].\n     * Lastly, the return value of the interpolator will be used to set the text.\n     * The interpolator must return a string.\n     *\n     * @param factory An interpolator factory is a function that returns an interpolator; when the transition starts, the factory is evaluated for each selected element,\n     * in order, being passed the current datum d and index i, with the this context as the current DOM element.\n     * The returned interpolator will then be invoked for each frame of the transition, in order, being passed the eased time t, typically in the range [0, 1].\n     * Lastly, the return value of the interpolator will be used to set the text.\n     * The interpolator must return a string.\n     */\n    textTween(factory: ValueFn<GElement, Datum, (this: GElement, t: number) => string>): this;\n\n    /**\n     * For each selected element, removes the element when the transition ends, as long as the element has no other active or pending transitions.\n     * If the element has other active or pending transitions, does nothing.\n     */\n    remove(): this;\n\n    /**\n     * Returns the tween with the specified name, or undefined, if no tween was previously assigned to\n     * that name.\n     *\n     * @param name Name of tween.\n     */\n    tween(name: string): ValueFn<GElement, Datum, (this: GElement, t: number) => void> | undefined;\n    /**\n     * Removes the tween with the specified name, if a tween was previously assigned to\n     * that name.\n     *\n     * @param name Name of tween.\n     * @param tweenFn Use null to remove a previously-assigned tween.\n     */\n    tween(name: string, tweenFn: null): this;\n    /**\n     * For each selected element, assigns the tween with the specified name with the specified value function.\n     * The value must be specified as a function that returns a function.\n     * When the transition starts, the value function is evaluated for each selected element.\n     * The returned function is then invoked for each frame of the transition, in order,\n     * being passed the eased time t, typically in the range [0, 1].\n     *\n     * @param name Name of tween.\n     * @param tweenFn A tween function which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). The tween function returns a function\n     * which takes as its argument eased time t, typically in the range [0, 1] and performs the tweening activities for each transition frame.\n     */\n    tween(name: string, tweenFn: ValueFn<GElement, Datum, (this: GElement, t: number) => void>): this;\n\n    /**\n     * Returns a new transition merging this transition with the specified other transition,\n     * which must have the same id as this transition. The returned transition has the same number of groups,\n     * the same parents, the same name and the same id as this transition.\n     * Any missing (null) elements in this transition are filled with the corresponding element, if present (not null), from the other transition.\n     *\n     * @param other The transition to be merged.\n     */\n    merge(other: Transition<GElement, Datum, PElement, PDatum>): Transition<GElement, Datum, PElement, PDatum>;\n\n    /**\n     * For each selected element, selects only the elements that match the specified filter, and returns a transition on the resulting selection.\n     *\n     * The new transition has the same id, name and timing as this transition; however, if a transition with the same id already exists on a selected element,\n     * the existing transition is returned for that element.\n     *\n     * @param filter A CSS selector string.\n     */\n    filter(filter: string): Transition<GElement, Datum, PElement, PDatum>;\n    /**\n     * For each selected element, selects only the elements that match the specified filter, and returns a transition on the resulting selection.\n     *\n     * The new transition has the same id, name and timing as this transition; however, if a transition with the same id already exists on a selected element,\n     * the existing transition is returned for that element.\n     *\n     * The generic refers to the type of element which will be selected after applying the filter, i.e. if the element types\n     * contained in a pre-filter selection are narrowed to a subset as part of the filtering.\n     *\n     * @param filter A CSS selector string.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    filter<FilteredElement extends BaseType>(filter: string): Transition<FilteredElement, Datum, PElement, PDatum>;\n    /**\n     * For each selected element, selects only the elements that match the specified filter, and returns a transition on the resulting selection.\n     *\n     * The new transition has the same id, name and timing as this transition; however, if a transition with the same id already exists on a selected element,\n     * the existing transition is returned for that element.\n     *\n     * @param filter A filter function which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). The filter function returns a boolean indicating,\n     * whether the selected element matches.\n     */\n    filter(filter: ValueFn<GElement, Datum, boolean>): Transition<GElement, Datum, PElement, PDatum>;\n    /**\n     * For each selected element, selects only the elements that match the specified filter, and returns a transition on the resulting selection.\n     *\n     * The new transition has the same id, name and timing as this transition; however, if a transition with the same id already exists on a selected element,\n     * the existing transition is returned for that element.\n     *\n     * The generic refers to the type of element which will be selected after applying the filter, i.e. if the element types\n     * contained in a pre-filter selection are narrowed to a subset as part of the filtering.\n     *\n     * @param filter A filter function which is evaluated for each selected element, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). The filter function returns a boolean indicating,\n     * whether the selected element matches.\n     */\n    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n    filter<FilteredElement extends BaseType>(\n        filter: ValueFn<GElement, Datum, boolean>,\n    ): Transition<FilteredElement, Datum, PElement, PDatum>;\n\n    // Event Handling -------------------\n\n    /**\n     * Return the currently-assigned listener for the specified event typename on the first (non-null) selected element, if any.\n     * If multiple typenames are specified, the first matching listener is returned.\n     *\n     * @param typenames The typenames is one of the following string event types: start (when the transition starts), end (when the transition ends),\n     * interrupt (when the transition is interrupted), cancel(when the transition is cancelled).\n     * Note that these are not native DOM events. The type may be optionally followed by a period (.) and a name;\n     * the optional name allows multiple callbacks to be registered to receive events of the same type, such as \"start.foo\"\" and \"start.bar\".\n     * To specify multiple typenames, separate typenames with spaces, such as \"interrupt end\"\" or \"start.foo start.bar\".\n     */\n    on(typenames: string): ValueFn<GElement, Datum, void> | undefined;\n    /**\n     * Remove all listeners for a given name.\n     *\n     * @param typenames Name of the event type for which the listener should be removed. To remove all listeners for a given name use \".foo\"\n     * as the typename, where foo is the name; to remove all listeners with no name, specify \".\" as the typename.\n     * @param listener Use null to remove listeners.\n     */\n    on(typenames: string, listener: null): this;\n    /**\n     * Add a listener to each selected element for the specified event typenames.\n     *\n     * When a specified transition event is dispatched on a selected node, the specified listener will be invoked for each transitioning element.\n     * Listeners always see the latest datum for their element, but the index is a property of the selection and is fixed when the listener is assigned;\n     * to update the index, re-assign the listener.\n     *\n     * @param typenames The typenames is one of the following string event types: start (when the transition starts), end (when the transition ends),\n     * interrupt (when the transition is interrupted), cancel(when the transition is cancelled).\n     * Note that these are not native DOM events. The type may be optionally followed by a period (.) and a name;\n     * the optional name allows multiple callbacks to be registered to receive events of the same type, such as \"start.foo\"\" and \"start.bar\".\n     * To specify multiple typenames, separate typenames with spaces, such as \"interrupt end\"\" or \"start.foo start.bar\".\n     * @param listener A listener function which will be evaluated for each selected element, being passed the current datum (d), the current index (i),\n     * and the current group (nodes), with this as the current DOM element (nodes[i]). Listeners always see the latest datum for their element,\n     * but the index is a property of the selection and is fixed when the listener is assigned; to update the index, re-assign the listener.\n     */\n    on(typenames: string, listener: ValueFn<GElement, Datum, void>): this;\n\n    /**\n     * Returns a promise that resolves when every selected element finishes transitioning. If any element’s transition is cancelled or interrupted, the promise rejects.\n     */\n    end(): Promise<void>;\n\n    // Control Flow ----------------------\n\n    /**\n     * Invoke the specified function for each selected element, passing the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).\n     * This method can be used to invoke arbitrary code for each selected element, and is useful for creating a context to access parent and child data simultaneously.\n     *\n     * @param func A function which is invoked for each selected element,\n     *             being passed the current datum (d), the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).\n     */\n    each(func: ValueFn<GElement, Datum, void>): this;\n\n    /**\n     * Invoke the specified function exactly once, passing in this transition along with any optional arguments.\n     * Returns this transition.\n     *\n     * @param func A function which is passed this transition as the first argument along with any optional arguments.\n     * @param args List of optional arguments to be passed to the callback function.\n     */\n    call(\n        func: (transition: Transition<GElement, Datum, PElement, PDatum>, ...args: any[]) => any,\n        ...args: any[]\n    ): this;\n\n    /**\n     * Return true if this transition contains no (non-null) elements.\n     */\n    empty(): boolean;\n\n    /**\n     * Return the first (non-null) element in this transition. If the transition is empty, returns null.\n     */\n    node(): GElement | null;\n\n    /**\n     * Return an array of all (non-null) elements in this transition.\n     */\n    nodes(): GElement[];\n\n    /**\n     * Returns the total number of elements in this transition.\n     */\n    size(): number;\n\n    // Transition Configuration ----------------------\n\n    /**\n     * Returns the current value of the delay for the first (non-null) element in the transition.\n     * This is generally useful only if you know that the transition contains exactly one element.\n     */\n    delay(): number;\n    /**\n     * For each selected element, sets the transition delay to the specified value in milliseconds.\n     * If a delay is not specified, it defaults to zero.\n     *\n     * @param milliseconds Number of milliseconds for the delay.\n     */\n    delay(milliseconds: number): this;\n    /**\n     * For each selected element, sets the transition delay to the value in milliseconds returned by the\n     * value function.\n     *\n     * @param milliseconds A value function which is evaluated for each selected element, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). The return value is a number\n     * specifying the delay in milliseconds.\n     */\n    delay(milliseconds: ValueFn<GElement, Datum, number>): this;\n\n    /**\n     * Returns the current value of the duration for the first (non-null) element in the transition.\n     * This is generally useful only if you know that the transition contains exactly one element.\n     */\n    duration(): number;\n    /**\n     * For each selected element, sets the transition duration to the specified value in milliseconds.\n     * If a duration is not specified, it defaults to 250ms.\n     *\n     * @param duration Number of milliseconds for the duration.\n     */\n    duration(milliseconds: number): this;\n    /**\n     * For each selected element, sets the transition duration to the value in milliseconds returned by the\n     * value function.\n     *\n     * @param milliseconds A value function which is evaluated for each selected element, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). The return value is a number\n     * specifying the duration in milliseconds.\n     */\n    duration(milliseconds: ValueFn<GElement, Datum, number>): this;\n\n    /**\n     * Returns the current easing function for the first (non-null) element in the transition.\n     * This is generally useful only if you know that the transition contains exactly one element.\n     */\n    ease(): (normalizedTime: number) => number;\n    /**\n     * Specifies the transition easing function for all selected elements. The value must be specified as a function.\n     * The easing function is invoked for each frame of the animation, being passed the normalized time t in the range [0, 1];\n     * it must then return the eased time tʹ which is typically also in the range [0, 1].\n     * A good easing function should return 0 if t = 0 and 1 if t = 1. If an easing function is not specified,\n     * it defaults to d3.easeCubic.\n     *\n     * @param easingFn An easing function which is passed the normalized time t in the range [0, 1];\n     * it must then return the eased time tʹ which is typically also in the range [0, 1].\n     * A good easing function should return 0 if t = 0 and 1 if t = 1.\n     */\n    ease(easingFn: (normalizedTime: number) => number): this;\n\n    /**\n     * Specifies a factory for the transition easing function.\n     *\n     * @param factory The factory must be a function.\n     * It is invoked for each node of the selection, being passed the current datum (d), the current index (i), and the current group (nodes), with this as the current DOM element.\n     * It must return an easing function.\n     */\n    easeVarying(factory: ValueFn<GElement, Datum, (normalizedTime: number) => number>): this;\n}\n\n/**\n * Represents the union of the Selection and Transition types for any usages that operate on both.\n * Typically used for functions which take in either a selection or transition and set or update attributes.\n */\nexport type SelectionOrTransition<GElement extends BaseType, Datum, PElement extends BaseType, PDatum> =\n    | Selection<GElement, Datum, PElement, PDatum>\n    | Transition<GElement, Datum, PElement, PDatum>;\n\n/**\n * Returns a new transition with the specified name. If a name is not specified, null is used.\n * The new transition is only exclusive with other transitions of the same name.\n *\n * The generic \"OldDatum\" refers to the type of a previously-set datum of the selected element in the Transition.\n *\n * @param name Name of the transition.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function transition<OldDatum>(name?: string): Transition<BaseType, OldDatum, null, undefined>;\n\n/**\n * Returns a new transition from an existing transition.\n *\n * When using a transition instance, the returned transition has the same id and name as the specified transition.\n *\n * The generic \"OldDatum\" refers to the type of a previously-set datum of the selected element in the Transition.\n *\n * @param transition A transition instance.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function transition<OldDatum>(\n    transition: Transition<BaseType, any, BaseType, any>,\n): Transition<BaseType, OldDatum, null, undefined>;\n\n// Types from d3-zoom\n// Last module patch version validated against: 3.0.0\n\n// --------------------------------------------------------------------------\n// Shared Type Definitions and Interfaces\n// --------------------------------------------------------------------------\n\n/**\n * ZoomedElementBaseType serves as an alias for the 'minimal' data type which can be selected\n * without 'd3-zoom' (and related code in 'd3-selection') trying to use properties internally which would otherwise not\n * be supported.\n */\nexport type ZoomedElementBaseType = Element;\n\n/**\n * Minimal interface for a continuous scale.\n * This interface is used as a minimum contract for scale objects\n * that  can be passed into zoomTransform methods rescaleX and rescaleY\n */\nexport interface ZoomScale {\n    domain(): number[] | Date[];\n    domain(domain: Array<Date | number>): this;\n    range(): number[];\n    range(range: number[]): this;\n    copy(): ZoomScale;\n    invert(value: number): number | Date;\n}\n\n// --------------------------------------------------------------------------\n// Zoom Behavior\n// --------------------------------------------------------------------------\n\n/**\n * A D3 Zoom Behavior\n *\n * The first generic refers to the type of reference element to which the zoom behavior is attached.\n * The second generic refers to the type of the datum of the reference element.\n */\nexport interface ZoomBehavior<ZoomRefElement extends ZoomedElementBaseType, Datum> extends Function {\n    /**\n     * Applies this zoom behavior to the specified selection, binding the necessary event listeners to\n     * allow panning and zooming, and initializing the zoom transform on each selected element to the identity transform if not already defined. This function is typically not invoked directly,\n     * and is instead invoked via selection.call.\n     *\n     * For details see: {@link https://github.com/d3/d3-zoom#_zoom}\n     *\n     * @param selection A D3 selection of elements.\n     * @param args Optional arguments to be passed in.\n     */\n    (selection: Selection<ZoomRefElement, Datum, any, any>, ...args: any[]): void;\n    /**\n     * If selection is a selection, sets the current zoom transform of the selected elements to the specified transform, instantaneously emitting start, zoom and end events.\n     * If selection is a transition, defines a “zoom” tween to the specified transform using d3.interpolateZoom, emitting a start event when the transition starts,\n     * zoom events for each tick of the transition, and then an end event when the transition ends (or is interrupted).\n     * The transition will attempt to minimize the visual movement around the specified point; if the point is not specified, it defaults to the center of the viewport extent.\n     *\n     * This function is typically not invoked directly, and is instead invoked via selection.call or transition.call.\n     *\n     * @param selection A selection or a transition.\n     * @param transform A zoom transform or a function that returns a zoom transform.\n     * If a function, it is invoked for each selected element, being passed the current event (event) and datum d, with the this context as the current DOM element.\n     * @param point A two-element array [x, y] or a function that returns such an array.\n     * If a function, it is invoked for each selected element, being passed the current event (event) and datum d, with the this context as the current DOM element.\n     */\n    transform(\n        selection: Selection<ZoomRefElement, Datum, any, any> | TransitionLike<ZoomRefElement, Datum>,\n        transform: ZoomTransform | ((this: ZoomRefElement, event: any, d: Datum) => ZoomTransform),\n        point?: [number, number] | ((this: ZoomRefElement, event: any, d: Datum) => [number, number]),\n    ): void;\n\n    /**\n     * If selection is a selection, translates the current zoom transform of the selected elements by x and y, such that the new tx1 = tx0 + kx and ty1 = ty0 + ky.\n     * If selection is a transition, defines a “zoom” tween translating the current transform.\n     * This method is a convenience method for zoom.transform.\n     *\n     * @param selection A selection or a transition.\n     * @param x A number or a function that returns a number.\n     * If a function, it is invoked for each selected element, being passed the current datum d and index i, with the this context as the current DOM element.\n     * @param y A number or a function that returns a number.\n     * If a function, it is invoked for each selected element, being passed the current datum d and index i, with the this context as the current DOM element.\n     */\n    translateBy(\n        selection: Selection<ZoomRefElement, Datum, any, any> | TransitionLike<ZoomRefElement, Datum>,\n        x: number | ValueFn<ZoomRefElement, Datum, number>,\n        y: number | ValueFn<ZoomRefElement, Datum, number>,\n    ): void;\n\n    /**\n     * If selection is a selection, translates the current zoom transform of the selected elements such that the given position ⟨x,y⟩ appears at given point p.\n     * The new tx = px - kx and ty = py - ky. If p is not specified, it defaults to the center of the viewport extent.\n     * If selection is a transition, defines a “zoom” tween translating the current transform. This method is a convenience method for zoom.transform.\n     *\n     * Translates the current zoom transform of the selected elements such that the specified position ⟨x,y⟩ appears at the center of the viewport extent.\n     * The new tx = cx - kx and ty = cy - ky, where ⟨cx,cy⟩ is the center.\n     *\n     * x is provided as a constant for all elements.\n     * y is provided as a constant for all elements.\n     *\n     * @param selection A selection or a transition.\n     * @param x A number or a function that returns a number.\n     * If a function, it is invoked for each selected element, being passed the current datum d and index i, with the this context as the current DOM element.\n     * @param y A number or a function that returns a number.\n     * If a function, it is invoked for each selected element, being passed the current datum d and index i, with the this context as the current DOM element.\n     * @param p A two-element array [px,py] or a function\n     * If a function, it is invoked for each selected element, being passed the current datum d and index i, with the this context as the current DOM element.\n     */\n    translateTo(\n        selection: Selection<ZoomRefElement, Datum, any, any> | TransitionLike<ZoomRefElement, Datum>,\n        x: number | ValueFn<ZoomRefElement, Datum, number>,\n        y: number | ValueFn<ZoomRefElement, Datum, number>,\n        p?: [number, number] | ValueFn<ZoomRefElement, Datum, [number, number]>,\n    ): void;\n\n    /**\n     * If selection is a selection, scales the current zoom transform of the selected elements by k, such that the new k₁ = k₀k.\n     * The reference point p does move.\n     * If p is not specified, it defaults to the center of the viewport extent.\n     * If selection is a transition, defines a “zoom” tween translating the current transform.\n     * This method is a convenience method for zoom.transform.\n     *\n     * @param selection A selection or a transition.\n     * @param k Scale factor. A number or a function that returns a number.\n     * If a function, it is invoked for each selected element, being passed the current datum d and index i, with the this context as the current DOM element.\n     * @param p A two-element array [px,py] or a function.\n     * If a function, it is invoked for each selected element, being passed the current datum d and index i, with the this context as the current DOM element.\n     */\n    scaleBy(\n        selection: Selection<ZoomRefElement, Datum, any, any> | TransitionLike<ZoomRefElement, Datum>,\n        k: number | ValueFn<ZoomRefElement, Datum, number>,\n        p?: [number, number] | ValueFn<ZoomRefElement, Datum, [number, number]>,\n    ): void;\n\n    /**\n     * If selection is a selection, scales the current zoom transform of the selected elements to k, such that the new k₁ = k.\n     * The reference point p does move.\n     * If p is not specified, it defaults to the center of the viewport extent.\n     * If selection is a transition, defines a “zoom” tween translating the current transform.\n     * This method is a convenience method for zoom.transform.\n     *\n     * @param selection: A selection or a transition.\n     * @param k Scale factor. A number or a function that returns a number.\n     * If a function, it is invoked for each selected element, being passed the current datum d and index i, with the this context as the current DOM element.\n     * @param p A two-element array [px,py] or a function.\n     * If a function, it is invoked for each selected element, being passed the current datum d and index i, with the this context as the current DOM element.\n     */\n    scaleTo(\n        selection: Selection<ZoomRefElement, Datum, any, any> | TransitionLike<ZoomRefElement, Datum>,\n        k: number | ValueFn<ZoomRefElement, Datum, number>,\n        p?: [number, number],\n    ): void;\n\n    /**\n     * Returns the current constraint function.\n     * The default implementation attempts to ensure that the viewport extent does not go outside the translate extent.\n     */\n    constrain(): (\n        transform: ZoomTransform,\n        extent: [[number, number], [number, number]],\n        translateExtent: [[number, number], [number, number]],\n    ) => ZoomTransform;\n    /**\n     * Sets the transform constraint function to the specified function and returns the zoom behavior.\n     *\n     * @param constraint A constraint function which returns a transform given the current transform, viewport extent and translate extent.\n     * The default implementation attempts to ensure that the viewport extent does not go outside the translate extent.\n     */\n    constrain(\n        constraint: (\n            transform: ZoomTransform,\n            extent: [[number, number], [number, number]],\n            translateExtent: [[number, number], [number, number]],\n        ) => ZoomTransform,\n    ): this;\n\n    /**\n     * Returns the current filter function.\n     */\n    filter(): (this: ZoomRefElement, event: any, datum: Datum) => boolean;\n    /**\n     * Sets the filter to the specified filter function and returns the zoom behavior.\n     * The filter function is invoked in the zoom initiating event handlers of each element to which the zoom behavior was applied.\n     *\n     * If the filter returns falsey, the initiating event is ignored and no zoom gesture is started.\n     * Thus, the filter determines which input events are ignored. The default filter ignores mousedown events on secondary buttons,\n     * since those buttons are typically intended for other purposes, such as the context menu.\n     *\n     * @param filter A filter function which is invoked in the zoom initiating event handlers of each element to which the zoom behavior was applied,\n     * in order, being passed the current event (event) and datum d, with the this context as the current DOM element.\n     * The function returns a boolean value.\n     */\n    filter(filter: (this: ZoomRefElement, event: any, datum: Datum) => boolean): this;\n\n    /**\n     * Returns the current touch support detector, which defaults to a function returning true,\n     * if the \"ontouchstart\" event is supported on the current element.\n     */\n    touchable(): ValueFn<ZoomRefElement, Datum, boolean>;\n    /**\n     * Sets the touch support detector to the specified boolean value and returns the zoom behavior.\n     *\n     * Touch event listeners are only registered if the detector returns truthy for the corresponding element when the zoom behavior is applied.\n     * The default detector works well for most browsers that are capable of touch input, but not all; Chrome’s mobile device emulator, for example,\n     * fails detection.\n     *\n     * @param touchable A boolean value. true when touch event listeners should be applied to the corresponding element, otherwise false.\n     */\n    touchable(touchable: boolean): this;\n    /**\n     * Sets the touch support detector to the specified function and returns the zoom behavior.\n     *\n     * Touch event listeners are only registered if the detector returns truthy for the corresponding element when the zoom behavior is applied.\n     * The default detector works well for most browsers that are capable of touch input, but not all; Chrome’s mobile device emulator, for example,\n     * fails detection.\n     *\n     * @param touchable A touch support detector function, which returns true when touch event listeners should be applied to the corresponding element.\n     * The function is evaluated for each selected element to which the zoom behavior was applied, in order, being passed the current datum (d),\n     * the current index (i), and the current group (nodes), with this as the current DOM element. The function returns a boolean value.\n     */\n    touchable(touchable: ValueFn<ZoomRefElement, Datum, boolean>): this;\n\n    /**\n     * Returns the current wheelDelta function.\n     */\n    wheelDelta(): ValueFn<ZoomRefElement, Datum, number>;\n    /**\n     * Sets the wheel delta function to the specified function and returns the zoom behavior. The wheel delta function which is invoked in the wheel event handler\n     * of each element to which the zoom behavior was applied.\n     * The value Δ returned by the wheel delta function determines the amount of scaling applied in response to a WheelEvent.\n     * The scale factor transform.k is multiplied by 2Δ; for example, a Δ of +1 doubles the scale factor, Δ of -1 halves the scale factor.\n     *\n     * @param delta Wheel delta function which is invoked in the wheel event handler of each element to which the zoom behavior was applied,\n     * in order, being passed the wheel event that triggered the handler,\n     * with this as the current DOM element. The function returns a numeric value.\n     */\n    wheelDelta(delta: ((event: WheelEvent) => number) | number): this;\n\n    /**\n     * Return the current extent accessor, which defaults to [[0, 0], [width, height]] where width is the client width of the element and height is its client height;\n     * for SVG elements, the nearest ancestor SVG element’s width and height is used. In this case,\n     * the owner SVG element must have defined width and height attributes rather than (for example) relying on CSS properties or the viewBox attribute;\n     * SVG provides no programmatic method for retrieving the initial viewport size. Alternatively, consider using element.getBoundingClientRect.\n     * (In Firefox, element.clientWidth and element.clientHeight is zero for SVG elements!)\n     */\n    extent(): (this: ZoomRefElement, datum: Datum) => [[number, number], [number, number]];\n    /**\n     * Set the viewport extent to the specified array of points [[x0, y0], [x1, y1]],\n     * where [x0, y0] is the top-left corner of the viewport and [x1, y1] is the bottom-right corner of the viewport,\n     * and return this zoom behavior.\n     *\n     * The viewport extent affects several functions: the center of the viewport remains fixed during changes by zoom.scaleBy and zoom.scaleTo;\n     * the viewport center and dimensions affect the path chosen by d3.interpolateZoom; and the viewport extent is needed to enforce the optional translate extent.\n     *\n     * @param extent An extent specified as an array of two coordinates.\n     */\n    extent(extent: [[number, number], [number, number]]): this;\n    /**\n     * Set the viewport extent to the array of points [[x0, y0], [x1, y1]] returned by the\n     * extent accessor function, and return this zoom behavior.\n     * The extent accessor function is evaluated for each element.\n     *\n     * [x0, y0] is the top-left corner of the viewport and [x1, y1] is the bottom-right corner of the viewport.\n     *\n     * The viewport extent affects several functions: the center of the viewport remains fixed during changes by zoom.scaleBy and zoom.scaleTo;\n     * the viewport center and dimensions affect the path chosen by d3.interpolateZoom; and the viewport extent is needed to enforce the optional translate extent.\n     *\n     * The default is [[0, 0], [width, height]] where width is the client width of the element and height is its client height;\n     * for SVG elements, the nearest ancestor SVG element’s width and height is used.\n     * In this case, the owner SVG element must have defined width and height attributes rather than (for example) relying on CSS properties or the viewBox attribute;\n     * SVG provides no programmatic method for retrieving the initial viewport size. Alternatively, consider using element.getBoundingClientRect.\n     * (In Firefox, element.clientWidth and element.clientHeight is zero for SVG elements!)\n     *\n     * @param extent An extent accessor function which is evaluated for each selected element, being passed the current datum d, with the this context as the current DOM element.\n     * The function returns the extent array.\n     */\n    extent(extent: (this: ZoomRefElement, datum: Datum) => [[number, number], [number, number]]): this;\n\n    /**\n     * Return the current scale extent.\n     */\n    scaleExtent(): [number, number];\n    /**\n     * Set the scale extent to the specified array of numbers [k0, k1] where k0 is the minimum allowed scale factor and k1 is the maximum allowed scale factor,\n     * and return this zoom behavior.\n     *\n     * The scale extent restricts zooming in and out. It is enforced on interaction and when using zoom.scaleBy, zoom.scaleTo and zoom.translateBy;\n     * however, it is not enforced when using zoom.transform to set the transform explicitly.\n     *\n     * The default scale extent is [0, infinity].\n     *\n     * If the user tries to zoom by wheeling when already at the corresponding limit of the scale extent, the wheel events will be ignored and not initiate a zoom gesture.\n     * This allows the user to scroll down past a zoomable area after zooming in, or to scroll up after zooming out.\n     * If you would prefer to always prevent scrolling on wheel input regardless of the scale extent, register a wheel event listener to prevent the browser default behavior\n     *\n     * @param extent A scale extent array of two numbers representing the scale boundaries.\n     */\n    scaleExtent(extent: [number, number]): this;\n\n    /**\n     * Return the current translate extent.\n     */\n    translateExtent(): [[number, number], [number, number]];\n    /**\n     * Set the translate extent to the specified array of points [[x0, y0], [x1, y1]], where [x0, y0] is the top-left corner of the world and [x1, y1]\n     * is the bottom-right corner of the world, and return this zoom behavior.\n     *\n     * The translate extent restricts panning, and may cause translation on zoom out. It is enforced on interaction and when using zoom.scaleBy, zoom.scaleTo and zoom.translateBy;\n     * however, it is not enforced when using zoom.transform to set the transform explicitly.\n     *\n     * The default scale extent is [[-infinity, infinity], [-infinity, infinity]].\n     *\n     * @param extent A translate extent array, i.e. an array of two arrays, each representing a point.\n     */\n    translateExtent(extent: [[number, number], [number, number]]): this;\n\n    /**\n     * Return the current click distance threshold, which defaults to zero.\n     */\n    clickDistance(): number;\n    /**\n     * Set the maximum distance that the mouse can move between mousedown and mouseup that will trigger\n     * a subsequent click event. If at any point between mousedown and mouseup the mouse is greater than or equal to\n     * distance from its position on mousedown, the click event following mouseup will be suppressed.\n     *\n     * @param distance The distance threshold between mousedown and mouseup measured in client coordinates (event.clientX and event.clientY).\n     * The default is zero.\n     */\n    clickDistance(distance: number): this;\n\n    /**\n     * Return the current tap distance threshold, which defaults to 10.\n     */\n    tapDistance(): number;\n    /**\n     * Sets the maximum distance that a double-tap gesture can move between first touchstart and second touchend that will trigger a subsequent double-click event.\n     *\n     * @param distance The distance threshold between mousedown and mouseup measured in client coordinates (event.clientX and event.clientY).\n     * The default is 10.\n     */\n    tapDistance(distance: number): this;\n\n    /**\n     * Get the duration for zoom transitions on double-click and double-tap in milliseconds.\n     */\n    duration(): number;\n    /**\n     * Set the duration for zoom transitions on double-click and double-tap to the specified number of milliseconds and returns the zoom behavior.\n     *\n     * To disable double-click and double-tap transitions, you can remove the zoom behavior’s dblclick event listener after applying the zoom behavior to the selection.\n     *\n     * @param duration in milliseconds.\n     */\n    duration(duration: number): this;\n\n    /**\n     * Returns the current interpolation factory, which defaults to d3.interpolateZoom to implement smooth zooming.\n     */\n    interpolate<\n        // eslint-disable-next-line @definitelytyped/no-unnecessary-generics\n        InterpolationFactory extends (a: ZoomView, b: ZoomView) => (t: number) => ZoomView,\n    >(): InterpolationFactory;\n\n    /**\n     * Sets the interpolation factory for zoom transitions to the specified function.\n     * Use the default d3.interpolateZoom to implement smooth zooming.\n     * To apply direct interpolation between two views, try d3.interpolate instead.\n     *\n     * Each view is defined as an array of three numbers: cx, cy and width. The first two coordinates cx, cy represent the center of the viewport;\n     * the last coordinate width represents the size of the viewport.\n     *\n     * @param interpolatorFactory An interpolator factory to be used to generate interpolators between zooms for transitions.\n     */\n    interpolate(interpolatorFactory: (a: ZoomView, b: ZoomView) => (t: number) => ZoomView): this;\n\n    /**\n     * Return the first currently-assigned listener matching the specified typenames, if any.\n     *\n     * @param typenames The typenames is a string containing one or more typename separated by whitespace.\n     * Each typename is a type, optionally followed by a period (.) and a name, such as \"drag.foo\"\" and \"drag.bar\";\n     * the name allows multiple listeners to be registered for the same type. The type must be one of the following:\n     * start (after zooming begins [such as mousedown]), zoom (after a change to the zoom  transform [such as mousemove], or\n     * end (after an active pointer becomes inactive [such as on mouseup].)\n     */\n    on(typenames: string): ((this: ZoomRefElement, event: any, d: Datum) => void) | undefined;\n    /**\n     * Remove the current event listeners for the specified typenames, if any, return the drag behavior.\n     *\n     * @param typenames The typenames is a string containing one or more typename separated by whitespace.\n     * Each typename is a type, optionally followed by a period (.) and a name, such as \"drag.foo\"\" and \"drag.bar\";\n     * the name allows multiple listeners to be registered for the same type. The type must be one of the following:\n     * start (after zooming begins [such as mousedown]), zoom (after a change to the zoom  transform [such as mousemove], or\n     * end (after an active pointer becomes inactive [such as on mouseup].)\n     * @param listener Use null to remove the listener.\n     */\n    on(typenames: string, listener: null): this;\n    /**\n     * Set the event listener for the specified typenames and return the zoom behavior.\n     * If an event listener was already registered for the same type and name,\n     * the existing listener is removed before the new listener is added.\n     * When a specified event is dispatched, each listener will be invoked with the same context and arguments as selection.on listeners.\n     *\n     * @param typenames The typenames is a string containing one or more typename separated by whitespace.\n     * Each typename is a type, optionally followed by a period (.) and a name, such as \"drag.foo\"\" and \"drag.bar\";\n     * the name allows multiple listeners to be registered for the same type. The type must be one of the following:\n     * start (after zooming begins [such as mousedown]), zoom (after a change to the zoom  transform [such as mousemove], or\n     * end (after an active pointer becomes inactive [such as on mouseup].)\n     * @param listener An event listener function which is evaluated for each selected element,\n     * in order, being passed the current event (event) and datum d, with the this context as the current DOM element.\n     */\n    on(typenames: string, listener: (this: ZoomRefElement, event: any, d: Datum) => void): this;\n}\n\n/**\n * Creates a new zoom behavior. The returned behavior, zoom, is both an object and a function,\n * and is typically applied to selected elements via selection.call.\n *\n * The first generic refers to the type of reference element to which the zoom behavior is attached.\n * The second generic refers to the type of the datum of the reference element.\n */\n// eslint-disable-next-line @definitelytyped/no-unnecessary-generics\nexport function zoom<ZoomRefElement extends ZoomedElementBaseType, Datum>(): ZoomBehavior<ZoomRefElement, Datum>;\n\n// --------------------------------------------------------------------------\n// Zoom Event\n// --------------------------------------------------------------------------\n\n/**\n * A D3 Zoom Event\n *\n * The first generic refers to the type of reference element to which the zoom behavior is attached.\n * The second generic refers to the type of the datum of the reference element.\n */\nexport interface D3ZoomEvent<ZoomRefElement extends ZoomedElementBaseType, Datum> {\n    /**\n     * The ZoomBehavior associated with the event\n     */\n    target: ZoomBehavior<ZoomRefElement, Datum>;\n    /**\n     * The event type for the zoom event\n     */\n    type: \"start\" | \"zoom\" | \"end\" | string; // Leave failsafe string type for cases like 'zoom.foo'\n    /**\n     * The current zoom transform\n     */\n    transform: ZoomTransform;\n    /**\n     * The underlying input event, such as mousemove or touchmove.\n     */\n    sourceEvent: any;\n}\n\n// --------------------------------------------------------------------------\n// Zoom Transforms\n// --------------------------------------------------------------------------\n\n/**\n * A zoom transform\n *\n * The zoom behavior stores the zoom state on the element to which the zoom behavior was applied, not on the zoom behavior itself.\n * This is because the zoom behavior can be applied to many elements simultaneously, and each element can be zoomed independently.\n * The zoom state can change either on user interaction or programmatically via zoom.transform.\n *\n * To retrieve the zoom state, use event.transform on the current zoom event within a zoom event listener (see zoom.on), or use d3.zoomTransform for a given node.\n * The latter is particularly useful for modifying the zoom state programmatically,\n * say to implement buttons for zooming in and out.\n *\n * For details see {@link https://github.com/d3/d3-zoom#zoom-transforms}\n */\nexport class ZoomTransform {\n    /**\n     * Returns a transform with scale k and translation (x, y).\n     */\n    constructor(k: number, x: number, y: number);\n\n    /**\n     * The translation amount tx along the x-axis.\n     * This property should be considered read-only; instead of mutating a transform,\n     * use transform.scale and transform.translate to derive a new transform.\n     * Also see zoom.scaleBy, zoom.scaleTo and zoom.translateBy for convenience methods on the zoom behavior.\n     */\n    readonly x: number;\n\n    /**\n     * The translation amount ty along the y-axis\n     * This property should be considered read-only; instead of mutating a transform,\n     * use transform.scale and transform.translate to derive a new transform.\n     * Also see zoom.scaleBy, zoom.scaleTo and zoom.translateBy for convenience methods on the zoom behavior.\n     */\n    readonly y: number;\n\n    /**\n     * The scale factor k.\n     * This property should be considered read-only; instead of mutating a transform,\n     * use transform.scale and transform.translate to derive a new transform.\n     * Also see zoom.scaleBy, zoom.scaleTo and zoom.translateBy for convenience methods on the zoom behavior.\n     */\n    readonly k: number;\n\n    /**\n     * Return the transformation of the specified point which is a two-element array of numbers [x, y].\n     * The returned point is equal to [xk + tx, yk + ty].\n     *\n     * @param point Point coordinates [x, y]\n     */\n    apply(point: [number, number]): [number, number];\n\n    /**\n     * Return the transformation of the specified x-coordinate, xk + tx.\n     *\n     * @param x Value of x-coordinate.\n     */\n    applyX(x: number): number;\n\n    /**\n     * Return the transformation of the specified y-coordinate, yk + ty.\n     *\n     * @param y Value of y-coordinate.\n     */\n    applyY(y: number): number;\n\n    /**\n     * Return the inverse transformation of the specified point which is a two-element array of numbers [x, y].\n     * The returned point is equal to [(x - tx) / k, (y - ty) / k].\n     *\n     * @param point Point coordinates [x, y]\n     */\n    invert(point: [number, number]): [number, number];\n\n    /**\n     * Return the inverse transformation of the specified x-coordinate, (x - tx) / k.\n     *\n     * @param x Value of x-coordinate.\n     */\n    invertX(x: number): number;\n\n    /**\n     * Return the inverse transformation of the specified y-coordinate, (y - ty) / k.\n     *\n     * @param y Value of y-coordinate.\n     */\n    invertY(y: number): number;\n\n    /**\n     * Returns a copy of the continuous scale x whose domain is transformed.\n     * This is implemented by first applying the inverse x-transform on the scale’s range,\n     * and then applying the inverse scale to compute the corresponding domain\n     *\n     * The scale x must use d3.interpolateNumber; do not use continuous.rangeRound as this\n     * reduces the accuracy of continuous.invert and can lead to an inaccurate rescaled domain.\n     * This method does not modify the input scale x; x thus represents the untransformed scale,\n     * while the returned scale represents its transformed view.\n     *\n     * @param xScale A continuous scale for x-dimension.\n     */\n    rescaleX<S extends ZoomScale>(xScale: S): S;\n\n    /**\n     * Returns a copy of the continuous scale y whose domain is transformed.\n     * This is implemented by first applying the inverse y-transform on the scale’s range,\n     * and then applying the inverse scale to compute the corresponding domain\n     *\n     * The scale y must use d3.interpolateNumber; do not use continuous.rangeRound as this\n     * reduces the accuracy of continuous.invert and can lead to an inaccurate rescaled domain.\n     * This method does not modify the input scale x; x thus represents the untransformed scale,\n     * while the returned scale represents its transformed view.\n     *\n     * @param yScale A continuous scale for y-dimension.\n     */\n    rescaleY<S extends ZoomScale>(yScale: S): S;\n\n    /**\n     * Return a transform whose scale k1 is equal to k0 × k, where k0 is this transform’s scale.\n     *\n     * @param k A scale factor.\n     */\n    scale(k: number): ZoomTransform;\n\n    /**\n     * Return a string representing the SVG transform corresponding to this transform.\n     */\n    toString(): string;\n\n    /**\n     * Returns a transform whose translation tx1 and ty1 is equal to tx0 + tkx and ty0 + tky,\n     * where tx0 and ty0 is this transform’s translation and tk is this transform’s scale.\n     *\n     * @param x Amount of translation in x-direction.\n     * @param y Amount of translation in y-direction.\n     */\n    translate(x: number, y: number): ZoomTransform;\n}\n\n/**\n * Returns the current transform for the specified node. Note that node should typically be a DOM element, and not a selection.\n * (A selection may consist of multiple nodes, in different states, and this function only returns a single transform.) If you have a selection, call selection.node first.\n * In the context of an event listener, the node is typically the element that received the input event (which should be equal to event.transform), \"this\".\n * Internally, an element’s transform is stored as element.__zoom; however, you should use this method rather than accessing it directly.\n * If the given node has no defined transform, returns the identity transformation.\n * The returned transform represents a two-dimensional transformation matrix\n *\n * For details see {@link https://github.com/d3/d3-zoom#zoom-transforms}\n *\n * @param node An element for which to retrieve its current zoom transform.\n */\nexport function zoomTransform(node: ZoomedElementBaseType): ZoomTransform;\n\n/**\n * The identity transform, where k = 1, tx = ty = 0.\n */\nexport const zoomIdentity: ZoomTransform;\n\n// Types from d3-sankey\n// Last module patch version validated against: 0.12\n\n/**\n * A helper interface as an extension reference for user-provided properties of\n * nodes and links in the graph, which are not required or calculated by\n * the Sankey layout Generator\n */\nexport interface SankeyExtraProperties {\n    [key: string]: any;\n}\n\n/**\n * Helper interface to define the properties of Sankey Nodes. Calculated properties may only be defined,\n * once the layout(...) method of the Sankey layout generator has been invoked.\n *\n * The first generic N refers to user-defined properties contained in the node data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyNodeMinimal interface.\n *\n * The second generic L refers to user-defined properties contained in the link data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyLinkMinimal interface.\n */\nexport interface SankeyNodeMinimal<N extends SankeyExtraProperties, L extends SankeyExtraProperties> {\n    /**\n     * Array of outgoing links which have this node as their source.\n     * This property is calculated internally by the Sankey layout generator.\n     */\n    sourceLinks?: Array<SankeyLink<N, L>> | undefined;\n    /**\n     * Array of incoming links which have this node as their target.\n     * This property is calculated internally by the Sankey layout generator.\n     */\n    targetLinks?: Array<SankeyLink<N, L>> | undefined;\n    /**\n     * Node's value calculated by Sankey layout Generator;\n     * the sum of link.value for the node’s incoming links.\n     */\n    value?: number | undefined;\n    /**\n     * Node's fixedValue (user-defined)\n     */\n    fixedValue?: number | undefined;\n    /**\n     * Node’s zero-based index within the array of nodes calculated by Sankey layout generator.\n     */\n    index?: number | undefined;\n    /**\n     * Node’s zero-based graph depth, derived from the graph topology calculated by Sankey layout generator.\n     */\n    depth?: number | undefined;\n    /**\n     * Node’s zero-based graph height, derived from the graph topology calculated by Sankey layout generator.\n     */\n    height?: number | undefined;\n    /**\n     * Node's minimum horizontal position (derived from the node.depth) calculated by Sankey layout generator.\n     */\n    x0?: number | undefined;\n    /**\n     * Node’s maximum horizontal position (node.x0 + sankey.nodeWidth) calculated by Sankey layout generator.\n     */\n    x1?: number | undefined;\n    /**\n     * Node's minimum vertical position calculated by Sankey layout generator.\n     */\n    y0?: number | undefined;\n    /**\n     * Node's maximum vertical position (node.y1 - node.y0 is proportional to node.value) calculated by Sankey layout generator.\n     */\n    y1?: number | undefined;\n}\n\n/**\n * Sankey Node type including both user-defined node data elements as well as those\n * calculated once the layout(...) method of the Sankey layout generators has been invoked.\n *\n * The first generic N refers to user-defined properties contained in the node data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyNodeMinimal interface.\n *\n * The second generic L refers to user-defined properties contained in the link data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyLinkMinimal interface.\n */\nexport type SankeyNode<N extends SankeyExtraProperties, L extends SankeyExtraProperties> = N & SankeyNodeMinimal<N, L>;\n\n/**\n * Helper interface to define the properties of Sankey Links. Calculated properties may only be defined,\n * once the layout(...) method of the Sankey layout generator has been invoked.\n *\n * The first generic N refers to user-defined properties contained in the node data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyNodeMinimal interface.\n *\n * The second generic L refers to user-defined properties contained in the link data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyLinkMinimal interface.\n */\nexport interface SankeyLinkMinimal<N extends SankeyExtraProperties, L extends SankeyExtraProperties> {\n    /**\n     * Link's source node. For convenience, when initializing a Sankey layout using the default node id accessor,\n     * source may be the zero-based index of the corresponding node in the nodes array\n     * returned by the nodes accessor of the Sankey layout generator rather than object references. Alternatively,\n     * the Sankey layout can be configured with a custom node ID accessor to resolve the source node of the link upon initialization.\n     *\n     * Once the Sankey generator is invoked to return the Sankey graph object,\n     * the numeric index will be replaced with the corresponding source node object.\n     */\n    source: number | string | SankeyNode<N, L>;\n    /**\n     * Link's target node. For convenience, when initializing a Sankey layout using the default node id accessor,\n     * target may be the zero-based index of the corresponding node in the nodes array\n     * returned by the nodes accessor of the Sankey layout generator rather than object references. Alternatively,\n     * the Sankey layout can be configured with a custom node ID accessor to resolve the target node of the link upon initialization.\n     *\n     * Once the Sankey generator is invoked to return the Sankey graph object,\n     * the numeric index will be replaced with the corresponding target node object.\n     */\n    target: number | string | SankeyNode<N, L>;\n    /**\n     * Link's numeric value\n     */\n    value: number;\n    /**\n     * Link's vertical starting position (at source node) calculated by Sankey layout generator.\n     */\n    y0?: number | undefined;\n    /**\n     * Link's vertical end position (at target node) calculated by Sankey layout generator.\n     */\n    y1?: number | undefined;\n    /**\n     * Link's width (proportional to its value) calculated by Sankey layout generator.\n     */\n    width?: number | undefined;\n    /**\n     * Link's zero-based index within the array of links calculated by Sankey layout generator.\n     */\n    index?: number | undefined;\n}\n\n/**\n * Sankey Link type including both user-defined link data elements, those required by the Sankey layout generator,\n *  as well as those calculated once the layout(...) method of the layout generator has been invoked.\n *\n * The first generic N refers to user-defined properties contained in the node data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyNodeMinimal interface.\n *\n * The second generic L refers to user-defined properties contained in the link data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyLinkMinimal interface.\n */\nexport type SankeyLink<N extends SankeyExtraProperties, L extends SankeyExtraProperties> = L & SankeyLinkMinimal<N, L>;\n\n/**\n * A Sankey Graph Object which contains the computed layout information for nodes and links.\n *\n * The first generic N refers to user-defined properties contained in the node data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyNodeMinimal interface.\n *\n * The second generic L refers to user-defined properties contained in the link data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyLinkMinimal interface.\n */\nexport interface SankeyGraph<N extends SankeyExtraProperties, L extends SankeyExtraProperties> {\n    /**\n     * Array of Sankey diagram nodes\n     */\n    nodes: Array<SankeyNode<N, L>>;\n    /**\n     * Array of Sankey diagram links\n     */\n    links: Array<SankeyLink<N, L>>;\n}\n\n/**\n * A Sankey layout generator.\n *\n * The first generic Data refers to the data type of the first argument passed in when invoking the\n * Sankey layout generator and internally the configured nodes/links accessor functions.\n *\n * The second generic N refers to user-defined properties contained in the node data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyNodeMinimal interface.\n *\n * The third generic L refers to user-defined properties contained in the link data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyLinkMinimal interface.\n */\nexport interface SankeyLayout<Data, N extends SankeyExtraProperties, L extends SankeyExtraProperties> {\n    /**\n     * Computes the node and link positions for the given arguments, returning a graph representing the Sankey layout.\n     *\n     * @param data Data object being passed as the first argument to the nodes and links accessor functions. Additional arguments will also be passed\n     * to the accessor functions.\n     */\n    (data: Data, ...args: any[]): SankeyGraph<N, L>;\n\n    /**\n     * Recomputes the specified graph’s links’ positions, updating the following properties of each link:\n     *\n     * - link.sy: the link’s vertical starting position (at source node)\n     * - link.ty: the link’s vertical end position (at target node)\n     *\n     * This method is intended to be called after computing the initial Sankey layout, for example when the diagram is repositioned interactively.\n     *\n     * @param graph A previously initialized Sankey graph for which the link positions should be re-calculated\n     */\n    update(graph: SankeyGraph<N, L>): SankeyGraph<N, L>;\n\n    /**\n     * Return the current nodes accessor function, which defaults to a function returning the \"nodes\" property of the\n     * first argument it is invoked with.\n     */\n    nodes(): (data: Data, ...args: any[]) => Array<SankeyNode<N, L>>;\n    /**\n     * Set the Sankey generator's nodes accessor to a function returning the specified array of objects and returns this Sankey layout generator.\n     *\n     * @param nodes Array of nodes.\n     */\n    nodes(nodes: Array<SankeyNode<N, L>>): this;\n    /**\n     * Set the Sankey generator's nodes accessor to the specified function and returns this Sankey layout generator.\n     *\n     * @param nodes A nodes accessor function. The function is invoked when the Sankey layout is generated, being passed any arguments passed to the Sankey generator.\n     * This function must return an array of nodes.\n     */\n    nodes(nodes: (data: Data, ...args: any[]) => Array<SankeyNode<N, L>>): this;\n\n    /**\n     * Return the current links accessor function, which defaults to a function returning the \"links\" property of the\n     * first argument it is invoked with.\n     */\n    links(): (data: Data, ...args: any[]) => Array<SankeyLink<N, L>>;\n    /**\n     * Set the Sankey generator's links accessor to a function returning the specified array of objects and returns this Sankey layout generator.\n     *\n     * @param links Array of links.\n     */\n    links(links: Array<SankeyLink<N, L>>): this;\n    /**\n     * Set the Sankey generator's links accessor to the specified function and returns this Sankey layout generator.\n     *\n     * @param links A links accessor function. The function is invoked when the Sankey layout is generated, being passed any arguments passed to the Sankey generator.\n     * This function must return an array of links.\n     */\n    links(links: (data: Data, ...args: any[]) => Array<SankeyLink<N, L>>): this;\n\n    /**\n     * Return the current node id accessor.\n     * The default accessor is a function being passed in a Sankey layout node and returning its numeric node.index.\n     */\n    nodeId(): (node: SankeyNode<N, L>) => string | number;\n    /**\n     * Set the node id accessor to the specified function and return this Sankey layout generator.\n     *\n     * The default accessor is a function being passed in a Sankey layout node and returning its numeric node.index.\n     * The default id accessor allows each link’s source and target to be specified as a zero-based index into the nodes array.\n     *\n     * @param nodeId A node id accessor function being passed a node in the Sankey graph and returning its id.\n     */\n    nodeId(nodeId: (node: SankeyNode<N, L>) => string | number): this;\n\n    /**\n     * Return the current node alignment method, which defaults to d3.sankeyJustify.\n     */\n    nodeAlign(): (node: SankeyNode<N, L>, n: number) => number;\n    /**\n     * Set the node alignment method the specified function and return this Sankey layout generator.\n     *\n     * @param nodeAlign A node alignment function which is evaluated for each input node in order,\n     * being passed the current node and the total depth n of the graph (one plus the maximum node.depth),\n     * and must return an integer between 0 and n - 1 that indicates the desired horizontal position of the node in the generated Sankey diagram.\n     */\n    nodeAlign(nodeAlign: (node: SankeyNode<N, L>, n: number) => number): this;\n\n    /**\n     * Return the current node width, which defaults to 24.\n     */\n    nodeWidth(): number;\n    /**\n     * Set the node width to the specified number and return this Sankey layout generator.\n     *\n     * @param width Width of node in pixels, which defaults to 24.\n     */\n    nodeWidth(width: number): this;\n\n    /**\n     * Return the current node padding, which defaults to 8.\n     *\n     * Node padding refers to the vertical space between nodes which occupy the same horizontal space.\n     */\n    nodePadding(): number;\n    /**\n     * Set the vertical separation between nodes at each column to the specified number and return this Sankey layout generator.\n     *\n     * @param padding Node padding, i.e. vertical separation between nodes at each column, in pixels, which defaults to 8.\n     */\n    nodePadding(padding: number): this;\n\n    /**\n     * Return the current extent which defaults to [[0, 0], [1, 1]].\n     */\n    extent(): [[number, number], [number, number]];\n    /**\n     * Set the extent of the Sankey layout to the specified bounds and returns this Sankey layout generator.\n     *\n     * @param extent Extent bounds for the layout. The extent bounds are specified as an array [[x0, y0], [x1, y1]],\n     * where x0 is the left side of the extent, y0 is the top, x1 is the right and y1 is the bottom. The default is [[0, 0], [1, 1]].\n     */\n    extent(extent: [[number, number], [number, number]]): this;\n\n    /**\n     * Return the current layout size in pixels. The size is a two element array of [width, height] which defaults to [1, 1].\n     */\n    size(): [number, number];\n    /**\n     * Set the size of the layout and return this Sankey layout generator.\n     * This convenience method is equivalent to using extent([[0, 0], [width, height]]).\n     *\n     * @param size A two element array of [width, height] in pixels which defaults to [1, 1].\n     */\n    size(size: [number, number]): this;\n\n    /**\n     * Return the current number of relaxation iterations, which defaults to 32.\n     */\n    iterations(): number;\n    /**\n     * Set the number of relaxation iterations when generating the layout and return this Sankey layout generator.\n     *\n     * @param iterations Number of relaxation iterations, which defaults to 32.\n     */\n    iterations(iterations: number): this;\n\n    /**\n     * Returns the node comparison function which defaults to undefined.\n     */\n    nodeSort(): ((a: SankeyNode<N, L>, b: SankeyNode<N, L>) => number) | undefined;\n\n    /**\n     * Set the node comparison function and return this Sankey layout generator.\n     *\n     * @param compare Node comparison function.\n     */\n    nodeSort(compare: (a: SankeyNode<N, L>, b: SankeyNode<N, L>) => number | undefined | null): this;\n\n    /**\n     * Returns the link comparison function which defaults to undefined.\n     */\n    linkSort(): ((a: SankeyLink<N, L>, b: SankeyLink<N, L>) => number) | undefined;\n\n    /**\n     * Set the link comparison function and return this Sankey layout generator.\n     *\n     * @param compare Link comparison function.\n     */\n    linkSort(compare: (a: SankeyLink<N, L>, b: SankeyLink<N, L>) => number | undefined | null): this;\n}\n\n/**\n * Get a Sankey layout generator.\n *\n * Invoking sankey() without generics, means the node type and link type assume no user-defined attributes, i.e.\n * only the attributes internally used by the Sankey layout generator.\n *\n * Default nodes/links accessors are assumed.\n */\nexport function sankey(): SankeyLayout<SankeyGraph<{}, {}>, {}, {}>;\n/**\n * Get a Sankey layout generator.\n *\n * Default nodes/links accessors are assumed.\n *\n * The first generic N refers to user-defined properties contained in the node data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyNodeMinimal interface.\n *\n * The second generic L refers to user-defined properties contained in the link data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyLinkMinimal interface.\n */\nexport function sankey<N extends SankeyExtraProperties, L extends SankeyExtraProperties>(): SankeyLayout<\n    SankeyGraph<N, L>,\n    N,\n    L\n>;\n/**\n * Get a Sankey layout generator.\n *\n * The nodes/links accessors need to be configured to work with the data type of the first argument passed\n * in when invoking the Sankey layout generator.\n *\n * The first generic corresponds to the data type of the first argument passed in when invoking the Sankey layout generator,\n * and its nodes/links accessors.\n *\n * The second generic N refers to user-defined properties contained in the node data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyNodeMinimal interface.\n *\n * The third generic L refers to user-defined properties contained in the link data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyLinkMinimal interface.\n */\nexport function sankey<Data, N extends SankeyExtraProperties, L extends SankeyExtraProperties>(): SankeyLayout<\n    Data,\n    N,\n    L\n>;\n\n/**\n * Compute the horizontal node position of a node in a Sankey layout with left alignment.\n * Returns (node.depth) to indicate the desired horizontal position of the node in the generated Sankey diagram.\n *\n * @param node Sankey node for which to calculate the horizontal node position.\n * @param n Total depth n of the graph  (one plus the maximum node.depth)\n */\nexport function sankeyLeft(node: SankeyNode<{}, {}>, n: number): number;\n\n/**\n * Compute the horizontal node position of a node in a Sankey layout with right alignment.\n * Returns (n - 1 - node.height) to indicate the desired horizontal position of the node in the generated Sankey diagram.\n *\n * @param node Sankey node for which to calculate the horizontal node position.\n * @param n Total depth n of the graph  (one plus the maximum node.depth)\n */\nexport function sankeyRight(node: SankeyNode<{}, {}>, n: number): number;\n\n/**\n * Compute the horizontal node position of a node in a Sankey layout with center alignment.\n * Like d3.sankeyLeft, except that nodes without any incoming links are moved as right as possible.\n * Returns an integer between 0 and n - 1 that indicates the desired horizontal position of the node in the generated Sankey diagram.\n *\n * @param node Sankey node for which to calculate the horizontal node position.\n * @param n Total depth n of the graph  (one plus the maximum node.depth)\n */\nexport function sankeyCenter(node: SankeyNode<{}, {}>, n: number): number;\n\n/**\n * Compute the horizontal node position of a node in a Sankey layout with justified alignment.\n * Like d3.sankeyLeft, except that nodes without any outgoing links are moved to the far right.\n * Returns an integer between 0 and n - 1 that indicates the desired horizontal position of the node in the generated Sankey diagram.\n *\n * @param node Sankey node for which to calculate the horizontal node position.\n * @param n Total depth n of the graph  (one plus the maximum node.depth)\n */\nexport function sankeyJustify(node: SankeyNode<{}, {}>, n: number): number;\n\n/**\n * Get a horizontal link shape suitable for a Sankey diagram.\n * Source and target accessors are pre-configured and work with the\n * default x- and y- accessors of the link shape generator.\n */\nexport function sankeyLinkHorizontal(): Link<any, SankeyLink<{}, {}>, [number, number]>;\n/**\n * Get a horizontal link shape suitable for a Sankey diagram.\n * Source and target accessors are pre-configured and work with the\n * default x- and y- accessors of the link shape generator.\n *\n * The first generic N refers to user-defined properties contained in the node data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyNodeMinimal interface.\n *\n * The second generic L refers to user-defined properties contained in the link data passed into\n * Sankey layout generator. These properties are IN EXCESS to the properties explicitly identified in the\n * SankeyLinkMinimal interface.\n */\nexport function sankeyLinkHorizontal<N extends SankeyExtraProperties, L extends SankeyExtraProperties>(): Link<\n    any,\n    SankeyLink<N, L>,\n    [number, number]\n>;"
};

export const getExtractedTypes = (): ExtractedTypes => EXTRACTED_TYPES;
